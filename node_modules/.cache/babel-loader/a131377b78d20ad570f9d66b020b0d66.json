{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport { defineComponent, getCurrentInstance, ref, computed, unref, provide, toRef, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, createSlots, withCtx, renderSlot, createElementVNode, createBlock, createCommentVNode } from 'vue';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../focus-trap/index.mjs';\nimport '../../roving-focus-group/index.mjs';\nimport '../../../utils/index.mjs';\nimport { ArrowDown } from '@element-plus/icons-vue';\nimport '../../../hooks/index.mjs';\nimport { ElCollection, dropdownProps } from './dropdown.mjs';\nimport { DROPDOWN_INJECTION_KEY } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ElFocusTrap from '../../focus-trap/src/focus-trap.mjs';\nimport ElRovingFocusGroup from '../../roving-focus-group/src/roving-focus-group2.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { addUnit } from '../../../utils/vue/style.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nvar ElButtonGroup = ElButton.ButtonGroup;\n\nvar _sfc_main = defineComponent({\n  name: \"ElDropdown\",\n  components: {\n    ElButton: ElButton,\n    ElFocusTrap: ElFocusTrap,\n    ElButtonGroup: ElButtonGroup,\n    ElScrollbar: ElScrollbar,\n    ElDropdownCollection: ElCollection,\n    ElTooltip: ElTooltip,\n    ElRovingFocusGroup: ElRovingFocusGroup,\n    ElIcon: ElIcon,\n    ArrowDown: ArrowDown\n  },\n  props: dropdownProps,\n  emits: [\"visible-change\", \"click\", \"command\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n\n    var _instance = getCurrentInstance();\n\n    var ns = useNamespace(\"dropdown\");\n    var triggeringElementRef = ref();\n    var referenceElementRef = ref();\n    var popperRef = ref(null);\n    var contentRef = ref(null);\n    var scrollbar = ref(null);\n    var currentTabId = ref(null);\n    var isUsingKeyboard = ref(false);\n    var wrapStyle = computed(function () {\n      return {\n        maxHeight: addUnit(props.maxHeight)\n      };\n    });\n    var dropdownTriggerKls = computed(function () {\n      return [ns.m(dropdownSize.value)];\n    });\n\n    function handleClick() {\n      handleClose();\n    }\n\n    function handleClose() {\n      var _a;\n\n      (_a = popperRef.value) == null ? void 0 : _a.onClose();\n    }\n\n    function handleOpen() {\n      var _a;\n\n      (_a = popperRef.value) == null ? void 0 : _a.onOpen();\n    }\n\n    var dropdownSize = useSize();\n\n    function commandHandler() {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      emit.apply(void 0, [\"command\"].concat(args));\n    }\n\n    function onItemEnter() {}\n\n    function onItemLeave() {\n      var contentEl = unref(contentRef);\n      contentEl == null ? void 0 : contentEl.focus();\n      currentTabId.value = null;\n    }\n\n    function handleCurrentTabIdChange(id) {\n      currentTabId.value = id;\n    }\n\n    function handleEntryFocus(e) {\n      if (!isUsingKeyboard.value) {\n        e.preventDefault();\n        e.stopImmediatePropagation();\n      }\n    }\n\n    provide(DROPDOWN_INJECTION_KEY, {\n      contentRef: contentRef,\n      isUsingKeyboard: isUsingKeyboard,\n      onItemEnter: onItemEnter,\n      onItemLeave: onItemLeave\n    });\n    provide(\"elDropdown\", {\n      instance: _instance,\n      dropdownSize: dropdownSize,\n      handleClick: handleClick,\n      commandHandler: commandHandler,\n      trigger: toRef(props, \"trigger\"),\n      hideOnClick: toRef(props, \"hideOnClick\")\n    });\n\n    var onMountOnFocus = function onMountOnFocus(e) {\n      var _a, _b;\n\n      e.preventDefault();\n      (_b = (_a = contentRef.value) == null ? void 0 : _a.focus) == null ? void 0 : _b.call(_a, {\n        preventScroll: true\n      });\n    };\n\n    var handlerMainButtonClick = function handlerMainButtonClick(event) {\n      emit(\"click\", event);\n    };\n\n    return {\n      ns: ns,\n      scrollbar: scrollbar,\n      wrapStyle: wrapStyle,\n      dropdownTriggerKls: dropdownTriggerKls,\n      dropdownSize: dropdownSize,\n      currentTabId: currentTabId,\n      handleCurrentTabIdChange: handleCurrentTabIdChange,\n      handlerMainButtonClick: handlerMainButtonClick,\n      handleEntryFocus: handleEntryFocus,\n      handleClose: handleClose,\n      handleOpen: handleOpen,\n      onMountOnFocus: onMountOnFocus,\n      popperRef: popperRef,\n      triggeringElementRef: triggeringElementRef,\n      referenceElementRef: referenceElementRef\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a;\n\n  var _component_el_dropdown_collection = resolveComponent(\"el-dropdown-collection\");\n\n  var _component_el_roving_focus_group = resolveComponent(\"el-roving-focus-group\");\n\n  var _component_el_focus_trap = resolveComponent(\"el-focus-trap\");\n\n  var _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n\n  var _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  var _component_el_button = resolveComponent(\"el-button\");\n\n  var _component_arrow_down = resolveComponent(\"arrow-down\");\n\n  var _component_el_icon = resolveComponent(\"el-icon\");\n\n  var _component_el_button_group = resolveComponent(\"el-button-group\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.ns.b())\n  }, [createVNode(_component_el_tooltip, {\n    ref: \"popperRef\",\n    effect: _ctx.effect,\n    \"fallback-placements\": [\"bottom\", \"top\"],\n    \"popper-options\": _ctx.popperOptions,\n    \"gpu-acceleration\": false,\n    \"hide-after\": _ctx.hideTimeout,\n    \"manual-mode\": true,\n    placement: _ctx.placement,\n    \"popper-class\": [_ctx.ns.e(\"popper\"), _ctx.popperClass],\n    \"reference-element\": (_a = _ctx.referenceElementRef) == null ? void 0 : _a.$el,\n    trigger: _ctx.trigger,\n    \"show-after\": _ctx.showTimeout,\n    \"stop-popper-mouse-event\": false,\n    \"virtual-ref\": _ctx.triggeringElementRef,\n    \"virtual-triggering\": _ctx.splitButton,\n    \"append-to-body\": \"\",\n    pure: \"\",\n    transition: \"\".concat(_ctx.ns.namespace.value, \"-zoom-in-top\"),\n    persistent: \"\",\n    onShow: _cache[0] || (_cache[0] = function ($event) {\n      return _ctx.$emit(\"visible-change\", true);\n    }),\n    onHide: _cache[1] || (_cache[1] = function ($event) {\n      return _ctx.$emit(\"visible-change\", false);\n    })\n  }, createSlots({\n    content: withCtx(function () {\n      return [createVNode(_component_el_scrollbar, {\n        ref: \"scrollbar\",\n        \"wrap-style\": _ctx.wrapStyle,\n        tag: \"div\",\n        \"view-class\": _ctx.ns.e(\"list\")\n      }, {\n        default: withCtx(function () {\n          return [createVNode(_component_el_focus_trap, {\n            trapped: \"\",\n            onMountOnFocus: _ctx.onMountOnFocus\n          }, {\n            default: withCtx(function () {\n              return [createVNode(_component_el_roving_focus_group, {\n                loop: _ctx.loop,\n                \"current-tab-id\": _ctx.currentTabId,\n                orientation: \"horizontal\",\n                onCurrentTabIdChange: _ctx.handleCurrentTabIdChange,\n                onEntryFocus: _ctx.handleEntryFocus\n              }, {\n                default: withCtx(function () {\n                  return [createVNode(_component_el_dropdown_collection, null, {\n                    default: withCtx(function () {\n                      return [renderSlot(_ctx.$slots, \"dropdown\")];\n                    }),\n                    _: 3\n                  })];\n                }),\n                _: 3\n              }, 8, [\"loop\", \"current-tab-id\", \"onCurrentTabIdChange\", \"onEntryFocus\"])];\n            }),\n            _: 3\n          }, 8, [\"onMountOnFocus\"])];\n        }),\n        _: 3\n      }, 8, [\"wrap-style\", \"view-class\"])];\n    }),\n    _: 2\n  }, [!_ctx.splitButton ? {\n    name: \"default\",\n    fn: withCtx(function () {\n      return [createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.dropdownTriggerKls)\n      }, [renderSlot(_ctx.$slots, \"default\")], 2)];\n    })\n  } : void 0]), 1032, [\"effect\", \"popper-options\", \"hide-after\", \"placement\", \"popper-class\", \"reference-element\", \"trigger\", \"show-after\", \"virtual-ref\", \"virtual-triggering\", \"transition\"]), _ctx.splitButton ? (openBlock(), createBlock(_component_el_button_group, {\n    key: 0\n  }, {\n    default: withCtx(function () {\n      return [createVNode(_component_el_button, {\n        ref: \"referenceElementRef\",\n        size: _ctx.dropdownSize,\n        type: _ctx.type,\n        onClick: _ctx.handlerMainButtonClick\n      }, {\n        default: withCtx(function () {\n          return [renderSlot(_ctx.$slots, \"default\")];\n        }),\n        _: 3\n      }, 8, [\"size\", \"type\", \"onClick\"]), createVNode(_component_el_button, {\n        ref: \"triggeringElementRef\",\n        size: _ctx.dropdownSize,\n        type: _ctx.type,\n        class: normalizeClass(_ctx.ns.e(\"caret-button\"))\n      }, {\n        default: withCtx(function () {\n          return [createVNode(_component_el_icon, {\n            class: normalizeClass(_ctx.ns.e(\"icon\"))\n          }, {\n            default: withCtx(function () {\n              return [createVNode(_component_arrow_down)];\n            }),\n            _: 1\n          }, 8, [\"class\"])];\n        }),\n        _: 1\n      }, 8, [\"size\", \"type\", \"class\"])];\n    }),\n    _: 3\n  })) : createCommentVNode(\"v-if\", true)], 2);\n}\n\nvar Dropdown = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Dropdown as default };","map":{"version":3,"mappings":"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","names":["ElButtonGroup","ElButton","ButtonGroup","_sfc_main","defineComponent","name","components","ElFocusTrap","ElScrollbar","ElDropdownCollection","ElTooltip","ElRovingFocusGroup","ElIcon","ArrowDown","props","dropdownProps","emits","setup","emit","_instance","getCurrentInstance","ns","useNamespace","triggeringElementRef","ref","referenceElementRef","popperRef","contentRef","scrollbar","currentTabId","isUsingKeyboard","wrapStyle","computed","maxHeight","addUnit","dropdownTriggerKls","m","dropdownSize","value","handleClose","useSize","args","contentEl","e","provide","onItemEnter","onItemLeave","instance","handleClick","commandHandler","trigger","hideOnClick","onMountOnFocus","preventScroll","handleCurrentTabIdChange","handlerMainButtonClick","handleEntryFocus","handleOpen","class","createVNode","effect","placement","_ctx","pure","transition","persistent","onShow","onHide","createSlots","content","_withCtx","tag","default","trapped","loop","onCurrentTabIdChange","onEntryFocus","_","splitButton","createElementVNode","key","type","onClick"],"sources":["../../../../../../packages/components/dropdown/src/dropdown.vue"],"sourcesContent":["<template>\n  <div :class=\"ns.b()\">\n    <el-tooltip\n      ref=\"popperRef\"\n      :effect=\"effect\"\n      :fallback-placements=\"['bottom', 'top']\"\n      :popper-options=\"popperOptions\"\n      :gpu-acceleration=\"false\"\n      :hide-after=\"hideTimeout\"\n      :manual-mode=\"true\"\n      :placement=\"placement\"\n      :popper-class=\"[ns.e('popper'), popperClass]\"\n      :reference-element=\"referenceElementRef?.$el\"\n      :trigger=\"trigger\"\n      :show-after=\"showTimeout\"\n      :stop-popper-mouse-event=\"false\"\n      :virtual-ref=\"triggeringElementRef\"\n      :virtual-triggering=\"splitButton\"\n      append-to-body\n      pure\n      :transition=\"`${ns.namespace.value}-zoom-in-top`\"\n      persistent\n      @show=\"$emit('visible-change', true)\"\n      @hide=\"$emit('visible-change', false)\"\n    >\n      <template #content>\n        <el-scrollbar\n          ref=\"scrollbar\"\n          :wrap-style=\"wrapStyle\"\n          tag=\"div\"\n          :view-class=\"ns.e('list')\"\n        >\n          <el-focus-trap trapped @mount-on-focus=\"onMountOnFocus\">\n            <el-roving-focus-group\n              :loop=\"loop\"\n              :current-tab-id=\"currentTabId\"\n              orientation=\"horizontal\"\n              @current-tab-id-change=\"handleCurrentTabIdChange\"\n              @entry-focus=\"handleEntryFocus\"\n            >\n              <el-dropdown-collection>\n                <slot name=\"dropdown\"></slot>\n              </el-dropdown-collection>\n            </el-roving-focus-group>\n          </el-focus-trap>\n        </el-scrollbar>\n      </template>\n      <template v-if=\"!splitButton\" #default>\n        <div :class=\"dropdownTriggerKls\">\n          <slot name=\"default\" />\n        </div>\n      </template>\n    </el-tooltip>\n    <template v-if=\"splitButton\">\n      <el-button-group>\n        <el-button\n          ref=\"referenceElementRef\"\n          :size=\"dropdownSize\"\n          :type=\"type\"\n          @click=\"handlerMainButtonClick\"\n        >\n          <slot name=\"default\" />\n        </el-button>\n        <el-button\n          ref=\"triggeringElementRef\"\n          :size=\"dropdownSize\"\n          :type=\"type\"\n          :class=\"ns.e('caret-button')\"\n        >\n          <el-icon :class=\"ns.e('icon')\"><arrow-down /></el-icon>\n        </el-button>\n      </el-button-group>\n    </template>\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  getCurrentInstance,\n  provide,\n  ref,\n  toRef,\n  unref,\n} from 'vue'\nimport ElButton from '@element-plus/components/button'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport ElIcon from '@element-plus/components/icon'\nimport ElFocusTrap from '@element-plus/components/focus-trap'\nimport ElRovingFocusGroup from '@element-plus/components/roving-focus-group'\nimport { addUnit } from '@element-plus/utils'\nimport { ArrowDown } from '@element-plus/icons-vue'\nimport { useNamespace, useSize } from '@element-plus/hooks'\nimport { ElCollection as ElDropdownCollection, dropdownProps } from './dropdown'\nimport { DROPDOWN_INJECTION_KEY } from './tokens'\n\nimport type { CSSProperties } from 'vue'\n\nconst { ButtonGroup: ElButtonGroup } = ElButton\n\nexport default defineComponent({\n  name: 'ElDropdown',\n  components: {\n    ElButton,\n    ElFocusTrap,\n    ElButtonGroup,\n    ElScrollbar,\n    ElDropdownCollection,\n    ElTooltip,\n    ElRovingFocusGroup,\n    ElIcon,\n    ArrowDown,\n  },\n  props: dropdownProps,\n  emits: ['visible-change', 'click', 'command'],\n  setup(props, { emit }) {\n    const _instance = getCurrentInstance()\n    const ns = useNamespace('dropdown')\n\n    const triggeringElementRef = ref()\n    const referenceElementRef = ref()\n    const popperRef = ref<InstanceType<typeof ElTooltip> | null>(null)\n    const contentRef = ref<HTMLElement | null>(null)\n    const scrollbar = ref(null)\n    const currentTabId = ref<string | null>(null)\n    const isUsingKeyboard = ref(false)\n\n    const wrapStyle = computed<CSSProperties>(() => ({\n      maxHeight: addUnit(props.maxHeight),\n    }))\n    const dropdownTriggerKls = computed(() => [ns.m(dropdownSize.value)])\n\n    function handleClick() {\n      handleClose()\n    }\n\n    function handleClose() {\n      popperRef.value?.onClose()\n    }\n\n    function handleOpen() {\n      popperRef.value?.onOpen()\n    }\n\n    const dropdownSize = useSize()\n\n    function commandHandler(...args: any[]) {\n      emit('command', ...args)\n    }\n\n    function onItemEnter() {\n      // NOOP for now\n    }\n\n    function onItemLeave() {\n      const contentEl = unref(contentRef)\n\n      contentEl?.focus()\n      currentTabId.value = null\n    }\n\n    function handleCurrentTabIdChange(id: string) {\n      currentTabId.value = id\n    }\n\n    function handleEntryFocus(e: Event) {\n      if (!isUsingKeyboard.value) {\n        e.preventDefault()\n        e.stopImmediatePropagation()\n      }\n    }\n\n    provide(DROPDOWN_INJECTION_KEY, {\n      contentRef,\n      isUsingKeyboard,\n      onItemEnter,\n      onItemLeave,\n    })\n\n    provide('elDropdown', {\n      instance: _instance,\n      dropdownSize,\n      handleClick,\n      commandHandler,\n      trigger: toRef(props, 'trigger'),\n      hideOnClick: toRef(props, 'hideOnClick'),\n    })\n\n    const onMountOnFocus = (e: Event) => {\n      e.preventDefault()\n      contentRef.value?.focus?.({\n        preventScroll: true,\n      })\n    }\n\n    const handlerMainButtonClick = (event: MouseEvent) => {\n      emit('click', event)\n    }\n\n    return {\n      ns,\n      scrollbar,\n      wrapStyle,\n      dropdownTriggerKls,\n      dropdownSize,\n      currentTabId,\n      handleCurrentTabIdChange,\n      handlerMainButtonClick,\n      handleEntryFocus,\n      handleClose,\n      handleOpen,\n      onMountOnFocus,\n      popperRef,\n      triggeringElementRef,\n      referenceElementRef,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}