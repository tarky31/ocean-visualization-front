{"ast":null,"code":"import _objectSpread from \"D:/MyFile/WebCode/ocean-vis/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { defineComponent, ref, provide, computed, openBlock, createBlock, Teleport, createVNode, Transition, unref, withCtx, withDirectives, createElementVNode, normalizeClass, normalizeStyle, renderSlot, createCommentVNode, vShow } from 'vue';\nimport { ElOverlay } from '../../overlay/index.mjs';\nimport '../../../hooks/index.mjs';\nimport _sfc_main$1 from './dialog-content2.mjs';\nimport { dialogProps, dialogEmits } from './dialog.mjs';\nimport { elDialogInjectionKey } from './token.mjs';\nimport { useDialog } from './use-dialog.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { useSameTarget } from '../../../hooks/use-same-target/index.mjs';\nimport { useDraggable } from '../../../hooks/use-draggable/index.mjs';\nvar __default__ = {\n  name: \"ElDialog\"\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: dialogProps,\n  emits: dialogEmits,\n  setup: function setup(__props, _ref) {\n    var emit = _ref.emit;\n    var props = __props;\n    var ns = useNamespace(\"dialog\");\n    var dialogRef = ref(null);\n    var headerRef = ref(null);\n    var dialog = useDialog(props, {\n      emit: emit\n    }, dialogRef);\n    var visible = dialog.visible,\n        afterEnter = dialog.afterEnter,\n        afterLeave = dialog.afterLeave,\n        beforeLeave = dialog.beforeLeave,\n        style = dialog.style,\n        handleClose = dialog.handleClose,\n        rendered = dialog.rendered,\n        zIndex = dialog.zIndex;\n    provide(elDialogInjectionKey, {\n      dialogRef: dialogRef,\n      headerRef: headerRef,\n      ns: ns,\n      rendered: rendered,\n      style: style\n    });\n    var overlayEvent = useSameTarget(dialog.onModalClick);\n    var draggable = computed(function () {\n      return props.draggable && !props.fullscreen;\n    });\n    useDraggable(dialogRef, headerRef, draggable);\n    return function (_ctx, _cache) {\n      return openBlock(), createBlock(Teleport, {\n        to: \"body\",\n        disabled: !_ctx.appendToBody\n      }, [createVNode(Transition, {\n        name: \"dialog-fade\",\n        onAfterEnter: unref(afterEnter),\n        onAfterLeave: unref(afterLeave),\n        onBeforeLeave: unref(beforeLeave)\n      }, {\n        default: withCtx(function () {\n          return [withDirectives(createVNode(unref(ElOverlay), {\n            \"custom-mask-event\": \"\",\n            mask: _ctx.modal,\n            \"overlay-class\": _ctx.modalClass,\n            \"z-index\": unref(zIndex)\n          }, {\n            default: withCtx(function () {\n              return [createElementVNode(\"div\", {\n                class: normalizeClass(\"\".concat(unref(ns).namespace.value, \"-overlay-dialog\")),\n                onClick: _cache[0] || (_cache[0] = function () {\n                  var _unref;\n\n                  return unref(overlayEvent).onClick && (_unref = unref(overlayEvent)).onClick.apply(_unref, arguments);\n                }),\n                onMousedown: _cache[1] || (_cache[1] = function () {\n                  var _unref2;\n\n                  return unref(overlayEvent).onMousedown && (_unref2 = unref(overlayEvent)).onMousedown.apply(_unref2, arguments);\n                }),\n                onMouseup: _cache[2] || (_cache[2] = function () {\n                  var _unref3;\n\n                  return unref(overlayEvent).onMouseup && (_unref3 = unref(overlayEvent)).onMouseup.apply(_unref3, arguments);\n                })\n              }, [unref(rendered) ? (openBlock(), createBlock(_sfc_main$1, {\n                key: 0,\n                \"custom-class\": _ctx.customClass,\n                center: _ctx.center,\n                \"close-icon\": _ctx.closeIcon,\n                draggable: unref(draggable),\n                fullscreen: _ctx.fullscreen,\n                \"show-close\": _ctx.showClose,\n                style: normalizeStyle(unref(style)),\n                title: _ctx.title,\n                onClose: unref(handleClose)\n              }, {\n                title: withCtx(function () {\n                  return [renderSlot(_ctx.$slots, \"title\")];\n                }),\n                footer: withCtx(function () {\n                  return [renderSlot(_ctx.$slots, \"footer\")];\n                }),\n                default: withCtx(function () {\n                  return [renderSlot(_ctx.$slots, \"default\")];\n                }),\n                _: 3\n              }, 8, [\"custom-class\", \"center\", \"close-icon\", \"draggable\", \"fullscreen\", \"show-close\", \"style\", \"title\", \"onClose\"])) : createCommentVNode(\"v-if\", true)], 34)];\n            }),\n            _: 3\n          }, 8, [\"mask\", \"overlay-class\", \"z-index\"]), [[vShow, unref(visible)]])];\n        }),\n        _: 3\n      }, 8, [\"onAfterEnter\", \"onAfterLeave\", \"onBeforeLeave\"])], 8, [\"disabled\"]);\n    };\n  }\n}));\n\nexport { _sfc_main as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;AAkEA;AACA;AACA;AAEA;AAAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAWAC;0BAAA;0BAAA;YAAA;wBAAA;;AAAA;AAQA;AAEA;AAAA;AAAA;AAEAC","names":["emit","provide","useDraggable"],"sources":["../../../../../../packages/components/dialog/src/dialog.vue"],"sourcesContent":["<template>\n  <teleport to=\"body\" :disabled=\"!appendToBody\">\n    <transition\n      name=\"dialog-fade\"\n      @after-enter=\"afterEnter\"\n      @after-leave=\"afterLeave\"\n      @before-leave=\"beforeLeave\"\n    >\n      <el-overlay\n        v-show=\"visible\"\n        custom-mask-event\n        :mask=\"modal\"\n        :overlay-class=\"modalClass\"\n        :z-index=\"zIndex\"\n      >\n        <div\n          :class=\"`${ns.namespace.value}-overlay-dialog`\"\n          @click=\"overlayEvent.onClick\"\n          @mousedown=\"overlayEvent.onMousedown\"\n          @mouseup=\"overlayEvent.onMouseup\"\n        >\n          <el-dialog-content\n            v-if=\"rendered\"\n            :custom-class=\"customClass\"\n            :center=\"center\"\n            :close-icon=\"closeIcon\"\n            :draggable=\"draggable\"\n            :fullscreen=\"fullscreen\"\n            :show-close=\"showClose\"\n            :style=\"style\"\n            :title=\"title\"\n            @close=\"handleClose\"\n          >\n            <template #title>\n              <slot name=\"title\" />\n            </template>\n            <slot />\n            <template #footer>\n              <slot name=\"footer\" />\n            </template>\n          </el-dialog-content>\n        </div>\n      </el-overlay>\n    </transition>\n  </teleport>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, ref, provide } from 'vue'\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport { useNamespace, useDraggable, useSameTarget } from '@element-plus/hooks'\nimport ElDialogContent from './dialog-content.vue'\nimport { dialogProps, dialogEmits } from './dialog'\nimport { elDialogInjectionKey } from './token'\nimport { useDialog } from './use-dialog'\n\nimport type { SetupContext, Ref } from 'vue'\nimport type { DialogEmits } from './dialog'\n\ndefineOptions({\n  name: 'ElDialog',\n})\n\nconst props = defineProps(dialogProps)\nconst emit = defineEmits(dialogEmits)\n\nconst ns = useNamespace('dialog')\nconst dialogRef = ref<HTMLElement | null>(null)\nconst headerRef = ref<HTMLElement | null>(null)\n\nconst dialog = useDialog(\n  props,\n  { emit } as SetupContext<DialogEmits>,\n  dialogRef as Ref<HTMLElement>\n)\nconst {\n  visible,\n  afterEnter,\n  afterLeave,\n  beforeLeave,\n  style,\n  handleClose,\n  rendered,\n  zIndex,\n} = dialog\n\nprovide(elDialogInjectionKey, {\n  dialogRef,\n  headerRef,\n  ns,\n  rendered,\n  style,\n})\n\nconst overlayEvent = useSameTarget(dialog.onModalClick)\n\nconst draggable = computed(() => props.draggable && !props.fullscreen)\n\nuseDraggable(\n  dialogRef as Ref<HTMLElement>,\n  headerRef as Ref<HTMLElement>,\n  draggable\n)\n</script>\n"]},"metadata":{},"sourceType":"module"}