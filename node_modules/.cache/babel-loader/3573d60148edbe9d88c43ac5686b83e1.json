{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport { defineComponent, watch, renderSlot } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { buildProps, definePropType } from '../../../utils/vue/props.mjs';\nimport { provideGlobalConfig } from '../../../hooks/use-global-config/index.mjs';\nvar messageConfig = {};\nvar configProviderProps = buildProps({\n  locale: {\n    type: definePropType(Object)\n  },\n  size: {\n    type: String,\n    values: [\"large\", \"default\", \"small\"]\n  },\n  button: {\n    type: definePropType(Object)\n  },\n  message: {\n    type: definePropType(Object)\n  },\n  zIndex: {\n    type: Number\n  },\n  namespace: {\n    type: String,\n    default: \"el\"\n  }\n});\nvar ConfigProvider = defineComponent({\n  name: \"ElConfigProvider\",\n  props: configProviderProps,\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    watch(function () {\n      return props.message;\n    }, function (val) {\n      Object.assign(messageConfig, val != null ? val : {});\n    }, {\n      immediate: true,\n      deep: true\n    });\n    var config = provideGlobalConfig(props);\n    return function () {\n      return renderSlot(slots, \"default\", {\n        config: config == null ? void 0 : config.value\n      });\n    };\n  }\n});\nexport { configProviderProps, ConfigProvider as default, messageConfig };","map":{"version":3,"mappings":";;;;;;AAGY,IAACA,aAAa,GAAG,EAAjB;AACA,IAACC,mBAAmB,GAAGC,UAAU,CAAC;AAC5CC,QAAM,EAAE;AACNC,QAAI,EAAEC,cAAc,CAACC,MAAD;AADd,GADoC;AAI5CC,MAAI,EAAE;AACJH,QAAI,EAAEI,MADF;AAEJC,UAAM,EAAE,CAAC,OAAD,EAAU,SAAV,EAAqB,OAArB;AAFJ,GAJsC;AAQ5CC,QAAM,EAAE;AACNN,QAAI,EAAEC,cAAc,CAACC,MAAD;AADd,GARoC;AAW5CK,SAAO,EAAE;AACPP,QAAI,EAAEC,cAAc,CAACC,MAAD;AADb,GAXmC;AAc5CM,QAAM,EAAE;AACNR,QAAI,EAAES;AADA,GAdoC;AAiB5CC,WAAS,EAAE;AACTV,QAAI,EAAEI,MADG;AAETO,WAAO,EAAE;AAFA;AAjBiC,CAAD,CAAjC;AAsBZ,qBAAeC,eAAe,CAAC;AAC7BC,MAAI,EAAE,kBADuB;AAE7BC,OAAK,EAAEjB,mBAFsB;AAG7BkB,OAH6B,iBAGvBD,KAHuB,QAGL;AAAA,QAATE,KAAS,QAATA,KAAS;AACtBC,SAAK,CAAC;AAAA,aAAMH,KAAK,CAACP,OAAZ;AAAA,KAAD,EAAsB,UAACW,GAAD,EAAS;AAClChB,YAAM,CAACiB,MAAP,CAAcvB,aAAd,EAA6BsB,GAAG,IAAI,IAAP,GAAcA,GAAd,GAAoB,EAAjD;AACD,KAFI,EAEF;AAAEE,eAAS,EAAE,IAAb;AAAmBC,UAAI,EAAE;AAAzB,KAFE,CAAL;AAGA,QAAMC,MAAM,GAAGC,mBAAmB,CAACT,KAAD,CAAlC;AACA,WAAO;AAAA,aAAMU,UAAU,CAACR,KAAD,EAAQ,SAAR,EAAmB;AAAEM,cAAM,EAAEA,MAAM,IAAI,IAAV,GAAiB,KAAK,CAAtB,GAA0BA,MAAM,CAACG;AAA3C,OAAnB,CAAhB;AAAA,KAAP;AACD;AAT4B,CAAD,CAA9B","names":["messageConfig","configProviderProps","buildProps","locale","type","definePropType","Object","size","String","values","button","message","zIndex","Number","namespace","default","defineComponent","name","props","setup","slots","watch","val","assign","immediate","deep","config","provideGlobalConfig","renderSlot","value"],"sources":["../../../../../../packages/components/config-provider/src/config-provider.ts"],"sourcesContent":["import { defineComponent, renderSlot, watch } from 'vue'\nimport { buildProps, definePropType } from '@element-plus/utils'\nimport { provideGlobalConfig } from '@element-plus/hooks'\nimport type { Language } from '@element-plus/locale'\nimport type { ButtonConfigContext } from '@element-plus/components/button'\nimport type { MessageConfigContext } from '@element-plus/components/message'\n\nexport const messageConfig: MessageConfigContext = {}\n\nexport const configProviderProps = buildProps({\n  locale: {\n    type: definePropType<Language>(Object),\n  },\n\n  size: {\n    type: String,\n    values: ['large', 'default', 'small'],\n  },\n\n  button: {\n    type: definePropType<ButtonConfigContext>(Object),\n  },\n\n  message: {\n    type: definePropType<MessageConfigContext>(Object),\n  },\n\n  zIndex: {\n    type: Number,\n  },\n\n  namespace: {\n    type: String,\n    default: 'el',\n  },\n} as const)\n\nexport default defineComponent({\n  name: 'ElConfigProvider',\n  props: configProviderProps,\n\n  setup(props, { slots }) {\n    watch(\n      () => props.message,\n      (val) => {\n        Object.assign(messageConfig, val ?? {})\n      },\n      { immediate: true, deep: true }\n    )\n    const config = provideGlobalConfig(props)\n    return () => renderSlot(slots, 'default', { config: config?.value })\n  },\n})\n"]},"metadata":{},"sourceType":"module"}