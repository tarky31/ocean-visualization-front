{"ast":null,"code":"import \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.object.keys.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport '../../../utils/index.mjs';\nimport { hasOwn } from '@vue/shared';\n\nfunction getError(action, option, xhr) {\n  var msg;\n\n  if (xhr.response) {\n    msg = \"\".concat(xhr.response.error || xhr.response);\n  } else if (xhr.responseText) {\n    msg = \"\".concat(xhr.responseText);\n  } else {\n    msg = \"fail to \".concat(option.method, \" \").concat(action, \" \").concat(xhr.status);\n  }\n\n  var err = new Error(msg);\n  err.status = xhr.status;\n  err.method = option.method;\n  err.url = action;\n  return err;\n}\n\nfunction getBody(xhr) {\n  var text = xhr.responseText || xhr.response;\n\n  if (!text) {\n    return text;\n  }\n\n  try {\n    return JSON.parse(text);\n  } catch (e) {\n    return text;\n  }\n}\n\nfunction upload(option) {\n  if (typeof XMLHttpRequest === \"undefined\") {\n    return;\n  }\n\n  var xhr = new XMLHttpRequest();\n  var action = option.action;\n\n  if (xhr.upload) {\n    xhr.upload.onprogress = function progress(e) {\n      if (e.total > 0) {\n        ;\n        e.percent = e.loaded / e.total * 100;\n      }\n\n      option.onProgress(e);\n    };\n  }\n\n  var formData = new FormData();\n\n  if (option.data) {\n    Object.keys(option.data).forEach(function (key) {\n      formData.append(key, option.data[key]);\n    });\n  }\n\n  formData.append(option.filename, option.file, option.file.name);\n\n  xhr.onerror = function error() {\n    option.onError(getError(action, option, xhr));\n  };\n\n  xhr.onload = function onload() {\n    if (xhr.status < 200 || xhr.status >= 300) {\n      return option.onError(getError(action, option, xhr));\n    }\n\n    option.onSuccess(getBody(xhr));\n  };\n\n  xhr.open(option.method, action, true);\n\n  if (option.withCredentials && \"withCredentials\" in xhr) {\n    xhr.withCredentials = true;\n  }\n\n  var headers = option.headers || {};\n\n  for (var item in headers) {\n    if (hasOwn(headers, item) && headers[item] !== null) {\n      xhr.setRequestHeader(item, headers[item]);\n    }\n  }\n\n  if (headers instanceof Headers) {\n    headers.forEach(function (value, key) {\n      xhr.setRequestHeader(key, value);\n    });\n  }\n\n  xhr.send(formData);\n  return xhr;\n}\n\nexport { upload as default };","map":{"version":3,"mappings":"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","names":["getError","action","option","xhr","msg","response","error","responseText","method","status","err","Error","url","getBody","text","JSON","parse","e","upload","XMLHttpRequest","onprogress","progress","total","percent","loaded","onProgress","formData","FormData","data","Object","keys","forEach","key","append","filename","file","name","onerror","onError","onload","onSuccess","open","withCredentials","headers","item","hasOwn","setRequestHeader","Headers","value","send"],"sources":["../../../../../../packages/components/upload/src/ajax.ts"],"sourcesContent":["import { hasOwn } from '@element-plus/utils'\nimport type {\n  ElUploadProgressEvent,\n  ElUploadRequestOptions,\n  ElUploadAjaxError,\n} from './upload.type'\n\nfunction getError(\n  action: string,\n  option: ElUploadRequestOptions,\n  xhr: XMLHttpRequest\n) {\n  let msg: string\n  if (xhr.response) {\n    msg = `${xhr.response.error || xhr.response}`\n  } else if (xhr.responseText) {\n    msg = `${xhr.responseText}`\n  } else {\n    msg = `fail to ${option.method} ${action} ${xhr.status}`\n  }\n\n  const err = new Error(msg) as ElUploadAjaxError\n  err.status = xhr.status\n  err.method = option.method\n  err.url = action\n  return err\n}\n\nfunction getBody(xhr: XMLHttpRequest): XMLHttpRequestResponseType {\n  const text = xhr.responseText || xhr.response\n  if (!text) {\n    return text\n  }\n\n  try {\n    return JSON.parse(text)\n  } catch (e) {\n    return text\n  }\n}\n\nexport default function upload(option: ElUploadRequestOptions) {\n  if (typeof XMLHttpRequest === 'undefined') {\n    return\n  }\n\n  const xhr = new XMLHttpRequest()\n  const action = option.action\n\n  if (xhr.upload) {\n    xhr.upload.onprogress = function progress(e) {\n      if (e.total > 0) {\n        ;(e as ElUploadProgressEvent).percent = (e.loaded / e.total) * 100\n      }\n      option.onProgress(e)\n    }\n  }\n\n  const formData = new FormData()\n\n  if (option.data) {\n    Object.keys(option.data).forEach((key) => {\n      formData.append(key, option.data[key])\n    })\n  }\n\n  formData.append(option.filename, option.file, option.file.name)\n\n  xhr.onerror = function error() {\n    option.onError(getError(action, option, xhr))\n  }\n\n  xhr.onload = function onload() {\n    if (xhr.status < 200 || xhr.status >= 300) {\n      return option.onError(getError(action, option, xhr))\n    }\n\n    option.onSuccess(getBody(xhr))\n  }\n\n  xhr.open(option.method, action, true)\n\n  if (option.withCredentials && 'withCredentials' in xhr) {\n    xhr.withCredentials = true\n  }\n\n  const headers = option.headers || {}\n\n  for (const item in headers) {\n    if (hasOwn(headers, item) && headers[item] !== null) {\n      xhr.setRequestHeader(item, headers[item])\n    }\n  }\n\n  if (headers instanceof Headers) {\n    headers.forEach((value, key) => {\n      xhr.setRequestHeader(key, value)\n    })\n  }\n\n  xhr.send(formData)\n  return xhr\n}\n"]},"metadata":{},"sourceType":"module"}