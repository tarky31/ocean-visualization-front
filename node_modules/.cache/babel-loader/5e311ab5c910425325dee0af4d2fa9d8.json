{"ast":null,"code":"import _objectSpread from \"D:/MyFile/WebCode/ocean-vis/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport { defineComponent, nextTick, computed, provide, toRefs, watch, h, renderSlot } from 'vue';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { useCheckboxGroup } from './useCheckbox.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElCheckboxGroup\",\n  props: {\n    modelValue: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    disabled: Boolean,\n    min: {\n      type: Number,\n      default: void 0\n    },\n    max: {\n      type: Number,\n      default: void 0\n    },\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    fill: {\n      type: String,\n      default: void 0\n    },\n    textColor: {\n      type: String,\n      default: void 0\n    },\n    tag: {\n      type: String,\n      default: \"div\"\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, \"change\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n\n    var _useCheckboxGroup = useCheckboxGroup(),\n        elFormItem = _useCheckboxGroup.elFormItem;\n\n    var checkboxGroupSize = useSize();\n    var ns = useNamespace(\"checkbox\");\n\n    var changeEvent = function changeEvent(value) {\n      emit(UPDATE_MODEL_EVENT, value);\n      nextTick(function () {\n        emit(\"change\", value);\n      });\n    };\n\n    var modelValue = computed({\n      get: function get() {\n        return props.modelValue;\n      },\n      set: function set(val) {\n        changeEvent(val);\n      }\n    });\n    provide(\"CheckboxGroup\", _objectSpread(_objectSpread({\n      name: \"ElCheckboxGroup\",\n      modelValue: modelValue\n    }, toRefs(props)), {}, {\n      checkboxGroupSize: checkboxGroupSize,\n      changeEvent: changeEvent\n    }));\n    watch(function () {\n      return props.modelValue;\n    }, function () {\n      var _a;\n\n      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\");\n    });\n    return function () {\n      return h(props.tag, {\n        class: ns.b(\"group\"),\n        role: \"group\",\n        \"aria-label\": \"checkbox-group\"\n      }, [renderSlot(slots, \"default\")]);\n    };\n  }\n});\n\nexport { _sfc_main as default };","map":{"version":3,"mappings":";;;;;;;;;;;;IAmBKA,YAAaC,gBAAa;AAC7BC,QAAM,iBADuB;AAG7BC,SAAO;AACLC,gBAAY;AACVC,YAAMC,KADI;AAEVC,eAAS;AAAA,eAAM,EAAN;AAAA;AAFC,KADP;AAKLC,cAAUC,OALL;AAMLC,SAAK;AACHL,YAAMM,MADH;AAEHJ,eAAS;AAFN,KANA;AAULK,SAAK;AACHP,YAAMM,MADH;AAEHJ,eAAS;AAFN,KAVA;AAcLM,UAAM;AACJR,YAAMS,MADF;AAEJC,iBAAWC;AAFP,KAdD;AAkBLC,UAAM;AACJZ,YAAMS,MADF;AAEJP,eAAS;AAFL,KAlBD;AAsBLW,eAAW;AACTb,YAAMS,MADG;AAETP,eAAS;AAFA,KAtBN;AA0BLY,SAAK;AACHd,YAAMS,MADH;AAEHP,eAAS;AAFN;AA1BA,GAHsB;AAmC7Ba,SAAO,CAACC,kBAAD,EAAqB,QAArB,CAnCsB;AAqC7BC,OArC6B,iBAqCvBnB,KArCuB,QAqCC;AAAA,QAAfoB,IAAe,QAAfA,IAAe;AAAA,QAATC,KAAS,QAATA,KAAS;;AAC5B,4BAAuBC,kBAAvB;AAAA,QAAQC,UAAR,qBAAQA,UAAR;;AACA,QAAMC,oBAAoBC,SAA1B;AACA,QAAMC,KAAKC,aAAa,UAAb,CAAX;;AAEA,QAAMC,cAAc,SAAdA,WAAc,CAACC,KAAD,EAAW;AAC7BT,WAAKF,kBAAL,EAAyBW,KAAzB;AACAC,eAAS,YAAM;AACbV,aAAK,QAAL,EAAeS,KAAf;AAAe,OADjB;AACiB,KAHnB;;AAOA,QAAM5B,aAAa8B,SAAS;AAC1BC,SAD0B,iBACpB;AACJ,eAAOhC,MAAMC,UAAb;AAAa,OAFW;AAI1BgC,SAJ0B,eAItBC,GAJsB,EAIjB;AACPN,oBAAYM,GAAZ;AAAY;AALY,KAAT,CAAnB;AASAC,YAAQ,eAAR;AACEpC,YAAM,iBADR;AAEEE;AAFF,OAGKmC,OAAOpC,KAAP,CAHL;AAIEwB,0CAJF;AAKEI;AALF;AAQAS,UACE;AAAA,aAAMrC,MAAMC,UAAZ;AAAA,KADF,EAEE,YAAM;AACJ;;AAAsB;AAG1B,KANA;AAOE;AAEE,eACSD,KAAK,IADd,EACc;AACZsC,4BADY;AAEZC,qBAFY;AAEE;AAFF,OADd,EAKmB,8BALnB;AAKmB,KAPrB;AAOqB;AAhFI,CAAb","names":["_sfc_main","defineComponent","name","props","modelValue","type","Array","default","disabled","Boolean","min","Number","max","size","String","validator","isValidComponentSize","fill","textColor","tag","emits","UPDATE_MODEL_EVENT","setup","emit","slots","useCheckboxGroup","elFormItem","checkboxGroupSize","useSize","ns","useNamespace","changeEvent","value","nextTick","computed","get","set","val","provide","toRefs","watch","class","role"],"sources":["../../../../../../packages/components/checkbox/src/checkbox-group.vue"],"sourcesContent":["<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  watch,\n  provide,\n  nextTick,\n  toRefs,\n  h,\n  renderSlot,\n} from 'vue'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { isValidComponentSize } from '@element-plus/utils'\nimport { useSize, useNamespace } from '@element-plus/hooks'\nimport { useCheckboxGroup } from './useCheckbox'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\n\nexport default defineComponent({\n  name: 'ElCheckboxGroup',\n\n  props: {\n    modelValue: {\n      type: Array,\n      default: () => [],\n    },\n    disabled: Boolean,\n    min: {\n      type: Number,\n      default: undefined,\n    },\n    max: {\n      type: Number,\n      default: undefined,\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    fill: {\n      type: String,\n      default: undefined,\n    },\n    textColor: {\n      type: String,\n      default: undefined,\n    },\n    tag: {\n      type: String,\n      default: 'div',\n    },\n  },\n\n  emits: [UPDATE_MODEL_EVENT, 'change'],\n\n  setup(props, { emit, slots }) {\n    const { elFormItem } = useCheckboxGroup()\n    const checkboxGroupSize = useSize()\n    const ns = useNamespace('checkbox')\n\n    const changeEvent = (value) => {\n      emit(UPDATE_MODEL_EVENT, value)\n      nextTick(() => {\n        emit('change', value)\n      })\n    }\n\n    const modelValue = computed({\n      get() {\n        return props.modelValue\n      },\n      set(val) {\n        changeEvent(val)\n      },\n    })\n\n    provide('CheckboxGroup', {\n      name: 'ElCheckboxGroup',\n      modelValue,\n      ...toRefs(props),\n      checkboxGroupSize,\n      changeEvent,\n    })\n\n    watch(\n      () => props.modelValue,\n      () => {\n        elFormItem.validate?.('change')\n      }\n    )\n    return () => {\n      return h(\n        props.tag,\n        {\n          class: ns.b('group'),\n          role: 'group',\n          'aria-label': 'checkbox-group',\n        },\n        [renderSlot(slots, 'default')]\n      )\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}