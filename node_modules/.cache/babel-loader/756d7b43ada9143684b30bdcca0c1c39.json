{"ast":null,"code":"import _defineProperty from \"D:/MyFile/WebCode/ocean-vis/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport _objectSpread from \"D:/MyFile/WebCode/ocean-vis/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.from.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.find.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { defineComponent, getCurrentInstance, ref, shallowRef, computed, nextTick, watch, onMounted, onUpdated, resolveComponent, withDirectives, openBlock, createElementBlock, normalizeClass, normalizeStyle, createCommentVNode, Fragment, renderSlot, createElementVNode, mergeProps, createBlock, withCtx, resolveDynamicComponent, withModifiers, createVNode, toDisplayString, vShow } from 'vue';\nimport { isClient } from '@vueuse/core';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { CircleClose, View } from '@element-plus/icons-vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../constants/index.mjs';\nimport { calcTextareaHeight } from './calc-textarea-height.mjs';\nimport { inputProps, inputEmits } from './input.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useAttrs } from '../../../hooks/use-attrs/index.mjs';\nimport { useFormItem } from '../../../hooks/use-form-item/index.mjs';\nimport { useSize, useDisabled } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { ValidateComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { isObject } from '@vue/shared';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { isKorean } from '../../../utils/i18n.mjs';\nvar PENDANT_MAP = {\n  suffix: \"append\",\n  prefix: \"prepend\"\n};\n\nvar _sfc_main = defineComponent({\n  name: \"ElInput\",\n  components: {\n    ElIcon: ElIcon,\n    CircleClose: CircleClose,\n    IconView: View\n  },\n  inheritAttrs: false,\n  props: inputProps,\n  emits: inputEmits,\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots,\n        emit = _ref.emit,\n        rawAttrs = _ref.attrs;\n    var instance = getCurrentInstance();\n    var attrs = useAttrs();\n\n    var _useFormItem = useFormItem(),\n        form = _useFormItem.form,\n        formItem = _useFormItem.formItem;\n\n    var inputSize = useSize();\n    var inputDisabled = useDisabled();\n    var nsInput = useNamespace(\"input\");\n    var nsTextarea = useNamespace(\"textarea\");\n    var input = ref();\n    var textarea = ref();\n    var focused = ref(false);\n    var hovering = ref(false);\n    var isComposing = ref(false);\n    var passwordVisible = ref(false);\n\n    var _textareaCalcStyle = shallowRef(props.inputStyle);\n\n    var inputOrTextarea = computed(function () {\n      return input.value || textarea.value;\n    });\n    var needStatusIcon = computed(function () {\n      var _a;\n\n      return (_a = form == null ? void 0 : form.statusIcon) != null ? _a : false;\n    });\n    var validateState = computed(function () {\n      return (formItem == null ? void 0 : formItem.validateState) || \"\";\n    });\n    var validateIcon = computed(function () {\n      return ValidateComponentsMap[validateState.value];\n    });\n    var containerStyle = computed(function () {\n      return rawAttrs.style;\n    });\n    var computedTextareaStyle = computed(function () {\n      return [props.inputStyle, _textareaCalcStyle.value, {\n        resize: props.resize\n      }];\n    });\n    var nativeInputValue = computed(function () {\n      return props.modelValue === null || props.modelValue === void 0 ? \"\" : String(props.modelValue);\n    });\n    var showClear = computed(function () {\n      return props.clearable && !inputDisabled.value && !props.readonly && !!nativeInputValue.value && (focused.value || hovering.value);\n    });\n    var showPwdVisible = computed(function () {\n      return props.showPassword && !inputDisabled.value && !props.readonly && (!!nativeInputValue.value || focused.value);\n    });\n    var isWordLimitVisible = computed(function () {\n      return props.showWordLimit && !!attrs.value.maxlength && (props.type === \"text\" || props.type === \"textarea\") && !inputDisabled.value && !props.readonly && !props.showPassword;\n    });\n    var textLength = computed(function () {\n      return Array.from(nativeInputValue.value).length;\n    });\n    var inputExceed = computed(function () {\n      return !!isWordLimitVisible.value && textLength.value > Number(attrs.value.maxlength);\n    });\n\n    var resizeTextarea = function resizeTextarea() {\n      var type = props.type,\n          autosize = props.autosize;\n      if (!isClient || type !== \"textarea\") return;\n\n      if (autosize) {\n        var minRows = isObject(autosize) ? autosize.minRows : void 0;\n        var maxRows = isObject(autosize) ? autosize.maxRows : void 0;\n        _textareaCalcStyle.value = _objectSpread({}, calcTextareaHeight(textarea.value, minRows, maxRows));\n      } else {\n        _textareaCalcStyle.value = {\n          minHeight: calcTextareaHeight(textarea.value).minHeight\n        };\n      }\n    };\n\n    var setNativeInputValue = function setNativeInputValue() {\n      var input2 = inputOrTextarea.value;\n      if (!input2 || input2.value === nativeInputValue.value) return;\n      input2.value = nativeInputValue.value;\n    };\n\n    var calcIconOffset = function calcIconOffset(place) {\n      var el = instance.vnode.el;\n      if (!el) return;\n      var elList = Array.from(el.querySelectorAll(\".\".concat(nsInput.e(place))));\n      var target = elList.find(function (item) {\n        return item.parentNode === el;\n      });\n      if (!target) return;\n      var pendant = PENDANT_MAP[place];\n\n      if (slots[pendant]) {\n        target.style.transform = \"translateX(\".concat(place === \"suffix\" ? \"-\" : \"\").concat(el.querySelector(\".\".concat(nsInput.be(\"group\", pendant))).offsetWidth, \"px)\");\n      } else {\n        target.removeAttribute(\"style\");\n      }\n    };\n\n    var updateIconOffset = function updateIconOffset() {\n      calcIconOffset(\"prefix\");\n      calcIconOffset(\"suffix\");\n    };\n\n    var handleInput = function handleInput(event) {\n      var value = event.target.value;\n      if (isComposing.value) return;\n      if (value === nativeInputValue.value) return;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"input\", value);\n      nextTick(setNativeInputValue);\n    };\n\n    var handleChange = function handleChange(event) {\n      emit(\"change\", event.target.value);\n    };\n\n    var focus = function focus() {\n      nextTick(function () {\n        var _a;\n\n        (_a = inputOrTextarea.value) == null ? void 0 : _a.focus();\n      });\n    };\n\n    var blur = function blur() {\n      var _a;\n\n      (_a = inputOrTextarea.value) == null ? void 0 : _a.blur();\n    };\n\n    var handleFocus = function handleFocus(event) {\n      focused.value = true;\n      emit(\"focus\", event);\n    };\n\n    var handleBlur = function handleBlur(event) {\n      var _a;\n\n      focused.value = false;\n      emit(\"blur\", event);\n\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"blur\");\n      }\n    };\n\n    var select = function select() {\n      var _a;\n\n      (_a = inputOrTextarea.value) == null ? void 0 : _a.select();\n    };\n\n    var handleCompositionStart = function handleCompositionStart(event) {\n      emit(\"compositionstart\", event);\n      isComposing.value = true;\n    };\n\n    var handleCompositionUpdate = function handleCompositionUpdate(event) {\n      var _a;\n\n      emit(\"compositionupdate\", event);\n      var text = (_a = event.target) == null ? void 0 : _a.value;\n      var lastCharacter = text[text.length - 1] || \"\";\n      isComposing.value = !isKorean(lastCharacter);\n    };\n\n    var handleCompositionEnd = function handleCompositionEnd(event) {\n      emit(\"compositionend\", event);\n\n      if (isComposing.value) {\n        isComposing.value = false;\n        handleInput(event);\n      }\n    };\n\n    var clear = function clear() {\n      emit(UPDATE_MODEL_EVENT, \"\");\n      emit(\"change\", \"\");\n      emit(\"clear\");\n      emit(\"input\", \"\");\n    };\n\n    var handlePasswordVisible = function handlePasswordVisible() {\n      passwordVisible.value = !passwordVisible.value;\n      focus();\n    };\n\n    var suffixVisible = computed(function () {\n      return !!slots.suffix || !!props.suffixIcon || showClear.value || props.showPassword || isWordLimitVisible.value || !!validateState.value && needStatusIcon.value;\n    });\n    watch(function () {\n      return props.modelValue;\n    }, function () {\n      var _a;\n\n      nextTick(resizeTextarea);\n\n      if (props.validateEvent) {\n        (_a = formItem == null ? void 0 : formItem.validate) == null ? void 0 : _a.call(formItem, \"change\");\n      }\n    });\n    watch(nativeInputValue, function () {\n      return setNativeInputValue();\n    });\n    watch(function () {\n      return props.type;\n    }, function () {\n      nextTick(function () {\n        setNativeInputValue();\n        resizeTextarea();\n        updateIconOffset();\n      });\n    });\n    onMounted(function () {\n      setNativeInputValue();\n      updateIconOffset();\n      nextTick(resizeTextarea);\n    });\n    onUpdated(function () {\n      nextTick(updateIconOffset);\n    });\n\n    var onMouseLeave = function onMouseLeave(evt) {\n      hovering.value = false;\n      emit(\"mouseleave\", evt);\n    };\n\n    var onMouseEnter = function onMouseEnter(evt) {\n      hovering.value = true;\n      emit(\"mouseenter\", evt);\n    };\n\n    var handleKeydown = function handleKeydown(evt) {\n      emit(\"keydown\", evt);\n    };\n\n    return {\n      input: input,\n      textarea: textarea,\n      attrs: attrs,\n      inputSize: inputSize,\n      validateState: validateState,\n      validateIcon: validateIcon,\n      containerStyle: containerStyle,\n      computedTextareaStyle: computedTextareaStyle,\n      inputDisabled: inputDisabled,\n      showClear: showClear,\n      showPwdVisible: showPwdVisible,\n      isWordLimitVisible: isWordLimitVisible,\n      textLength: textLength,\n      hovering: hovering,\n      inputExceed: inputExceed,\n      passwordVisible: passwordVisible,\n      inputOrTextarea: inputOrTextarea,\n      suffixVisible: suffixVisible,\n      needStatusIcon: needStatusIcon,\n      resizeTextarea: resizeTextarea,\n      handleInput: handleInput,\n      handleChange: handleChange,\n      handleFocus: handleFocus,\n      handleBlur: handleBlur,\n      handleCompositionStart: handleCompositionStart,\n      handleCompositionUpdate: handleCompositionUpdate,\n      handleCompositionEnd: handleCompositionEnd,\n      handlePasswordVisible: handlePasswordVisible,\n      clear: clear,\n      select: select,\n      focus: focus,\n      blur: blur,\n      onMouseLeave: onMouseLeave,\n      onMouseEnter: onMouseEnter,\n      handleKeydown: handleKeydown,\n      nsInput: nsInput,\n      nsTextarea: nsTextarea\n    };\n  }\n});\n\nvar _hoisted_1 = [\"type\", \"disabled\", \"readonly\", \"autocomplete\", \"tabindex\", \"aria-label\", \"placeholder\"];\nvar _hoisted_2 = [\"tabindex\", \"disabled\", \"readonly\", \"autocomplete\", \"aria-label\", \"placeholder\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _ref2;\n\n  var _component_el_icon = resolveComponent(\"el-icon\");\n\n  var _component_circle_close = resolveComponent(\"circle-close\");\n\n  var _component_icon_view = resolveComponent(\"icon-view\");\n\n  return withDirectives((openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.type === \"textarea\" ? _ctx.nsTextarea.b() : _ctx.nsInput.b(), _ctx.nsInput.m(_ctx.inputSize), _ctx.nsInput.is(\"disabled\", _ctx.inputDisabled), _ctx.nsInput.is(\"exceed\", _ctx.inputExceed), (_ref2 = {}, _defineProperty(_ref2, _ctx.nsInput.b(\"group\"), _ctx.$slots.prepend || _ctx.$slots.append), _defineProperty(_ref2, _ctx.nsInput.bm(\"group\", \"append\"), _ctx.$slots.append), _defineProperty(_ref2, _ctx.nsInput.bm(\"group\", \"prepend\"), _ctx.$slots.prepend), _defineProperty(_ref2, _ctx.nsInput.m(\"prefix\"), _ctx.$slots.prefix || _ctx.prefixIcon), _defineProperty(_ref2, _ctx.nsInput.m(\"suffix\"), _ctx.$slots.suffix || _ctx.suffixIcon || _ctx.clearable || _ctx.showPassword), _defineProperty(_ref2, _ctx.nsInput.m(\"suffix--password-clear\"), _ctx.showClear && _ctx.showPwdVisible), _ref2), _ctx.$attrs.class]),\n    style: normalizeStyle(_ctx.containerStyle),\n    onMouseenter: _cache[17] || (_cache[17] = function () {\n      return _ctx.onMouseEnter && _ctx.onMouseEnter.apply(_ctx, arguments);\n    }),\n    onMouseleave: _cache[18] || (_cache[18] = function () {\n      return _ctx.onMouseLeave && _ctx.onMouseLeave.apply(_ctx, arguments);\n    })\n  }, [createCommentVNode(\" input \"), _ctx.type !== \"textarea\" ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [createCommentVNode(\" prepend slot \"), _ctx.$slots.prepend ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.nsInput.be(\"group\", \"prepend\"))\n  }, [renderSlot(_ctx.$slots, \"prepend\")], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"input\", mergeProps({\n    ref: \"input\",\n    class: _ctx.nsInput.e(\"inner\")\n  }, _ctx.attrs, {\n    type: _ctx.showPassword ? _ctx.passwordVisible ? \"text\" : \"password\" : _ctx.type,\n    disabled: _ctx.inputDisabled,\n    readonly: _ctx.readonly,\n    autocomplete: _ctx.autocomplete,\n    tabindex: _ctx.tabindex,\n    \"aria-label\": _ctx.label,\n    placeholder: _ctx.placeholder,\n    style: _ctx.inputStyle,\n    onCompositionstart: _cache[0] || (_cache[0] = function () {\n      return _ctx.handleCompositionStart && _ctx.handleCompositionStart.apply(_ctx, arguments);\n    }),\n    onCompositionupdate: _cache[1] || (_cache[1] = function () {\n      return _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate.apply(_ctx, arguments);\n    }),\n    onCompositionend: _cache[2] || (_cache[2] = function () {\n      return _ctx.handleCompositionEnd && _ctx.handleCompositionEnd.apply(_ctx, arguments);\n    }),\n    onInput: _cache[3] || (_cache[3] = function () {\n      return _ctx.handleInput && _ctx.handleInput.apply(_ctx, arguments);\n    }),\n    onFocus: _cache[4] || (_cache[4] = function () {\n      return _ctx.handleFocus && _ctx.handleFocus.apply(_ctx, arguments);\n    }),\n    onBlur: _cache[5] || (_cache[5] = function () {\n      return _ctx.handleBlur && _ctx.handleBlur.apply(_ctx, arguments);\n    }),\n    onChange: _cache[6] || (_cache[6] = function () {\n      return _ctx.handleChange && _ctx.handleChange.apply(_ctx, arguments);\n    }),\n    onKeydown: _cache[7] || (_cache[7] = function () {\n      return _ctx.handleKeydown && _ctx.handleKeydown.apply(_ctx, arguments);\n    })\n  }), null, 16, _hoisted_1), createCommentVNode(\" prefix slot \"), _ctx.$slots.prefix || _ctx.prefixIcon ? (openBlock(), createElementBlock(\"span\", {\n    key: 1,\n    class: normalizeClass(_ctx.nsInput.e(\"prefix\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.nsInput.e(\"prefix-inner\"))\n  }, [renderSlot(_ctx.$slots, \"prefix\"), _ctx.prefixIcon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass(_ctx.nsInput.e(\"icon\"))\n  }, {\n    default: withCtx(function () {\n      return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.prefixIcon)))];\n    }),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 2)], 2)) : createCommentVNode(\"v-if\", true), createCommentVNode(\" suffix slot \"), _ctx.suffixVisible ? (openBlock(), createElementBlock(\"span\", {\n    key: 2,\n    class: normalizeClass(_ctx.nsInput.e(\"suffix\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.nsInput.e(\"suffix-inner\"))\n  }, [!_ctx.showClear || !_ctx.showPwdVisible || !_ctx.isWordLimitVisible ? (openBlock(), createElementBlock(Fragment, {\n    key: 0\n  }, [renderSlot(_ctx.$slots, \"suffix\"), _ctx.suffixIcon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass(_ctx.nsInput.e(\"icon\"))\n  }, {\n    default: withCtx(function () {\n      return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.suffixIcon)))];\n    }),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 64)) : createCommentVNode(\"v-if\", true), _ctx.showClear ? (openBlock(), createBlock(_component_el_icon, {\n    key: 1,\n    class: normalizeClass([_ctx.nsInput.e(\"icon\"), _ctx.nsInput.e(\"clear\")]),\n    onMousedown: _cache[8] || (_cache[8] = withModifiers(function () {}, [\"prevent\"])),\n    onClick: _ctx.clear\n  }, {\n    default: withCtx(function () {\n      return [createVNode(_component_circle_close)];\n    }),\n    _: 1\n  }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.showPwdVisible ? (openBlock(), createBlock(_component_el_icon, {\n    key: 2,\n    class: normalizeClass([_ctx.nsInput.e(\"icon\"), _ctx.nsInput.e(\"clear\")]),\n    onClick: _ctx.handlePasswordVisible\n  }, {\n    default: withCtx(function () {\n      return [createVNode(_component_icon_view)];\n    }),\n    _: 1\n  }, 8, [\"class\", \"onClick\"])) : createCommentVNode(\"v-if\", true), _ctx.isWordLimitVisible ? (openBlock(), createElementBlock(\"span\", {\n    key: 3,\n    class: normalizeClass(_ctx.nsInput.e(\"count\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.nsInput.e(\"count-inner\"))\n  }, toDisplayString(_ctx.textLength) + \" / \" + toDisplayString(_ctx.attrs.maxlength), 3)], 2)) : createCommentVNode(\"v-if\", true)], 2), _ctx.validateState && _ctx.validateIcon && _ctx.needStatusIcon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass([_ctx.nsInput.e(\"icon\"), _ctx.nsInput.e(\"validateIcon\")])\n  }, {\n    default: withCtx(function () {\n      return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.validateIcon)))];\n    }),\n    _: 1\n  }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 2)) : createCommentVNode(\"v-if\", true), createCommentVNode(\" append slot \"), _ctx.$slots.append ? (openBlock(), createElementBlock(\"div\", {\n    key: 3,\n    class: normalizeClass(_ctx.nsInput.be(\"group\", \"append\"))\n  }, [renderSlot(_ctx.$slots, \"append\")], 2)) : createCommentVNode(\"v-if\", true)], 64)) : (openBlock(), createElementBlock(Fragment, {\n    key: 1\n  }, [createCommentVNode(\" textarea \"), createElementVNode(\"textarea\", mergeProps({\n    ref: \"textarea\",\n    class: _ctx.nsTextarea.e(\"inner\")\n  }, _ctx.attrs, {\n    tabindex: _ctx.tabindex,\n    disabled: _ctx.inputDisabled,\n    readonly: _ctx.readonly,\n    autocomplete: _ctx.autocomplete,\n    style: _ctx.computedTextareaStyle,\n    \"aria-label\": _ctx.label,\n    placeholder: _ctx.placeholder,\n    onCompositionstart: _cache[9] || (_cache[9] = function () {\n      return _ctx.handleCompositionStart && _ctx.handleCompositionStart.apply(_ctx, arguments);\n    }),\n    onCompositionupdate: _cache[10] || (_cache[10] = function () {\n      return _ctx.handleCompositionUpdate && _ctx.handleCompositionUpdate.apply(_ctx, arguments);\n    }),\n    onCompositionend: _cache[11] || (_cache[11] = function () {\n      return _ctx.handleCompositionEnd && _ctx.handleCompositionEnd.apply(_ctx, arguments);\n    }),\n    onInput: _cache[12] || (_cache[12] = function () {\n      return _ctx.handleInput && _ctx.handleInput.apply(_ctx, arguments);\n    }),\n    onFocus: _cache[13] || (_cache[13] = function () {\n      return _ctx.handleFocus && _ctx.handleFocus.apply(_ctx, arguments);\n    }),\n    onBlur: _cache[14] || (_cache[14] = function () {\n      return _ctx.handleBlur && _ctx.handleBlur.apply(_ctx, arguments);\n    }),\n    onChange: _cache[15] || (_cache[15] = function () {\n      return _ctx.handleChange && _ctx.handleChange.apply(_ctx, arguments);\n    }),\n    onKeydown: _cache[16] || (_cache[16] = function () {\n      return _ctx.handleKeydown && _ctx.handleKeydown.apply(_ctx, arguments);\n    })\n  }), null, 16, _hoisted_2), _ctx.isWordLimitVisible ? (openBlock(), createElementBlock(\"span\", {\n    key: 0,\n    class: normalizeClass(_ctx.nsInput.e(\"count\"))\n  }, toDisplayString(_ctx.textLength) + \" / \" + toDisplayString(_ctx.attrs.maxlength), 3)) : createCommentVNode(\"v-if\", true)], 64))], 38)), [[vShow, _ctx.type !== \"hidden\"]]);\n}\n\nvar Input = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Input as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAsKA,IAAMA,cAAc;AAClBC,UAAQ,QADU;AAElBC,UAAQ;AAFU,CAApB;;AAKA,IAAKC,YAAaC,gBAAa;AAC7BC,QAAM,SADuB;AAG7BC,cAAY;AAAEC,kBAAF;AAAUC,4BAAV;AAAUC,cAAaA;AAAvB,GAHiB;AAK7BC,gBAAc,KALe;AAO7BC,SAAOC,UAPsB;AAQ7BC,SAAOC,UARsB;AAU7BC,OAV6B,iBAUvBJ,KAVuB,QAUkB;AAAA,QAAhCK,KAAgC,QAAhCA,KAAgC;AAAA,QAAzBC,IAAyB,QAAzBA,IAAyB;AAAA,QAAZC,QAAY,QAAnBC,KAAmB;AAC7C,QAAMC,WAAWC,oBAAjB;AACA,QAAMF,QAAQG,UAAd;;AAEA,uBAA2BC,aAA3B;AAAA,QAAQC,IAAR,gBAAQA,IAAR;AAAA,QAAcC,QAAd,gBAAcA,QAAd;;AACA,QAAMC,YAAYC,SAAlB;AACA,QAAMC,gBAAgBC,aAAtB;AACA,QAAMC,UAAUC,aAAa,OAAb,CAAhB;AACA,QAAMC,aAAaD,aAAa,UAAb,CAAnB;AAEA,QAAME,QAAQC,KAAd;AACA,QAAMC,WAAWD,KAAjB;AACA,QAAME,UAAUF,IAAI,KAAJ,CAAhB;AACA,QAAMG,WAAWH,IAAI,KAAJ,CAAjB;AACA,QAAMI,cAAcJ,IAAI,KAAJ,CAApB;AACA,QAAMK,kBAAkBL,IAAI,KAAJ,CAAxB;;AACA,QAAMM,qBAAqBC,WAAW9B,MAAM+B,UAAjB,CAA3B;;AAEA,QAAMC,kBAAkBC,SAAS;AAAA,aAAMX,MAAMY,KAAN,IAAeV,SAASU,KAA9B;AAAA,KAAT,CAAxB;AAEA,QAAMC,iBAAiBF,SAAS,YAAM;AACtC,UAAMG,EAAN;;AACA,kCACE,MADF,GACQvB,eADR,KACQ,IADR,GACQuB,EADR,GACQ,KADR;AAGA,KALuB,CAAvB;AAMA,QAAMC,wBAAwB;AAAA;AAAA,MAA9B;AAAyD;AAAA;AAAA;AACjD;AAAA;AAAA;AACa;AAAA,cACHrC,gBADG,EAGrB6B,wBAHqB,EAQrB;AAAAS,sBAAkBA;AAAlB,OARqB;AAAA;AAuBrB,QAAMC;AAAA,0CAGFvC,2BAHE,GAIK,EAJL,GAIKwC,wBAJL;AAAA,MAAN;AASA,QAAMC;AAAA;AAAA,MAAN;AACA,QAAMC,cAAc;AAAA,mCAGK,oBAHL,IAIG,OAAOC,QAJV,KAIU,yCAJV;AAAA,MAApB;AAOA,QAAMC;AAAA;AAAA,MAAN;AACE,kBAAc;AAAA;AAAA,MAAd;AAEA,QAAIC,sBAAsB;AAAA;AAAA,MAA1B;;AAAsC;AAEtC,iBAAc7C,KAAd;AAAA,UAAc8C,QAAd,GAAc9C,KAAd,CAAc8C,QAAd;AACE,4CACA;;AACA;AAA2B,8BACH,UADG,GACMA,gBADN,GACM,MADN;AACuB;AAAAjB,qDAGlDkB,oDAHkD;AAID,OALjD,MAKiD;AAAAlB;AAAAmB;AAAA;AAMnD;AACA,KAjBsC;;AAiBgB;AACtD,mBAAchB,qBAAd;AAA+B,8DAGjC;AACEiB,YAAM,MAAN,GAAeV,sBAAf;AACA,KANsD;;AAM7C;AACT,UAAMW,EAAN,GAAkCzC,cAAlC,CAAMyC,EAAN;AAGA,eAEA;AAAa;AAEb,UAAMC,+BAAsBC,IAAtB;AAAA,eAAsBA,sBAAtB;AAAA,QAAN;AAEA,UAAI,OAAJ,EACE;AACuD;;AAGvD,eAAO,SAAP,EAAO;AAAgBD;AAAA,OAAvB,MAAuB;AAI3BA;AACE;AACA,KArBS;;AAqBM;AAGjBE;AACEA;AAIA,KARe;;AAQQ;AAIvB;AAAsC,6BAEtC;AACA,oBAAcd,sBAAd,EAIA;AAASjC;AAGXA,UAAM,gBAAN;AACEgD;AAA+C,KAfxB;;AAkBzB,QAAMC;AAEJjD,qBAAekD,kBAAf;AACE,KAHJ;;AAG2B;AAAAF;AAI3B;;AACE,6BAAuB,MAAvB,KAAuB,IAAvB,GAAuB,MAAvB,GAAuBlB,UAAvB;AAAuB,OALE;AAQ3B,KAR2B;;AASzB,YAAQ,YAARqB,IAAQ;AACR;;AAAc;AAGhB,KAJE;;AAKA;AACAhC,sBAAa,IAAb;AACAnB,UAAI,gBAAJ;AACE,KAHF;;AAGuB;AAAA;;AAIzBmB,sBAAe,KAAf;AACEnB;;AAAuB;AAGzB;AACE;AACA,KAVuB;;AAUH;AAGtB,UAAM8B,EAAN;;AACE;AACA,KALoB;;AAMpB;AACA9B;AAA8BqB;AAGhC,KAJE;;AAKA;AACA,UAAIS,EAAJ;;AACE9B;AACA,kBAAY8B,iBAAZ,KAAY,IAAZ,GAAY,MAAZ,GAAYA,QAAZ;AAAY;AAAAT;AAIhB,KAPE;;AAQA;AACArB,WAAK,gBAAL,EAAKkD,KAAL;;AACA;AACA7B,oBAAcO,KAAd,GAAc,KAAd;AAAcwB;AAGhB;AACE,KAPA;;AAQA;AAAApD;AAGFA,UAAM,cAAN;AAUAA,UACE,SADF;AAGIA;AACA,KAjBF;;AAkBI;AAAqBsB;AAAA+B;AAQ3B,KARM;;AAaN,QACEC,wBACM;AAAA;AAAA,MAFR;AAGIC;AAAA,kBAAe,WAAf;AAAA,OAAe;AACb;;AACAP;;AACA;AAAA;AAAA;AAKN,KARI;AASFO;AAAA;AAAA;AACAA;AAAA;AAAA;AACAP,eAAS;AAAAQ;AAGXC;AACEC;AAAS,OAJT;AAOF,KARE;AASAC;AACAH,yBAAmB;AAAAE;AAGrBV;AACE,KALA;AAMAY;AAAmBZ;AAGrB,KAHE;;AAIA,oBAAgB,YAAhBa,YAAgB;AAAAzC;AAGlBpB,WAAO,YAAP,EAAO8D,GAAP;AAAO,KAHL;;AAIA;AAEA1C;AACApB;AAAA,KAHA;;AAIA;AAEAA;AAAA,KAFA;;AAGA;AAEAgB,kBAFA;AAGAE,wBAHA;AAIAhB,kBAJA;AAKAO,0BALA;AAMAsB,kCANA;AAOAgC,gCAPA;AAQAC,oCARA;AASAC,kDATA;AAUAtD,kCAVA;AAWAwB,0BAXA;AAaAC,oCAbA;AAcAE,4CAdA;AAeA4B,4BAfA;AAgBA9C,wBAhBA;AAiBAmB,8BAjBA;AAkBAjB,sCAlBA;AAmBAI,sCAnBA;AAoBA4B,kCApBA;AAqBAzB,oCArBA;AAsBA4B,oCAtBA;AAuBAL,8BAvBA;AAwBAH,gCAxBA;AAyBAkB,8BAzBA;AA0BAC,4BA1BA;AA2BAC,oDA3BA;AA4BAC,sDA5BA;AA8BAC,gDA9BA;AA+BAC,kDA/BA;AA+BAC,kBA/BA;AA+BAC,oBA/BA;AA+BArB,kBA/BA;gBAAA;gCAAA;gCAAA;kCAAA;sBAAA;;AAAA;;AA1RyB,CAAb,CAAlB;;AAxKmE,IAAWsB,aAAQ,yFAAnB;AAAqB,IAAkBC,aAAQ,iFAA1B;;AAAyC;AAAA;;AAA2C;;;;AAA6E;;AAAwD,SAAiBC,+CAAwC;AAAAC,SAAkB,kBAAuCC,2CAA4DC,CAA5D,KAA4DD,gBAAnG,EAAwIA,8BAAxI,EAAkNA,+CAAlN,EAAiPA,aAAOE,EAAP,CAAO,QAAP,EAAOF,gBAAP,CAAjP,sCAAwPA,uBAAxP,EAAwPA,yCAAxP,0BAgBhXA,kCAhBgX,EAgBhXA,kBAhBgX,0BAiB3WA,mCAjB2W,EAiB3WA,YACAG,OAlB2W,0BAkB3WH,wBAlB2W,EAkB3WA,qCAlB2W,0JAoBxXA,wCApBwX,EAoBxXA,kBAiFWA,mBArG6W,WAuB3WA,YAAOD,KAvBoW,EAAlB;8BAuBjU,gBAvBiU;AAuBvTK;AAAA;AAAA,MAvBuT;;;;AAAA,KAwB3U,gCAuBvBJ,IAnBA,KAmBA,KAnBI,UAmBJ,IAnBIK;AAAAC;AAAA,4CACaN;AAEhBM,UAFgB;AAGhBP;AAHgB,KAGN,CAEVQ,kCAFU,CAHM,EAKF,CALE,KAKFC,gCANX,EAOOC;AAEVvE,gBAFU;AAGV6D,WAAOC;AAHG,KAGHA,UAHG,EAGH;AAEPU,oFAFO;AAGPC,gCAHO;AAIPrD,2BAJO;AAKPsD,mCALO;AAMPC,YAAI,eANG;AAOP,4BAPO;AAQPC,eAAO,kBARA;AAQEC,0BARF;;;MAAA;AAWVC;AAAA;AAAA,MAXU;AAmBHC;AAAA;AAAA,MAnBG;AAYgCC,WAAK,gBAAEC;AAAA,aAAQnB,2DAAR;AAAA,KAAF,CAZrC;AAYgDoB;AAAA;AAAA,MAZhD;AAaRC;AAAA;AAAA,MAbQ;AAkBDC;AAAA,aALgBtB,6DAKhB;AAAA,MAlBC;AAaeuB;AAAA;AAAA;AAbf,GAHG,GAiBT,IAjBS,EAiBT,EAjBS,EAiBT3B,UAjBS,CAPP,EAwByBY,mCAxBzB,EA2BQR;UAAA;AAFkCD;AAElC,MADsBU;AAAdV;AAAc,KAAd;;;KAKtB;AAoCOyB;AAAA,eAnC0BC,kEAmC1B;AAAA,MApCP;;AAAA,KA6BS,IA3BK,OA2BL,MA3BKjB,gCAPQ,CAAc,EAOX,CAPW,EACtB,QAOOA,gCAlCf,EAuCSA,mCAvCT,EAmC2BR;AAGjBM,UAHiB;;AAAA,KACiB;AACZP;KAAd;AAAAO;AAAA;;AAUVP;;AAL6ByB;AAAA,eACrCnB,kEADqC;AAAA;AAE7BqB;sDAPU,GASF,EATE,KASFlB,gCATE,EASFR;AAAAM;4EAAA;2CAElBqB,2BAMU,CANV,EAMU,WANV,EAFkB;AAIfC,WAAK;AAJU,KAIqB;AAC7BJ;AAAA;AAAA,MAD6B;AAGxBE;AAHwB,GAJrB,EAOH,CAPG,EAOH,oBAPG,KAOHlB,gCAhBK;;AAsBbT;AAJ0B6B,WAAK;KAAW;AAC/CJ;AAAA,cAAOK,iCAAP;AAAA,MAD+C;AAERH;AAFQ,iEAlB7B,0CAyBmBI;AAI/BxB,UAJ+BwB;SACjC,gBAAG,cAAQC,CAAR,CAAS,OAAT;AAD8BD,KACF;AAEL/B;KAAhBiC,oFAFqB,CADEF,EAGvB,CAHuBA,KAGvBtB,gCA5BI,KAD0B;;AAiClDT,uDAGM,QAHN,CAGMgC,CAHN,CAGM,cAHN;KAGM;;eAFsC1B;MAEtC;AADkBqB;AAClB,sDApC4C,CADjB,EAiExB,CAjEwB,KAiExBlB,gCApGH,EA6ENyB,mBAmBE,eAnBFA,CA7EM,EAgGJjC;AAjBCM,UAiBD;AAjBoBP;AAiBpB,KAhBa,CAEZQ,iCAFY,CAgBb,EAdW,CAcX,KAdWC,gCAlFP,GAmFO,EAnFP,CAmBJ,KAgEWH;AAAAC;AAAA,MACIE,gCADJ,EAEHC;AAEPvE,mBAFO;AAGP6D;AAHO,KAGWC,UAHX,EAGW;AAElBa,2BAFkB;AAGlBF,gCAHkB;AAIlBrD,2BAJkB;AAKlBsD,mCALkB;AAMlBG,qCANkB;AAOlB,4BAPkB;AAOTD,iCAPS;;aAWdd;MAXc;AAWdgB;AAAA;AAAA,MAXc;AASYC;AAAA;AAAA,MATZ;AAS4BC,4BAC5CC,aAAa;AAAA,aAAGnB,2DAAH;AAAA,KAD+B,CAT5B;;;MAAA;;;MAAA;6BArHXmB;AAAA;AAAA,MAqHW;AArHXI;AAAA;AAAA;AAqHW,GAHX,GAlHA,IAkHA,EAlHA,EAkHA,EAlHA1B,UAkHA,CAFG;;;6HAAA,MAhEX,CAvBuB,CAxB2U,KAAxCC,qCAAjB","names":["PENDANT_MAP","suffix","prefix","_sfc_main","defineComponent","name","components","ElIcon","CircleClose","IconView","inheritAttrs","props","inputProps","emits","inputEmits","setup","slots","emit","rawAttrs","attrs","instance","getCurrentInstance","useAttrs","useFormItem","form","formItem","inputSize","useSize","inputDisabled","useDisabled","nsInput","useNamespace","nsTextarea","input","ref","textarea","focused","hovering","isComposing","passwordVisible","_textareaCalcStyle","shallowRef","inputStyle","inputOrTextarea","computed","value","needStatusIcon","_a","validateState","resize","nativeInputValue","String","showClear","showPwdVisible","readonly","isWordLimitVisible","inputExceed","autosize","calcTextareaHeight","minHeight","input2","el","target","item","calcIconOffset","nextTick","handleChange","event","blur","handleInput","focus","suffixVisible","watch","setNativeInputValue","resizeTextarea","updateIconOffset","onMounted","onUpdated","onMouseLeave","evt","validateIcon","containerStyle","computedTextareaStyle","textLength","handleFocus","handleBlur","handleCompositionStart","handleCompositionUpdate","handleCompositionEnd","handlePasswordVisible","clear","select","_hoisted_1","_hoisted_2","_withDirectives","class","_ctx","b","is","prepend","onMouseenter","openBlock","key","_renderSlot","createCommentVNode","createElementVNode","type","disabled","autocomplete","tabindex","placeholder","style","onCompositionupdate","onCompositionend","onInput","_cache","onFocus","onBlur","onChange","onKeydown","default","_openBlock","_","withModifiers","onClick","_createVNode","_createElementBlock","e","toDisplayString","_createCommentVNode"],"sources":["../../../../../../packages/components/input/src/input.vue"],"sourcesContent":["<template>\n  <div\n    v-show=\"type !== 'hidden'\"\n    :class=\"[\n      type === 'textarea' ? nsTextarea.b() : nsInput.b(),\n      nsInput.m(inputSize),\n      nsInput.is('disabled', inputDisabled),\n      nsInput.is('exceed', inputExceed),\n      {\n        [nsInput.b('group')]: $slots.prepend || $slots.append,\n        [nsInput.bm('group', 'append')]: $slots.append,\n        [nsInput.bm('group', 'prepend')]: $slots.prepend,\n        [nsInput.m('prefix')]: $slots.prefix || prefixIcon,\n        [nsInput.m('suffix')]:\n          $slots.suffix || suffixIcon || clearable || showPassword,\n        [nsInput.m('suffix--password-clear')]: showClear && showPwdVisible,\n      },\n      $attrs.class,\n    ]\"\n    :style=\"containerStyle\"\n    @mouseenter=\"onMouseEnter\"\n    @mouseleave=\"onMouseLeave\"\n  >\n    <!-- input -->\n    <template v-if=\"type !== 'textarea'\">\n      <!-- prepend slot -->\n      <div v-if=\"$slots.prepend\" :class=\"nsInput.be('group', 'prepend')\">\n        <slot name=\"prepend\" />\n      </div>\n\n      <input\n        ref=\"input\"\n        :class=\"nsInput.e('inner')\"\n        v-bind=\"attrs\"\n        :type=\"showPassword ? (passwordVisible ? 'text' : 'password') : type\"\n        :disabled=\"inputDisabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autocomplete\"\n        :tabindex=\"tabindex\"\n        :aria-label=\"label\"\n        :placeholder=\"placeholder\"\n        :style=\"inputStyle\"\n        @compositionstart=\"handleCompositionStart\"\n        @compositionupdate=\"handleCompositionUpdate\"\n        @compositionend=\"handleCompositionEnd\"\n        @input=\"handleInput\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @change=\"handleChange\"\n        @keydown=\"handleKeydown\"\n      />\n\n      <!-- prefix slot -->\n      <span v-if=\"$slots.prefix || prefixIcon\" :class=\"nsInput.e('prefix')\">\n        <span :class=\"nsInput.e('prefix-inner')\">\n          <slot name=\"prefix\"></slot>\n          <el-icon v-if=\"prefixIcon\" :class=\"nsInput.e('icon')\">\n            <component :is=\"prefixIcon\" />\n          </el-icon>\n        </span>\n      </span>\n\n      <!-- suffix slot -->\n      <span v-if=\"suffixVisible\" :class=\"nsInput.e('suffix')\">\n        <span :class=\"nsInput.e('suffix-inner')\">\n          <template v-if=\"!showClear || !showPwdVisible || !isWordLimitVisible\">\n            <slot name=\"suffix\"></slot>\n            <el-icon v-if=\"suffixIcon\" :class=\"nsInput.e('icon')\">\n              <component :is=\"suffixIcon\" />\n            </el-icon>\n          </template>\n          <el-icon\n            v-if=\"showClear\"\n            :class=\"[nsInput.e('icon'), nsInput.e('clear')]\"\n            @mousedown.prevent\n            @click=\"clear\"\n          >\n            <circle-close />\n          </el-icon>\n          <el-icon\n            v-if=\"showPwdVisible\"\n            :class=\"[nsInput.e('icon'), nsInput.e('clear')]\"\n            @click=\"handlePasswordVisible\"\n          >\n            <icon-view />\n          </el-icon>\n          <span v-if=\"isWordLimitVisible\" :class=\"nsInput.e('count')\">\n            <span :class=\"nsInput.e('count-inner')\">\n              {{ textLength }} / {{ attrs.maxlength }}\n            </span>\n          </span>\n        </span>\n        <el-icon\n          v-if=\"validateState && validateIcon && needStatusIcon\"\n          :class=\"[nsInput.e('icon'), nsInput.e('validateIcon')]\"\n        >\n          <component :is=\"validateIcon\" />\n        </el-icon>\n      </span>\n\n      <!-- append slot -->\n      <div v-if=\"$slots.append\" :class=\"nsInput.be('group', 'append')\">\n        <slot name=\"append\" />\n      </div>\n    </template>\n\n    <!-- textarea -->\n    <template v-else>\n      <textarea\n        ref=\"textarea\"\n        :class=\"nsTextarea.e('inner')\"\n        v-bind=\"attrs\"\n        :tabindex=\"tabindex\"\n        :disabled=\"inputDisabled\"\n        :readonly=\"readonly\"\n        :autocomplete=\"autocomplete\"\n        :style=\"computedTextareaStyle\"\n        :aria-label=\"label\"\n        :placeholder=\"placeholder\"\n        @compositionstart=\"handleCompositionStart\"\n        @compositionupdate=\"handleCompositionUpdate\"\n        @compositionend=\"handleCompositionEnd\"\n        @input=\"handleInput\"\n        @focus=\"handleFocus\"\n        @blur=\"handleBlur\"\n        @change=\"handleChange\"\n        @keydown=\"handleKeydown\"\n      />\n      <span v-if=\"isWordLimitVisible\" :class=\"nsInput.e('count')\">\n        {{ textLength }} / {{ attrs.maxlength }}\n      </span>\n    </template>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  computed,\n  watch,\n  nextTick,\n  getCurrentInstance,\n  ref,\n  shallowRef,\n  onMounted,\n  onUpdated,\n} from 'vue'\nimport { isClient } from '@vueuse/core'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { CircleClose, View as IconView } from '@element-plus/icons-vue'\nimport { ValidateComponentsMap, isObject, isKorean } from '@element-plus/utils'\nimport {\n  useAttrs,\n  useDisabled,\n  useFormItem,\n  useSize,\n  useNamespace,\n} from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { calcTextareaHeight } from './calc-textarea-height'\nimport { inputProps, inputEmits } from './input'\n\nimport type { StyleValue } from 'vue'\n\ntype TargetElement = HTMLInputElement | HTMLTextAreaElement\n\nconst PENDANT_MAP = {\n  suffix: 'append',\n  prefix: 'prepend',\n} as const\n\nexport default defineComponent({\n  name: 'ElInput',\n\n  components: { ElIcon, CircleClose, IconView },\n\n  inheritAttrs: false,\n\n  props: inputProps,\n  emits: inputEmits,\n\n  setup(props, { slots, emit, attrs: rawAttrs }) {\n    const instance = getCurrentInstance()!\n    const attrs = useAttrs()\n\n    const { form, formItem } = useFormItem()\n    const inputSize = useSize()\n    const inputDisabled = useDisabled()\n    const nsInput = useNamespace('input')\n    const nsTextarea = useNamespace('textarea')\n\n    const input = ref<HTMLInputElement>()\n    const textarea = ref<HTMLTextAreaElement>()\n    const focused = ref(false)\n    const hovering = ref(false)\n    const isComposing = ref(false)\n    const passwordVisible = ref(false)\n    const _textareaCalcStyle = shallowRef(props.inputStyle)\n\n    const inputOrTextarea = computed(() => input.value || textarea.value)\n\n    const needStatusIcon = computed(() => form?.statusIcon ?? false)\n    const validateState = computed(() => formItem?.validateState || '')\n    const validateIcon = computed(\n      () => ValidateComponentsMap[validateState.value]\n    )\n    const containerStyle = computed(() => rawAttrs.style as StyleValue)\n    const computedTextareaStyle = computed<StyleValue>(() => [\n      props.inputStyle,\n      _textareaCalcStyle.value,\n      { resize: props.resize },\n    ])\n    const nativeInputValue = computed(() =>\n      props.modelValue === null || props.modelValue === undefined\n        ? ''\n        : String(props.modelValue)\n    )\n    const showClear = computed(\n      () =>\n        props.clearable &&\n        !inputDisabled.value &&\n        !props.readonly &&\n        !!nativeInputValue.value &&\n        (focused.value || hovering.value)\n    )\n    const showPwdVisible = computed(\n      () =>\n        props.showPassword &&\n        !inputDisabled.value &&\n        !props.readonly &&\n        (!!nativeInputValue.value || focused.value)\n    )\n    const isWordLimitVisible = computed(\n      () =>\n        props.showWordLimit &&\n        !!attrs.value.maxlength &&\n        (props.type === 'text' || props.type === 'textarea') &&\n        !inputDisabled.value &&\n        !props.readonly &&\n        !props.showPassword\n    )\n    const textLength = computed(() => Array.from(nativeInputValue.value).length)\n    const inputExceed = computed(\n      () =>\n        // show exceed style if length of initial value greater then maxlength\n        !!isWordLimitVisible.value &&\n        textLength.value > Number(attrs.value.maxlength)\n    )\n\n    const resizeTextarea = () => {\n      const { type, autosize } = props\n\n      if (!isClient || type !== 'textarea') return\n\n      if (autosize) {\n        const minRows = isObject(autosize) ? autosize.minRows : undefined\n        const maxRows = isObject(autosize) ? autosize.maxRows : undefined\n        _textareaCalcStyle.value = {\n          ...calcTextareaHeight(textarea.value!, minRows, maxRows),\n        }\n      } else {\n        _textareaCalcStyle.value = {\n          minHeight: calcTextareaHeight(textarea.value!).minHeight,\n        }\n      }\n    }\n\n    const setNativeInputValue = () => {\n      const input = inputOrTextarea.value\n      if (!input || input.value === nativeInputValue.value) return\n      input.value = nativeInputValue.value\n    }\n\n    const calcIconOffset = (place: 'prefix' | 'suffix') => {\n      const { el } = instance.vnode\n      if (!el) return\n      const elList: HTMLSpanElement[] = Array.from(\n        el.querySelectorAll(`.${nsInput.e(place)}`)\n      )\n      const target = elList.find((item) => item.parentNode === el)\n\n      if (!target) return\n\n      const pendant = PENDANT_MAP[place]\n\n      if (slots[pendant]) {\n        target.style.transform = `translateX(${place === 'suffix' ? '-' : ''}${\n          el.querySelector(`.${nsInput.be('group', pendant)}`).offsetWidth\n        }px)`\n      } else {\n        target.removeAttribute('style')\n      }\n    }\n\n    const updateIconOffset = () => {\n      calcIconOffset('prefix')\n      calcIconOffset('suffix')\n    }\n\n    const handleInput = (event: Event) => {\n      const { value } = event.target as TargetElement\n\n      // should not emit input during composition\n      // see: https://github.com/ElemeFE/element/issues/10516\n      if (isComposing.value) return\n\n      // hack for https://github.com/ElemeFE/element/issues/8548\n      // should remove the following line when we don't support IE\n      if (value === nativeInputValue.value) return\n\n      emit(UPDATE_MODEL_EVENT, value)\n      emit('input', value)\n\n      // ensure native input value is controlled\n      // see: https://github.com/ElemeFE/element/issues/12850\n      nextTick(setNativeInputValue)\n    }\n\n    const handleChange = (event: Event) => {\n      emit('change', (event.target as TargetElement).value)\n    }\n\n    const focus = () => {\n      // see: https://github.com/ElemeFE/element/issues/18573\n      nextTick(() => {\n        inputOrTextarea.value?.focus()\n      })\n    }\n\n    const blur = () => {\n      inputOrTextarea.value?.blur()\n    }\n\n    const handleFocus = (event: FocusEvent) => {\n      focused.value = true\n      emit('focus', event)\n    }\n\n    const handleBlur = (event: FocusEvent) => {\n      focused.value = false\n      emit('blur', event)\n      if (props.validateEvent) {\n        formItem?.validate?.('blur')\n      }\n    }\n\n    const select = () => {\n      inputOrTextarea.value?.select()\n    }\n\n    const handleCompositionStart = (event: CompositionEvent) => {\n      emit('compositionstart', event)\n      isComposing.value = true\n    }\n\n    const handleCompositionUpdate = (event: CompositionEvent) => {\n      emit('compositionupdate', event)\n      const text = (event.target as HTMLInputElement)?.value\n      const lastCharacter = text[text.length - 1] || ''\n      isComposing.value = !isKorean(lastCharacter)\n    }\n\n    const handleCompositionEnd = (event: CompositionEvent) => {\n      emit('compositionend', event)\n      if (isComposing.value) {\n        isComposing.value = false\n        handleInput(event)\n      }\n    }\n\n    const clear = () => {\n      emit(UPDATE_MODEL_EVENT, '')\n      emit('change', '')\n      emit('clear')\n      emit('input', '')\n    }\n\n    const handlePasswordVisible = () => {\n      passwordVisible.value = !passwordVisible.value\n      focus()\n    }\n\n    const suffixVisible = computed(\n      () =>\n        !!slots.suffix ||\n        !!props.suffixIcon ||\n        showClear.value ||\n        props.showPassword ||\n        isWordLimitVisible.value ||\n        (!!validateState.value && needStatusIcon.value)\n    )\n\n    watch(\n      () => props.modelValue,\n      () => {\n        nextTick(resizeTextarea)\n        if (props.validateEvent) {\n          formItem?.validate?.('change')\n        }\n      }\n    )\n\n    // native input value is set explicitly\n    // do not use v-model / :value in template\n    // see: https://github.com/ElemeFE/element/issues/14521\n    watch(nativeInputValue, () => setNativeInputValue())\n\n    // when change between <input> and <textarea>,\n    // update DOM dependent value and styles\n    // https://github.com/ElemeFE/element/issues/14857\n    watch(\n      () => props.type,\n      () => {\n        nextTick(() => {\n          setNativeInputValue()\n          resizeTextarea()\n          updateIconOffset()\n        })\n      }\n    )\n\n    onMounted(() => {\n      setNativeInputValue()\n      updateIconOffset()\n      nextTick(resizeTextarea)\n    })\n\n    onUpdated(() => {\n      nextTick(updateIconOffset)\n    })\n\n    const onMouseLeave = (evt: MouseEvent) => {\n      hovering.value = false\n      emit('mouseleave', evt)\n    }\n\n    const onMouseEnter = (evt: MouseEvent) => {\n      hovering.value = true\n      emit('mouseenter', evt)\n    }\n\n    const handleKeydown = (evt: KeyboardEvent) => {\n      emit('keydown', evt)\n    }\n\n    return {\n      input,\n      textarea,\n      attrs,\n      inputSize,\n      validateState,\n      validateIcon,\n      containerStyle,\n      computedTextareaStyle,\n      inputDisabled,\n      showClear,\n      showPwdVisible,\n      isWordLimitVisible,\n      textLength,\n      hovering,\n      inputExceed,\n      passwordVisible,\n      inputOrTextarea,\n      suffixVisible,\n      needStatusIcon,\n\n      resizeTextarea,\n      handleInput,\n      handleChange,\n      handleFocus,\n      handleBlur,\n      handleCompositionStart,\n      handleCompositionUpdate,\n      handleCompositionEnd,\n      handlePasswordVisible,\n      clear,\n      select,\n      focus,\n      blur,\n      onMouseLeave,\n      onMouseEnter,\n      handleKeydown,\n\n      nsInput,\n      nsTextarea,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}