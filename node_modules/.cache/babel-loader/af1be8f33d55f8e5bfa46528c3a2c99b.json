{"ast":null,"code":"import \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { defineComponent, inject, ref, reactive, computed, watch, nextTick, onMounted, provide, resolveComponent, resolveDirective, openBlock, createBlock, withCtx, withDirectives, createElementBlock, createElementVNode, normalizeClass, createVNode, createCommentVNode, withKeys, createTextVNode, toDisplayString, normalizeStyle, vShow } from 'vue';\nimport { debounce } from 'lodash-unified';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../utils/index.mjs';\nimport { Close, ArrowDown } from '@element-plus/icons-vue';\nimport AlphaSlider from './components/alpha-slider.mjs';\nimport HueSlider from './components/hue-slider.mjs';\nimport Predefine from './components/predefine.mjs';\nimport SvPanel from './components/sv-panel.mjs';\nimport Color from './color.mjs';\nimport { OPTIONS_KEY } from './useOption.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { UPDATE_MODEL_EVENT } from '../../../constants/event.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { elFormKey, elFormItemKey } from '../../../tokens/form.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElColorPicker\",\n  components: {\n    ElButton: ElButton,\n    ElTooltip: ElTooltip,\n    ElInput: ElInput,\n    ElIcon: ElIcon,\n    Close: Close,\n    ArrowDown: ArrowDown,\n    SvPanel: SvPanel,\n    HueSlider: HueSlider,\n    AlphaSlider: AlphaSlider,\n    Predefine: Predefine\n  },\n  directives: {\n    ClickOutside: ClickOutside\n  },\n  props: {\n    modelValue: String,\n    showAlpha: Boolean,\n    colorFormat: String,\n    disabled: Boolean,\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    popperClass: String,\n    predefine: Array\n  },\n  emits: [\"change\", \"active-change\", UPDATE_MODEL_EVENT],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n\n    var _useLocale = useLocale(),\n        t = _useLocale.t;\n\n    var ns = useNamespace(\"color\");\n    var elForm = inject(elFormKey, {});\n    var elFormItem = inject(elFormItemKey, {});\n    var hue = ref(null);\n    var svPanel = ref(null);\n    var alpha = ref(null);\n    var popper = ref(null);\n    var color = reactive(new Color({\n      enableAlpha: props.showAlpha,\n      format: props.colorFormat,\n      value: props.modelValue\n    }));\n    var showPicker = ref(false);\n    var showPanelColor = ref(false);\n    var customInput = ref(\"\");\n    var displayedColor = computed(function () {\n      if (!props.modelValue && !showPanelColor.value) {\n        return \"transparent\";\n      }\n\n      return displayedRgb(color, props.showAlpha);\n    });\n    var colorSize = useSize();\n    var colorDisabled = computed(function () {\n      return !!(props.disabled || elForm.disabled);\n    });\n    var currentColor = computed(function () {\n      return !props.modelValue && !showPanelColor.value ? \"\" : color.value;\n    });\n    watch(function () {\n      return props.modelValue;\n    }, function (newVal) {\n      if (!newVal) {\n        showPanelColor.value = false;\n      } else if (newVal && newVal !== color.value) {\n        color.fromString(newVal);\n      }\n    });\n    watch(function () {\n      return currentColor.value;\n    }, function (val) {\n      customInput.value = val;\n      emit(\"active-change\", val);\n    });\n    watch(function () {\n      return color.value;\n    }, function () {\n      if (!props.modelValue && !showPanelColor.value) {\n        showPanelColor.value = true;\n      }\n    });\n\n    function displayedRgb(color2, showAlpha) {\n      if (!(color2 instanceof Color)) {\n        throw Error(\"color should be instance of _color Class\");\n      }\n\n      var _color2$toRgb = color2.toRgb(),\n          r = _color2$toRgb.r,\n          g = _color2$toRgb.g,\n          b = _color2$toRgb.b;\n\n      return showAlpha ? \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(color2.get(\"alpha\") / 100, \")\") : \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\");\n    }\n\n    function setShowPicker(value) {\n      showPicker.value = value;\n    }\n\n    var debounceSetShowPicker = debounce(setShowPicker, 100);\n\n    function hide() {\n      debounceSetShowPicker(false);\n      resetColor();\n    }\n\n    function resetColor() {\n      nextTick(function () {\n        if (props.modelValue) {\n          color.fromString(props.modelValue);\n        } else {\n          showPanelColor.value = false;\n        }\n      });\n    }\n\n    function handleTrigger() {\n      if (colorDisabled.value) return;\n      debounceSetShowPicker(!showPicker.value);\n    }\n\n    function handleConfirm() {\n      color.fromString(customInput.value);\n    }\n\n    function confirmValue() {\n      var _a;\n\n      var value = color.value;\n      emit(UPDATE_MODEL_EVENT, value);\n      emit(\"change\", value);\n      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\");\n      debounceSetShowPicker(false);\n      nextTick(function () {\n        var newColor = new Color({\n          enableAlpha: props.showAlpha,\n          format: props.colorFormat,\n          value: props.modelValue\n        });\n\n        if (!color.compare(newColor)) {\n          resetColor();\n        }\n      });\n    }\n\n    function clear() {\n      var _a;\n\n      debounceSetShowPicker(false);\n      emit(UPDATE_MODEL_EVENT, null);\n      emit(\"change\", null);\n\n      if (props.modelValue !== null) {\n        (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\");\n      }\n\n      resetColor();\n    }\n\n    onMounted(function () {\n      if (props.modelValue) {\n        customInput.value = currentColor.value;\n      }\n    });\n    watch(function () {\n      return showPicker.value;\n    }, function () {\n      nextTick(function () {\n        var _a, _b, _c;\n\n        (_a = hue.value) == null ? void 0 : _a.update();\n        (_b = svPanel.value) == null ? void 0 : _b.update();\n        (_c = alpha.value) == null ? void 0 : _c.update();\n      });\n    });\n    provide(OPTIONS_KEY, {\n      currentColor: currentColor\n    });\n    return {\n      color: color,\n      colorDisabled: colorDisabled,\n      colorSize: colorSize,\n      displayedColor: displayedColor,\n      showPanelColor: showPanelColor,\n      showPicker: showPicker,\n      customInput: customInput,\n      handleConfirm: handleConfirm,\n      hide: hide,\n      handleTrigger: handleTrigger,\n      clear: clear,\n      confirmValue: confirmValue,\n      t: t,\n      ns: ns,\n      hue: hue,\n      svPanel: svPanel,\n      alpha: alpha,\n      popper: popper\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_hue_slider = resolveComponent(\"hue-slider\");\n\n  var _component_sv_panel = resolveComponent(\"sv-panel\");\n\n  var _component_alpha_slider = resolveComponent(\"alpha-slider\");\n\n  var _component_predefine = resolveComponent(\"predefine\");\n\n  var _component_el_input = resolveComponent(\"el-input\");\n\n  var _component_el_button = resolveComponent(\"el-button\");\n\n  var _component_arrow_down = resolveComponent(\"arrow-down\");\n\n  var _component_el_icon = resolveComponent(\"el-icon\");\n\n  var _component_close = resolveComponent(\"close\");\n\n  var _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  var _directive_click_outside = resolveDirective(\"click-outside\");\n\n  return openBlock(), createBlock(_component_el_tooltip, {\n    ref: \"popper\",\n    visible: _ctx.showPicker,\n    \"onUpdate:visible\": _cache[2] || (_cache[2] = function ($event) {\n      return _ctx.showPicker = $event;\n    }),\n    \"show-arrow\": false,\n    \"fallback-placements\": [\"bottom\", \"top\", \"right\", \"left\"],\n    offset: 0,\n    \"gpu-acceleration\": false,\n    \"popper-class\": [_ctx.ns.be(\"picker\", \"panel\"), _ctx.ns.b(\"dropdown\"), _ctx.popperClass],\n    \"stop-popper-mouse-event\": false,\n    effect: \"light\",\n    trigger: \"click\",\n    transition: \"el-zoom-in-top\",\n    persistent: \"\"\n  }, {\n    content: withCtx(function () {\n      return [withDirectives((openBlock(), createElementBlock(\"div\", null, [createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.ns.be(\"dropdown\", \"main-wrapper\"))\n      }, [createVNode(_component_hue_slider, {\n        ref: \"hue\",\n        class: \"hue-slider\",\n        color: _ctx.color,\n        vertical: \"\"\n      }, null, 8, [\"color\"]), createVNode(_component_sv_panel, {\n        ref: \"svPanel\",\n        color: _ctx.color\n      }, null, 8, [\"color\"])], 2), _ctx.showAlpha ? (openBlock(), createBlock(_component_alpha_slider, {\n        key: 0,\n        ref: \"alpha\",\n        color: _ctx.color\n      }, null, 8, [\"color\"])) : createCommentVNode(\"v-if\", true), _ctx.predefine ? (openBlock(), createBlock(_component_predefine, {\n        key: 1,\n        ref: \"predefine\",\n        color: _ctx.color,\n        colors: _ctx.predefine\n      }, null, 8, [\"color\", \"colors\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.ns.be(\"dropdown\", \"btns\"))\n      }, [createElementVNode(\"span\", {\n        class: normalizeClass(_ctx.ns.be(\"dropdown\", \"value\"))\n      }, [createVNode(_component_el_input, {\n        modelValue: _ctx.customInput,\n        \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n          return _ctx.customInput = $event;\n        }),\n        \"validate-event\": false,\n        size: \"small\",\n        onKeyup: withKeys(_ctx.handleConfirm, [\"enter\"]),\n        onBlur: _ctx.handleConfirm\n      }, null, 8, [\"modelValue\", \"onKeyup\", \"onBlur\"])], 2), createVNode(_component_el_button, {\n        size: \"small\",\n        type: \"text\",\n        class: normalizeClass(_ctx.ns.be(\"dropdown\", \"link-btn\")),\n        onClick: _ctx.clear\n      }, {\n        default: withCtx(function () {\n          return [createTextVNode(toDisplayString(_ctx.t(\"el.colorpicker.clear\")), 1)];\n        }),\n        _: 1\n      }, 8, [\"class\", \"onClick\"]), createVNode(_component_el_button, {\n        plain: \"\",\n        size: \"small\",\n        class: normalizeClass(_ctx.ns.be(\"dropdown\", \"btn\")),\n        onClick: _ctx.confirmValue\n      }, {\n        default: withCtx(function () {\n          return [createTextVNode(toDisplayString(_ctx.t(\"el.colorpicker.confirm\")), 1)];\n        }),\n        _: 1\n      }, 8, [\"class\", \"onClick\"])], 2)])), [[_directive_click_outside, _ctx.hide]])];\n    }),\n    default: withCtx(function () {\n      return [createElementVNode(\"div\", {\n        class: normalizeClass([_ctx.ns.b(\"picker\"), _ctx.ns.is(\"disabled\", _ctx.colorDisabled), _ctx.ns.bm(\"picker\", _ctx.colorSize)])\n      }, [_ctx.colorDisabled ? (openBlock(), createElementBlock(\"div\", {\n        key: 0,\n        class: normalizeClass(_ctx.ns.be(\"picker\", \"mask\"))\n      }, null, 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.ns.be(\"picker\", \"trigger\")),\n        onClick: _cache[1] || (_cache[1] = function () {\n          return _ctx.handleTrigger && _ctx.handleTrigger.apply(_ctx, arguments);\n        })\n      }, [createElementVNode(\"span\", {\n        class: normalizeClass([_ctx.ns.be(\"picker\", \"color\"), _ctx.ns.is(\"alpha\", _ctx.showAlpha)])\n      }, [createElementVNode(\"span\", {\n        class: normalizeClass(_ctx.ns.be(\"picker\", \"color-inner\")),\n        style: normalizeStyle({\n          backgroundColor: _ctx.displayedColor\n        })\n      }, [withDirectives(createVNode(_component_el_icon, {\n        class: normalizeClass([_ctx.ns.be(\"picker\", \"icon\"), _ctx.ns.is(\"icon-arrow-down\")])\n      }, {\n        default: withCtx(function () {\n          return [createVNode(_component_arrow_down)];\n        }),\n        _: 1\n      }, 8, [\"class\"]), [[vShow, _ctx.modelValue || _ctx.showPanelColor]]), !_ctx.modelValue && !_ctx.showPanelColor ? (openBlock(), createBlock(_component_el_icon, {\n        key: 0,\n        class: normalizeClass([_ctx.ns.be(\"picker\", \"empty\"), _ctx.ns.is(\"icon-close\")])\n      }, {\n        default: withCtx(function () {\n          return [createVNode(_component_close)];\n        }),\n        _: 1\n      }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true)], 6)], 2)], 2)], 2)];\n    }),\n    _: 1\n  }, 8, [\"visible\", \"popper-class\"]);\n}\n\nvar ColorPicker = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { ColorPicker as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElButton","ElTooltip","ElInput","ElIcon","Close","ArrowDown","SvPanel","HueSlider","AlphaSlider","Predefine","directives","ClickOutside","props","modelValue","String","showAlpha","Boolean","colorFormat","disabled","size","type","validator","isValidComponentSize","popperClass","predefine","Array","emits","UPDATE_MODEL_EVENT","setup","emit","useLocale","t","ns","useNamespace","elForm","inject","elFormKey","elFormItem","elFormItemKey","hue","ref","svPanel","alpha","popper","color","reactive","Color","enableAlpha","format","value","showPicker","showPanelColor","customInput","displayedColor","computed","displayedRgb","colorSize","useSize","colorDisabled","currentColor","watch","newVal","fromString","val","color2","Error","toRgb","r","g","b","get","debounceSetShowPicker","debounce","setShowPicker","resetColor","nextTick","onMounted","_b","_c","provide","handleConfirm","hide","handleTrigger","clear","confirmValue","visible","offset","effect","trigger","transition","persistent","content","withDirectives","class","_normalizeClass","createVNode","vertical","_ctx","key","createCommentVNode","colors","onClick","default","_","plain","createElementVNode","be","_cache","style"],"sources":["../../../../../../packages/components/color-picker/src/index.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"popper\"\n    v-model:visible=\"showPicker\"\n    :show-arrow=\"false\"\n    :fallback-placements=\"['bottom', 'top', 'right', 'left']\"\n    :offset=\"0\"\n    :gpu-acceleration=\"false\"\n    :popper-class=\"[ns.be('picker', 'panel'), ns.b('dropdown'), popperClass]\"\n    :stop-popper-mouse-event=\"false\"\n    effect=\"light\"\n    trigger=\"click\"\n    transition=\"el-zoom-in-top\"\n    persistent\n  >\n    <template #content>\n      <div v-click-outside=\"hide\">\n        <div :class=\"ns.be('dropdown', 'main-wrapper')\">\n          <hue-slider ref=\"hue\" class=\"hue-slider\" :color=\"color\" vertical />\n          <sv-panel ref=\"svPanel\" :color=\"color\" />\n        </div>\n        <alpha-slider v-if=\"showAlpha\" ref=\"alpha\" :color=\"color\" />\n        <predefine\n          v-if=\"predefine\"\n          ref=\"predefine\"\n          :color=\"color\"\n          :colors=\"predefine\"\n        />\n        <div :class=\"ns.be('dropdown', 'btns')\">\n          <span :class=\"ns.be('dropdown', 'value')\">\n            <el-input\n              v-model=\"customInput\"\n              :validate-event=\"false\"\n              size=\"small\"\n              @keyup.enter=\"handleConfirm\"\n              @blur=\"handleConfirm\"\n            />\n          </span>\n          <el-button\n            size=\"small\"\n            type=\"text\"\n            :class=\"ns.be('dropdown', 'link-btn')\"\n            @click=\"clear\"\n          >\n            {{ t('el.colorpicker.clear') }}\n          </el-button>\n          <el-button\n            plain\n            size=\"small\"\n            :class=\"ns.be('dropdown', 'btn')\"\n            @click=\"confirmValue\"\n          >\n            {{ t('el.colorpicker.confirm') }}\n          </el-button>\n        </div>\n      </div>\n    </template>\n    <template #default>\n      <div\n        :class=\"[\n          ns.b('picker'),\n          ns.is('disabled', colorDisabled),\n          ns.bm('picker', colorSize),\n        ]\"\n      >\n        <div v-if=\"colorDisabled\" :class=\"ns.be('picker', 'mask')\"></div>\n        <div :class=\"ns.be('picker', 'trigger')\" @click=\"handleTrigger\">\n          <span :class=\"[ns.be('picker', 'color'), ns.is('alpha', showAlpha)]\">\n            <span\n              :class=\"ns.be('picker', 'color-inner')\"\n              :style=\"{\n                backgroundColor: displayedColor,\n              }\"\n            >\n              <el-icon\n                v-show=\"modelValue || showPanelColor\"\n                :class=\"[ns.be('picker', 'icon'), ns.is('icon-arrow-down')]\"\n              >\n                <arrow-down />\n              </el-icon>\n              <el-icon\n                v-if=\"!modelValue && !showPanelColor\"\n                :class=\"[ns.be('picker', 'empty'), ns.is('icon-close')]\"\n              >\n                <close />\n              </el-icon>\n            </span>\n          </span>\n        </div>\n      </div>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onMounted,\n  provide,\n  reactive,\n  ref,\n  watch,\n} from 'vue'\nimport { debounce } from 'lodash-unified'\nimport ElButton from '@element-plus/components/button'\nimport ElIcon from '@element-plus/components/icon'\nimport { ClickOutside } from '@element-plus/directives'\nimport { elFormItemKey, elFormKey } from '@element-plus/tokens'\nimport { useLocale, useSize, useNamespace } from '@element-plus/hooks'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElInput from '@element-plus/components/input'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { isValidComponentSize } from '@element-plus/utils'\nimport { Close, ArrowDown } from '@element-plus/icons-vue'\nimport AlphaSlider from './components/alpha-slider.vue'\nimport HueSlider from './components/hue-slider.vue'\nimport Predefine from './components/predefine.vue'\nimport SvPanel from './components/sv-panel.vue'\nimport Color from './color'\nimport { OPTIONS_KEY } from './useOption'\n\nimport type { PropType } from 'vue'\nimport type { ElFormContext, ElFormItemContext } from '@element-plus/tokens'\nimport type { ComponentSize } from '@element-plus/constants'\nimport type { IUseOptions } from './useOption'\n\nexport default defineComponent({\n  name: 'ElColorPicker',\n  components: {\n    ElButton,\n    ElTooltip,\n    ElInput,\n    ElIcon,\n    Close,\n    ArrowDown,\n    SvPanel,\n    HueSlider,\n    AlphaSlider,\n    Predefine,\n  },\n  directives: {\n    ClickOutside,\n  },\n  props: {\n    modelValue: String,\n    showAlpha: Boolean,\n    colorFormat: String,\n    disabled: Boolean,\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    popperClass: String,\n    predefine: Array,\n  },\n  emits: ['change', 'active-change', UPDATE_MODEL_EVENT],\n  setup(props, { emit }) {\n    const { t } = useLocale()\n    const ns = useNamespace('color')\n    const elForm = inject(elFormKey, {} as ElFormContext)\n    const elFormItem = inject(elFormItemKey, {} as ElFormItemContext)\n\n    const hue = ref(null)\n    const svPanel = ref(null)\n    const alpha = ref(null)\n    const popper = ref(null)\n    // data\n    const color = reactive(\n      new Color({\n        enableAlpha: props.showAlpha,\n        format: props.colorFormat,\n        value: props.modelValue,\n      })\n    )\n    const showPicker = ref(false)\n    const showPanelColor = ref(false)\n    const customInput = ref('')\n    // computed\n    const displayedColor = computed(() => {\n      if (!props.modelValue && !showPanelColor.value) {\n        return 'transparent'\n      }\n      return displayedRgb(color, props.showAlpha)\n    })\n    const colorSize = useSize()\n    const colorDisabled = computed(() => {\n      return !!(props.disabled || elForm.disabled)\n    })\n\n    const currentColor = computed(() => {\n      return !props.modelValue && !showPanelColor.value ? '' : color.value\n    })\n    // watch\n    watch(\n      () => props.modelValue,\n      (newVal) => {\n        if (!newVal) {\n          showPanelColor.value = false\n        } else if (newVal && newVal !== color.value) {\n          color.fromString(newVal)\n        }\n      }\n    )\n    watch(\n      () => currentColor.value,\n      (val) => {\n        customInput.value = val\n        emit('active-change', val)\n      }\n    )\n\n    watch(\n      () => color.value,\n      () => {\n        if (!props.modelValue && !showPanelColor.value) {\n          showPanelColor.value = true\n        }\n      }\n    )\n\n    // methods\n    function displayedRgb(color, showAlpha) {\n      if (!(color instanceof Color)) {\n        throw Error('color should be instance of _color Class')\n      }\n\n      const { r, g, b } = color.toRgb()\n      return showAlpha\n        ? `rgba(${r}, ${g}, ${b}, ${color.get('alpha') / 100})`\n        : `rgb(${r}, ${g}, ${b})`\n    }\n\n    function setShowPicker(value) {\n      showPicker.value = value\n    }\n\n    const debounceSetShowPicker = debounce(setShowPicker, 100)\n\n    function hide() {\n      debounceSetShowPicker(false)\n      resetColor()\n    }\n\n    function resetColor() {\n      nextTick(() => {\n        if (props.modelValue) {\n          color.fromString(props.modelValue)\n        } else {\n          showPanelColor.value = false\n        }\n      })\n    }\n\n    function handleTrigger() {\n      if (colorDisabled.value) return\n      debounceSetShowPicker(!showPicker.value)\n    }\n\n    function handleConfirm() {\n      color.fromString(customInput.value)\n    }\n\n    function confirmValue() {\n      const value = color.value\n      emit(UPDATE_MODEL_EVENT, value)\n      emit('change', value)\n      elFormItem.validate?.('change')\n      debounceSetShowPicker(false)\n      // check if modelValue change, if not change, then reset color.\n      nextTick(() => {\n        const newColor = new Color({\n          enableAlpha: props.showAlpha,\n          format: props.colorFormat,\n          value: props.modelValue,\n        })\n        if (!color.compare(newColor)) {\n          resetColor()\n        }\n      })\n    }\n\n    function clear() {\n      debounceSetShowPicker(false)\n      emit(UPDATE_MODEL_EVENT, null)\n      emit('change', null)\n      if (props.modelValue !== null) {\n        elFormItem.validate?.('change')\n      }\n      resetColor()\n    }\n\n    onMounted(() => {\n      if (props.modelValue) {\n        customInput.value = currentColor.value\n      }\n    })\n    watch(\n      () => showPicker.value,\n      () => {\n        nextTick(() => {\n          hue.value?.update()\n          svPanel.value?.update()\n          alpha.value?.update()\n        })\n      }\n    )\n\n    provide<IUseOptions>(OPTIONS_KEY, {\n      currentColor,\n    })\n\n    return {\n      color: color as Color,\n      colorDisabled,\n      colorSize,\n      displayedColor,\n      showPanelColor,\n      showPicker,\n      customInput,\n      handleConfirm,\n      hide,\n      handleTrigger,\n      clear,\n      confirmValue,\n      t,\n      ns,\n      hue,\n      svPanel,\n      alpha,\n      popper,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}