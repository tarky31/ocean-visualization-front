{"ast":null,"code":"import { defineComponent, inject, ref, unref, toRef, resolveComponent, openBlock, createBlock, normalizeClass, withCtx, renderSlot } from 'vue';\nimport '../../popper/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { TOOLTIP_INJECTION_KEY } from './tokens.mjs';\nimport { useTooltipTriggerProps } from './tooltip.mjs';\nimport { whenTrigger } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ElPopperTrigger from '../../popper/src/trigger.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElTooltipTrigger\",\n  components: {\n    ElPopperTrigger: ElPopperTrigger\n  },\n  props: useTooltipTriggerProps,\n  setup: function setup(props) {\n    var ns = useNamespace(\"tooltip\");\n\n    var _inject = inject(TOOLTIP_INJECTION_KEY, void 0),\n        controlled = _inject.controlled,\n        id = _inject.id,\n        open = _inject.open,\n        onOpen = _inject.onOpen,\n        onClose = _inject.onClose,\n        onToggle = _inject.onToggle;\n\n    var triggerRef = ref(null);\n\n    var stopWhenControlledOrDisabled = function stopWhenControlledOrDisabled() {\n      if (unref(controlled) || props.disabled) {\n        return true;\n      }\n    };\n\n    var trigger = toRef(props, \"trigger\");\n    var onMouseenter = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"hover\", onOpen));\n    var onMouseleave = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"hover\", onClose));\n    var onClick = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"click\", function (e) {\n      if (e.button === 0) {\n        onToggle(e);\n      }\n    }));\n    var onFocus = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"focus\", onOpen));\n    var onBlur = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"focus\", onClose));\n    var onContextMenu = composeEventHandlers(stopWhenControlledOrDisabled, whenTrigger(trigger, \"contextmenu\", function (e) {\n      e.preventDefault();\n      onToggle(e);\n    }));\n    var onKeydown = composeEventHandlers(stopWhenControlledOrDisabled, function (e) {\n      var code = e.code;\n\n      if (code === EVENT_CODE.enter || code === EVENT_CODE.space) {\n        onToggle(e);\n      }\n    });\n    return {\n      onBlur: onBlur,\n      onContextMenu: onContextMenu,\n      onFocus: onFocus,\n      onMouseenter: onMouseenter,\n      onMouseleave: onMouseleave,\n      onClick: onClick,\n      onKeydown: onKeydown,\n      open: open,\n      id: id,\n      triggerRef: triggerRef,\n      ns: ns\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_popper_trigger = resolveComponent(\"el-popper-trigger\");\n\n  return openBlock(), createBlock(_component_el_popper_trigger, {\n    id: _ctx.id,\n    \"virtual-ref\": _ctx.virtualRef,\n    open: _ctx.open,\n    \"virtual-triggering\": _ctx.virtualTriggering,\n    class: normalizeClass(_ctx.ns.e(\"trigger\")),\n    onBlur: _ctx.onBlur,\n    onClick: _ctx.onClick,\n    onContextmenu: _ctx.onContextMenu,\n    onFocus: _ctx.onFocus,\n    onMouseenter: _ctx.onMouseenter,\n    onMouseleave: _ctx.onMouseleave,\n    onKeydown: _ctx.onKeydown\n  }, {\n    default: withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"default\")];\n    }),\n    _: 3\n  }, 8, [\"id\", \"virtual-ref\", \"open\", \"virtual-triggering\", \"class\", \"onBlur\", \"onClick\", \"onContextmenu\", \"onFocus\", \"onMouseenter\", \"onMouseleave\", \"onKeydown\"]);\n}\n\nvar ElTooltipTrigger = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { ElTooltipTrigger as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElPopperTrigger","props","useTooltipTriggerProps","setup","ns","useNamespace","inject","TOOLTIP_INJECTION_KEY","controlled","id","open","onOpen","onClose","onToggle","triggerRef","ref","stopWhenControlledOrDisabled","unref","disabled","trigger","toRef","onMouseenter","composeEventHandlers","whenTrigger","onMouseleave","onClick","e","button","onFocus","onBlur","onContextMenu","preventDefault","onKeydown","code","EVENT_CODE","enter","space","_createBlock","_component_el_popper_trigger","_ctx","class","_normalizeClass","onContextmenu","_renderSlot","_"],"sources":["../../../../../../packages/components/tooltip/src/trigger.vue"],"sourcesContent":["<template>\n  <el-popper-trigger\n    :id=\"id\"\n    :virtual-ref=\"virtualRef\"\n    :open=\"open\"\n    :virtual-triggering=\"virtualTriggering\"\n    :class=\"ns.e('trigger')\"\n    @blur=\"onBlur\"\n    @click=\"onClick\"\n    @contextmenu=\"onContextMenu\"\n    @focus=\"onFocus\"\n    @mouseenter=\"onMouseenter\"\n    @mouseleave=\"onMouseleave\"\n    @keydown=\"onKeydown\"\n  >\n    <slot />\n  </el-popper-trigger>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, inject, ref, unref, toRef } from 'vue'\nimport { ElPopperTrigger } from '@element-plus/components/popper'\nimport { composeEventHandlers } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { useNamespace } from '@element-plus/hooks'\nimport { TOOLTIP_INJECTION_KEY } from './tokens'\nimport { useTooltipTriggerProps } from './tooltip'\nimport { whenTrigger } from './utils'\n\nimport type { ElOnlyChildExpose } from '@element-plus/components/slot'\n\nexport default defineComponent({\n  name: 'ElTooltipTrigger',\n  components: {\n    ElPopperTrigger,\n  },\n  props: useTooltipTriggerProps,\n  setup(props) {\n    const ns = useNamespace('tooltip')\n    const { controlled, id, open, onOpen, onClose, onToggle } = inject(\n      TOOLTIP_INJECTION_KEY,\n      undefined\n    )!\n    const triggerRef = ref<ElOnlyChildExpose | null>(null)\n\n    const stopWhenControlledOrDisabled = () => {\n      if (unref(controlled) || props.disabled) {\n        return true\n      }\n    }\n    const trigger = toRef(props, 'trigger')\n    const onMouseenter = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'hover', onOpen)\n    )\n    const onMouseleave = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'hover', onClose)\n    )\n    const onClick = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'click', (e) => {\n        // distinguish left click\n        if ((e as MouseEvent).button === 0) {\n          onToggle(e)\n        }\n      })\n    )\n\n    const onFocus = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'focus', onOpen)\n    )\n\n    const onBlur = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'focus', onClose)\n    )\n\n    const onContextMenu = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      whenTrigger(trigger, 'contextmenu', (e: Event) => {\n        e.preventDefault()\n        onToggle(e)\n      })\n    )\n\n    const onKeydown = composeEventHandlers(\n      stopWhenControlledOrDisabled,\n      (e: KeyboardEvent) => {\n        const { code } = e\n        if (code === EVENT_CODE.enter || code === EVENT_CODE.space) {\n          onToggle(e)\n        }\n      }\n    )\n\n    return {\n      onBlur,\n      onContextMenu,\n      onFocus,\n      onMouseenter,\n      onMouseleave,\n      onClick,\n      onKeydown,\n      open,\n      id,\n      triggerRef,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}