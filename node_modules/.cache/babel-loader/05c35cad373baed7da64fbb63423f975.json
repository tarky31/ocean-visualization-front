{"ast":null,"code":"import _toConsumableArray from \"D:/MyFile/WebCode/ocean-vis/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _defineProperty from \"D:/MyFile/WebCode/ocean-vis/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport { defineComponent, provide, computed, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, renderSlot, createTextVNode, toDisplayString, createCommentVNode, Fragment, renderList, createBlock } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport DescriptionsRow from './descriptions-row.mjs';\nimport { elDescriptionsKey } from './token.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElDescriptions\",\n  components: _defineProperty({}, DescriptionsRow.name, DescriptionsRow),\n  props: {\n    border: {\n      type: Boolean,\n      default: false\n    },\n    column: {\n      type: Number,\n      default: 3\n    },\n    direction: {\n      type: String,\n      default: \"horizontal\"\n    },\n    size: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    title: {\n      type: String,\n      default: \"\"\n    },\n    extra: {\n      type: String,\n      default: \"\"\n    }\n  },\n  setup: function setup(props, _ref) {\n    var slots = _ref.slots;\n    provide(elDescriptionsKey, props);\n    var descriptionsSize = useSize();\n    var ns = useNamespace(\"descriptions\");\n    var descriptionKls = computed(function () {\n      return [ns.b(), ns.is(ns.m(descriptionsSize.value), !!descriptionsSize.value)];\n    });\n\n    var flattedChildren = function flattedChildren(children) {\n      var temp = Array.isArray(children) ? children : [children];\n      var res = [];\n      temp.forEach(function (child) {\n        if (Array.isArray(child.children)) {\n          res.push.apply(res, _toConsumableArray(flattedChildren(child.children)));\n        } else {\n          res.push(child);\n        }\n      });\n      return res;\n    };\n\n    var filledNode = function filledNode(node, span, count) {\n      var isLast = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n\n      if (!node.props) {\n        node.props = {};\n      }\n\n      if (span > count) {\n        node.props.span = count;\n      }\n\n      if (isLast) {\n        node.props.span = span;\n      }\n\n      return node;\n    };\n\n    var getRows = function getRows() {\n      var _a;\n\n      var children = flattedChildren((_a = slots.default) == null ? void 0 : _a.call(slots)).filter(function (node) {\n        var _a2;\n\n        return ((_a2 = node == null ? void 0 : node.type) == null ? void 0 : _a2.name) === \"ElDescriptionsItem\";\n      });\n      var rows = [];\n      var temp = [];\n      var count = props.column;\n      var totalSpan = 0;\n      children.forEach(function (node, index) {\n        var _a2;\n\n        var span = ((_a2 = node.props) == null ? void 0 : _a2.span) || 1;\n\n        if (index < children.length - 1) {\n          totalSpan += span > count ? count : span;\n        }\n\n        if (index === children.length - 1) {\n          var lastSpan = props.column - totalSpan % props.column;\n          temp.push(filledNode(node, lastSpan, count, true));\n          rows.push(temp);\n          return;\n        }\n\n        if (span < count) {\n          count -= span;\n          temp.push(node);\n        } else {\n          temp.push(filledNode(node, span, count));\n          rows.push(temp);\n          count = props.column;\n          temp = [];\n        }\n      });\n      return rows;\n    };\n\n    return {\n      descriptionKls: descriptionKls,\n      getRows: getRows,\n      ns: ns\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_descriptions_row = resolveComponent(\"el-descriptions-row\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.descriptionKls)\n  }, [_ctx.title || _ctx.extra || _ctx.$slots.title || _ctx.$slots.extra ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"header\"))\n  }, [createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"title\"))\n  }, [renderSlot(_ctx.$slots, \"title\", {}, function () {\n    return [createTextVNode(toDisplayString(_ctx.title), 1)];\n  })], 2), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"extra\"))\n  }, [renderSlot(_ctx.$slots, \"extra\", {}, function () {\n    return [createTextVNode(toDisplayString(_ctx.extra), 1)];\n  })], 2)], 2)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"body\"))\n  }, [createElementVNode(\"table\", {\n    class: normalizeClass([_ctx.ns.e(\"table\"), _ctx.ns.is(\"bordered\", _ctx.border)])\n  }, [createElementVNode(\"tbody\", null, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.getRows(), function (row, index) {\n    return openBlock(), createBlock(_component_el_descriptions_row, {\n      key: index,\n      row: row\n    }, null, 8, [\"row\"]);\n  }), 128))])], 2)], 2)], 2);\n}\n\nvar Descriptions = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Descriptions as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","DescriptionsRow","props","border","type","Boolean","default","column","Number","direction","String","size","validator","isValidComponentSize","title","extra","setup","slots","provide","elDescriptionsKey","descriptionsSize","useSize","ns","useNamespace","descriptionKls","computed","b","is","m","value","flattedChildren","children","temp","Array","isArray","res","forEach","child","push","filledNode","node","span","count","isLast","getRows","_a2","totalSpan","rows","class","_ctx","openBlock","key","createElementVNode","_renderSlot","createTextVNode","createCommentVNode"],"sources":["../../../../../../packages/components/descriptions/src/index.vue"],"sourcesContent":["<template>\n  <div :class=\"descriptionKls\">\n    <div\n      v-if=\"title || extra || $slots.title || $slots.extra\"\n      :class=\"ns.e('header')\"\n    >\n      <div :class=\"ns.e('title')\">\n        <slot name=\"title\">{{ title }}</slot>\n      </div>\n      <div :class=\"ns.e('extra')\">\n        <slot name=\"extra\">{{ extra }}</slot>\n      </div>\n    </div>\n\n    <div :class=\"ns.e('body')\">\n      <table :class=\"[ns.e('table'), ns.is('bordered', border)]\">\n        <tbody>\n          <template v-for=\"(row, index) in getRows()\" :key=\"index\">\n            <el-descriptions-row :row=\"row\" />\n          </template>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, provide } from 'vue'\nimport { isValidComponentSize } from '@element-plus/utils'\nimport { useSize, useNamespace } from '@element-plus/hooks'\nimport DescriptionsRow from './descriptions-row.vue'\nimport { elDescriptionsKey } from './token'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\n\nexport default defineComponent({\n  name: 'ElDescriptions',\n  components: {\n    [DescriptionsRow.name]: DescriptionsRow,\n  },\n  props: {\n    border: {\n      type: Boolean,\n      default: false,\n    },\n    column: {\n      type: Number,\n      default: 3,\n    },\n    direction: {\n      type: String as PropType<'horizontal' | 'vertical'>,\n      default: 'horizontal',\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    title: {\n      type: String,\n      default: '',\n    },\n    extra: {\n      type: String,\n      default: '',\n    },\n  },\n  setup(props, { slots }) {\n    provide(elDescriptionsKey, props)\n\n    const descriptionsSize = useSize()\n    const ns = useNamespace('descriptions')\n\n    const descriptionKls = computed(() => [\n      ns.b(),\n      ns.is(ns.m(descriptionsSize.value), !!descriptionsSize.value),\n    ])\n\n    const flattedChildren = (children) => {\n      const temp = Array.isArray(children) ? children : [children]\n      const res = []\n      temp.forEach((child) => {\n        if (Array.isArray(child.children)) {\n          res.push(...flattedChildren(child.children))\n        } else {\n          res.push(child)\n        }\n      })\n      return res\n    }\n\n    const filledNode = (node, span, count, isLast = false) => {\n      if (!node.props) {\n        node.props = {}\n      }\n      if (span > count) {\n        node.props.span = count\n      }\n      if (isLast) {\n        // set the last span\n        node.props.span = span\n      }\n      return node\n    }\n\n    const getRows = () => {\n      const children = flattedChildren(slots.default?.()).filter(\n        (node) => node?.type?.name === 'ElDescriptionsItem'\n      )\n      const rows = []\n      let temp = []\n      let count = props.column\n      let totalSpan = 0 // all spans number of item\n\n      children.forEach((node, index) => {\n        const span = node.props?.span || 1\n\n        if (index < children.length - 1) {\n          totalSpan += span > count ? count : span\n        }\n\n        if (index === children.length - 1) {\n          // calculate the last item span\n          const lastSpan = props.column - (totalSpan % props.column)\n          temp.push(filledNode(node, lastSpan, count, true))\n          rows.push(temp)\n          return\n        }\n\n        if (span < count) {\n          count -= span\n          temp.push(node)\n        } else {\n          temp.push(filledNode(node, span, count))\n          rows.push(temp)\n          count = props.column\n          temp = []\n        }\n      })\n\n      return rows\n    }\n\n    return {\n      descriptionKls,\n      getRows,\n      ns,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}