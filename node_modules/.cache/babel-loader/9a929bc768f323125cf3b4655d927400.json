{"ast":null,"code":"import _defineProperty from \"D:/MyFile/WebCode/ocean-vis/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport { defineComponent, provide, getCurrentInstance, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, withCtx, normalizeStyle, createElementVNode, toDisplayString } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../virtual-list/index.mjs';\nimport { useTree } from './composables/useTree.mjs';\nimport ElTreeNode from './tree-node.mjs';\nimport { treeProps, treeEmits, ROOT_TREE_INJECTION_KEY } from './virtual-tree.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport FixedSizeList from '../../virtual-list/src/components/fixed-size-list.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElTreeV2\",\n  components: {\n    ElTreeNode: ElTreeNode,\n    FixedSizeList: FixedSizeList\n  },\n  props: treeProps,\n  emits: treeEmits,\n  setup: function setup(props, ctx) {\n    provide(ROOT_TREE_INJECTION_KEY, {\n      ctx: ctx,\n      props: props,\n      instance: getCurrentInstance()\n    });\n\n    var _useLocale = useLocale(),\n        t = _useLocale.t;\n\n    var ns = useNamespace(\"tree\");\n\n    var _useTree = useTree(props, ctx.emit),\n        flattenTree = _useTree.flattenTree,\n        isNotEmpty = _useTree.isNotEmpty,\n        toggleExpand = _useTree.toggleExpand,\n        isExpanded = _useTree.isExpanded,\n        isIndeterminate = _useTree.isIndeterminate,\n        isChecked = _useTree.isChecked,\n        isDisabled = _useTree.isDisabled,\n        isCurrent = _useTree.isCurrent,\n        isForceHiddenExpandIcon = _useTree.isForceHiddenExpandIcon,\n        toggleCheckbox = _useTree.toggleCheckbox,\n        handleNodeClick = _useTree.handleNodeClick,\n        handleNodeCheck = _useTree.handleNodeCheck,\n        getCurrentNode = _useTree.getCurrentNode,\n        getCurrentKey = _useTree.getCurrentKey,\n        setCurrentKey = _useTree.setCurrentKey,\n        getCheckedKeys = _useTree.getCheckedKeys,\n        getCheckedNodes = _useTree.getCheckedNodes,\n        getHalfCheckedKeys = _useTree.getHalfCheckedKeys,\n        getHalfCheckedNodes = _useTree.getHalfCheckedNodes,\n        setChecked = _useTree.setChecked,\n        setCheckedKeys = _useTree.setCheckedKeys,\n        filter = _useTree.filter,\n        setData = _useTree.setData;\n\n    ctx.expose({\n      getCurrentNode: getCurrentNode,\n      getCurrentKey: getCurrentKey,\n      setCurrentKey: setCurrentKey,\n      getCheckedKeys: getCheckedKeys,\n      getCheckedNodes: getCheckedNodes,\n      getHalfCheckedKeys: getHalfCheckedKeys,\n      getHalfCheckedNodes: getHalfCheckedNodes,\n      setChecked: setChecked,\n      setCheckedKeys: setCheckedKeys,\n      filter: filter,\n      setData: setData\n    });\n    return {\n      t: t,\n      ns: ns,\n      flattenTree: flattenTree,\n      itemSize: 26,\n      isNotEmpty: isNotEmpty,\n      toggleExpand: toggleExpand,\n      toggleCheckbox: toggleCheckbox,\n      isExpanded: isExpanded,\n      isIndeterminate: isIndeterminate,\n      isChecked: isChecked,\n      isDisabled: isDisabled,\n      isCurrent: isCurrent,\n      isForceHiddenExpandIcon: isForceHiddenExpandIcon,\n      handleNodeClick: handleNodeClick,\n      handleNodeCheck: handleNodeCheck\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a;\n\n  var _component_el_tree_node = resolveComponent(\"el-tree-node\");\n\n  var _component_fixed_size_list = resolveComponent(\"fixed-size-list\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([_ctx.ns.b(), _defineProperty({}, _ctx.ns.m(\"highlight-current\"), _ctx.highlightCurrent)]),\n    role: \"tree\"\n  }, [_ctx.isNotEmpty ? (openBlock(), createBlock(_component_fixed_size_list, {\n    key: 0,\n    \"class-name\": _ctx.ns.b(\"virtual-list\"),\n    data: _ctx.flattenTree,\n    total: _ctx.flattenTree.length,\n    height: _ctx.height,\n    \"item-size\": _ctx.itemSize,\n    \"perf-mode\": _ctx.perfMode\n  }, {\n    default: withCtx(function (_ref2) {\n      var data = _ref2.data,\n          index = _ref2.index,\n          style = _ref2.style;\n      return [(openBlock(), createBlock(_component_el_tree_node, {\n        key: data[index].key,\n        style: normalizeStyle(style),\n        node: data[index],\n        expanded: _ctx.isExpanded(data[index]),\n        \"show-checkbox\": _ctx.showCheckbox,\n        checked: _ctx.isChecked(data[index]),\n        indeterminate: _ctx.isIndeterminate(data[index]),\n        disabled: _ctx.isDisabled(data[index]),\n        current: _ctx.isCurrent(data[index]),\n        \"hidden-expand-icon\": _ctx.isForceHiddenExpandIcon(data[index]),\n        onClick: _ctx.handleNodeClick,\n        onToggle: _ctx.toggleExpand,\n        onCheck: _ctx.handleNodeCheck\n      }, null, 8, [\"style\", \"node\", \"expanded\", \"show-checkbox\", \"checked\", \"indeterminate\", \"disabled\", \"current\", \"hidden-expand-icon\", \"onClick\", \"onToggle\", \"onCheck\"]))];\n    }),\n    _: 1\n  }, 8, [\"class-name\", \"data\", \"total\", \"height\", \"item-size\", \"perf-mode\"])) : (openBlock(), createElementBlock(\"div\", {\n    key: 1,\n    class: normalizeClass(_ctx.ns.e(\"empty-block\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.ns.e(\"empty-text\"))\n  }, toDisplayString((_a = _ctx.emptyText) != null ? _a : _ctx.t(\"el.tree.emptyText\")), 3)], 2))], 2);\n}\n\nvar TreeV2 = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { TreeV2 as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;AAiDA,IAAKA,YAAaC,gBAAa;AAC7BC,QAAM,UADuB;AAE7BC,cAAY;AACVC,0BADU;AAEVC;AAFU,GAFiB;AAM7BC,SAAOC,SANsB;AAO7BC,SAAOC,SAPsB;AAQ7BC,OAR6B,iBAQvBJ,KARuB,EAQLK,GARK,EAQA;AAC3BC,YAAQC,uBAAR,EAAiC;AAC/BF,cAD+B;AAE/BL,kBAF+B;AAG/BQ,gBAAUC;AAHqB,KAAjC;;AAKA,qBAAcC,WAAd;AAAA,QAAQC,CAAR,cAAQA,CAAR;;AACA,QAAMC,KAAKC,aAAa,MAAb,CAAX;;AACA,mBAyBIC,QAAQd,KAAR,EAAeK,IAAIU,IAAnB,CAzBJ;AAAA,QACEC,WADF,YACEA,WADF;AAAA,QAEEC,UAFF,YAEEA,UAFF;AAAA,QAGEC,YAHF,YAGEA,YAHF;AAAA,QAIEC,UAJF,YAIEA,UAJF;AAAA,QAKEC,eALF,YAKEA,eALF;AAAA,QAMEC,SANF,YAMEA,SANF;AAAA,QAOEC,UAPF,YAOEA,UAPF;AAAA,QAQEC,SARF,YAQEA,SARF;AAAA,QASEC,uBATF,YASEA,uBATF;AAAA,QAUEC,cAVF,YAUEA,cAVF;AAAA,QAWEC,eAXF,YAWEA,eAXF;AAAA,QAYEC,eAZF,YAYEA,eAZF;AAAA,QAcEC,cAdF,YAcEA,cAdF;AAAA,QAeEC,aAfF,YAeEA,aAfF;AAAA,QAgBEC,aAhBF,YAgBEA,aAhBF;AAAA,QAiBEC,cAjBF,YAiBEA,cAjBF;AAAA,QAkBEC,eAlBF,YAkBEA,eAlBF;AAAA,QAmBEC,kBAnBF,YAmBEA,kBAnBF;AAAA,QAoBEC,mBApBF,YAoBEA,mBApBF;AAAA,QAqBEC,UArBF,YAqBEA,UArBF;AAAA,QAsBEC,cAtBF,YAsBEA,cAtBF;AAAA,QAuBEC,MAvBF,YAuBEA,MAvBF;AAAA,QAwBEC,OAxBF,YAwBEA,OAxBF;;AA2BAjC,QAAIkC,MAAJ,CAAW;AACTX,oCADS;AAETC,kCAFS;AAGTC,kCAHS;AAITC,oCAJS;AAKTC,sCALS;AAMTC,4CANS;AAOTC,8CAPS;AAQTC,4BARS;AASTC,oCATS;AAUTC,oBAVS;AAWTC;AAXS,KAAX;AAcA,WAAO;AACL3B,UADK;AAELC,YAFK;AAGLI,8BAHK;AAILwB,gBAAU,EAJL;AAKLvB,4BALK;AAMLC,gCANK;AAOLO,oCAPK;AAQLN,4BARK;AASLC,sCATK;AAULC,0BAVK;AAWLC,4BAXK;AAYLC,0BAZK;AAaLC,sDAbK;AAcLE,sCAdK;AAeLC;AAfK,KAAP;AAeE;AAxEyB,CAAb,CAAlB;;;;;;;;;AAZQ;AAlCJc,oHAkCI;AAlCCC;AAkCD,MANcC;AAxBfC,UAwBe;AAvBf,2CAuBe;AAtBfC,0BAsBe;AArBfC,kCAqBe;AApBfC,iBAAWA,MAoBI;AAnBf,iBAAWJ,aAmBI;AAnBJ;AAmBI;AAjBwBK,oBACtC;AAAA;AAAA;AAAA;AAAA,eAcgBC;AAZbL,4BAYa;AAXbM,oCAWa;AAVbC,kBAAU,OAUG;AATbC,8CASa;AARb,0CAQa;AAPbC,4CAOa;AANbC,wDAMa;AALbC,8CAKa;AAJbC,4CAIa;AAHb,uEAGa;AAFbC,qCAEa;AADbC,mCACa;AADNC;AACM,4KAdhB;AAAA;;GAgBc,EAKZ,CALY,EAKZ,mEALY,MAKZV;AAJOL,UAIP;AAJkBH;AAIlB,MADKmB;AAFSnB;AAET,KADOoB,iFACP,EADO,CACP,EACL,IALY,EAMd","names":["_sfc_main","defineComponent","name","components","ElTreeNode","FixedSizeList","props","treeProps","emits","treeEmits","setup","ctx","provide","ROOT_TREE_INJECTION_KEY","instance","getCurrentInstance","useLocale","t","ns","useNamespace","useTree","emit","flattenTree","isNotEmpty","toggleExpand","isExpanded","isIndeterminate","isChecked","isDisabled","isCurrent","isForceHiddenExpandIcon","toggleCheckbox","handleNodeClick","handleNodeCheck","getCurrentNode","getCurrentKey","setCurrentKey","getCheckedKeys","getCheckedNodes","getHalfCheckedKeys","getHalfCheckedNodes","setChecked","setCheckedKeys","filter","setData","expose","itemSize","class","role","_ctx","key","data","total","height","default","openBlock","style","node","expanded","checked","indeterminate","disabled","current","onClick","onToggle","onCheck","createElementVNode","toDisplayString"],"sources":["../../../../../../packages/components/tree-v2/src/tree.vue"],"sourcesContent":["<template>\n  <div\n    :class=\"[ns.b(), { [ns.m('highlight-current')]: highlightCurrent }]\"\n    role=\"tree\"\n  >\n    <fixed-size-list\n      v-if=\"isNotEmpty\"\n      :class-name=\"ns.b('virtual-list')\"\n      :data=\"flattenTree\"\n      :total=\"flattenTree.length\"\n      :height=\"height\"\n      :item-size=\"itemSize\"\n      :perf-mode=\"perfMode\"\n    >\n      <template #default=\"{ data, index, style }\">\n        <el-tree-node\n          :key=\"data[index].key\"\n          :style=\"style\"\n          :node=\"data[index]\"\n          :expanded=\"isExpanded(data[index])\"\n          :show-checkbox=\"showCheckbox\"\n          :checked=\"isChecked(data[index])\"\n          :indeterminate=\"isIndeterminate(data[index])\"\n          :disabled=\"isDisabled(data[index])\"\n          :current=\"isCurrent(data[index])\"\n          :hidden-expand-icon=\"isForceHiddenExpandIcon(data[index])\"\n          @click=\"handleNodeClick\"\n          @toggle=\"toggleExpand\"\n          @check=\"handleNodeCheck\"\n        ></el-tree-node>\n      </template>\n    </fixed-size-list>\n    <div v-else :class=\"ns.e('empty-block')\">\n      <span :class=\"ns.e('empty-text')\">{{\n        emptyText ?? t('el.tree.emptyText')\n      }}</span>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, getCurrentInstance, provide } from 'vue'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { FixedSizeList } from '@element-plus/components/virtual-list'\nimport { useTree } from './composables/useTree'\nimport ElTreeNode from './tree-node.vue'\nimport { ROOT_TREE_INJECTION_KEY, treeEmits, treeProps } from './virtual-tree'\nimport type { TreeProps } from './types'\n\nexport default defineComponent({\n  name: 'ElTreeV2',\n  components: {\n    ElTreeNode,\n    FixedSizeList,\n  },\n  props: treeProps,\n  emits: treeEmits,\n  setup(props: TreeProps, ctx) {\n    provide(ROOT_TREE_INJECTION_KEY, {\n      ctx,\n      props,\n      instance: getCurrentInstance(),\n    })\n    const { t } = useLocale()\n    const ns = useNamespace('tree')\n    const {\n      flattenTree,\n      isNotEmpty,\n      toggleExpand,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      toggleCheckbox,\n      handleNodeClick,\n      handleNodeCheck,\n      // expose\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData,\n    } = useTree(props, ctx.emit)\n\n    ctx.expose({\n      getCurrentNode,\n      getCurrentKey,\n      setCurrentKey,\n      getCheckedKeys,\n      getCheckedNodes,\n      getHalfCheckedKeys,\n      getHalfCheckedNodes,\n      setChecked,\n      setCheckedKeys,\n      filter,\n      setData,\n    })\n\n    return {\n      t,\n      ns,\n      flattenTree,\n      itemSize: 26,\n      isNotEmpty,\n      toggleExpand,\n      toggleCheckbox,\n      isExpanded,\n      isIndeterminate,\n      isChecked,\n      isDisabled,\n      isCurrent,\n      isForceHiddenExpandIcon,\n      handleNodeClick,\n      handleNodeCheck,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}