{"ast":null,"code":"import \"core-js/modules/es.array.join.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport '../../../utils/index.mjs';\nimport { isNumber } from '@vueuse/core';\nvar hiddenTextarea = void 0;\nvar HIDDEN_STYLE = \"\\n  height:0 !important;\\n  visibility:hidden !important;\\n  overflow:hidden !important;\\n  position:absolute !important;\\n  z-index:-1000 !important;\\n  top:0 !important;\\n  right:0 !important;\\n\";\nvar CONTEXT_STYLE = [\"letter-spacing\", \"line-height\", \"padding-top\", \"padding-bottom\", \"font-family\", \"font-weight\", \"font-size\", \"text-rendering\", \"text-transform\", \"width\", \"text-indent\", \"padding-left\", \"padding-right\", \"border-width\", \"box-sizing\"];\n\nfunction calculateNodeStyling(targetElement) {\n  var style = window.getComputedStyle(targetElement);\n  var boxSizing = style.getPropertyValue(\"box-sizing\");\n  var paddingSize = parseFloat(style.getPropertyValue(\"padding-bottom\")) + parseFloat(style.getPropertyValue(\"padding-top\"));\n  var borderSize = parseFloat(style.getPropertyValue(\"border-bottom-width\")) + parseFloat(style.getPropertyValue(\"border-top-width\"));\n  var contextStyle = CONTEXT_STYLE.map(function (name) {\n    return \"\".concat(name, \":\").concat(style.getPropertyValue(name));\n  }).join(\";\");\n  return {\n    contextStyle: contextStyle,\n    paddingSize: paddingSize,\n    borderSize: borderSize,\n    boxSizing: boxSizing\n  };\n}\n\nfunction calcTextareaHeight(targetElement) {\n  var minRows = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 1;\n  var maxRows = arguments.length > 2 ? arguments[2] : undefined;\n\n  var _a;\n\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement(\"textarea\");\n    document.body.appendChild(hiddenTextarea);\n  }\n\n  var _calculateNodeStyling = calculateNodeStyling(targetElement),\n      paddingSize = _calculateNodeStyling.paddingSize,\n      borderSize = _calculateNodeStyling.borderSize,\n      boxSizing = _calculateNodeStyling.boxSizing,\n      contextStyle = _calculateNodeStyling.contextStyle;\n\n  hiddenTextarea.setAttribute(\"style\", \"\".concat(contextStyle, \";\").concat(HIDDEN_STYLE));\n  hiddenTextarea.value = targetElement.value || targetElement.placeholder || \"\";\n  var height = hiddenTextarea.scrollHeight;\n  var result = {};\n\n  if (boxSizing === \"border-box\") {\n    height = height + borderSize;\n  } else if (boxSizing === \"content-box\") {\n    height = height - paddingSize;\n  }\n\n  hiddenTextarea.value = \"\";\n  var singleRowHeight = hiddenTextarea.scrollHeight - paddingSize;\n\n  if (isNumber(minRows)) {\n    var minHeight = singleRowHeight * minRows;\n\n    if (boxSizing === \"border-box\") {\n      minHeight = minHeight + paddingSize + borderSize;\n    }\n\n    height = Math.max(minHeight, height);\n    result.minHeight = \"\".concat(minHeight, \"px\");\n  }\n\n  if (isNumber(maxRows)) {\n    var maxHeight = singleRowHeight * maxRows;\n\n    if (boxSizing === \"border-box\") {\n      maxHeight = maxHeight + paddingSize + borderSize;\n    }\n\n    height = Math.min(maxHeight, height);\n  }\n\n  result.height = \"\".concat(height, \"px\");\n  (_a = hiddenTextarea.parentNode) == null ? void 0 : _a.removeChild(hiddenTextarea);\n  hiddenTextarea = void 0;\n  return result;\n}\n\nexport { calcTextareaHeight };","map":{"version":3,"mappings":"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","names":["hiddenTextarea","HIDDEN_STYLE","CONTEXT_STYLE","calculateNodeStyling","targetElement","style","window","getComputedStyle","boxSizing","getPropertyValue","paddingSize","parseFloat","borderSize","contextStyle","map","name","join","calcTextareaHeight","minRows","maxRows","_a","document","createElement","body","appendChild","setAttribute","value","placeholder","height","scrollHeight","result","singleRowHeight","isNumber","minHeight","Math","max","maxHeight","min","parentNode","removeChild"],"sources":["../../../../../../packages/components/input/src/calc-textarea-height.ts"],"sourcesContent":["import { isNumber } from '@element-plus/utils'\n\nlet hiddenTextarea: HTMLTextAreaElement | undefined = undefined\n\nconst HIDDEN_STYLE = `\n  height:0 !important;\n  visibility:hidden !important;\n  overflow:hidden !important;\n  position:absolute !important;\n  z-index:-1000 !important;\n  top:0 !important;\n  right:0 !important;\n`\n\nconst CONTEXT_STYLE = [\n  'letter-spacing',\n  'line-height',\n  'padding-top',\n  'padding-bottom',\n  'font-family',\n  'font-weight',\n  'font-size',\n  'text-rendering',\n  'text-transform',\n  'width',\n  'text-indent',\n  'padding-left',\n  'padding-right',\n  'border-width',\n  'box-sizing',\n]\n\ntype NodeStyle = {\n  contextStyle: string\n  boxSizing: string\n  paddingSize: number\n  borderSize: number\n}\n\ntype TextAreaHeight = {\n  height: string\n  minHeight?: string\n}\n\nfunction calculateNodeStyling(targetElement: Element): NodeStyle {\n  const style = window.getComputedStyle(targetElement)\n\n  const boxSizing = style.getPropertyValue('box-sizing')\n\n  const paddingSize =\n    parseFloat(style.getPropertyValue('padding-bottom')) +\n    parseFloat(style.getPropertyValue('padding-top'))\n\n  const borderSize =\n    parseFloat(style.getPropertyValue('border-bottom-width')) +\n    parseFloat(style.getPropertyValue('border-top-width'))\n\n  const contextStyle = CONTEXT_STYLE.map(\n    (name) => `${name}:${style.getPropertyValue(name)}`\n  ).join(';')\n\n  return { contextStyle, paddingSize, borderSize, boxSizing }\n}\n\nexport function calcTextareaHeight(\n  targetElement: HTMLTextAreaElement,\n  minRows = 1,\n  maxRows?: number\n): TextAreaHeight {\n  if (!hiddenTextarea) {\n    hiddenTextarea = document.createElement('textarea')\n    document.body.appendChild(hiddenTextarea)\n  }\n\n  const { paddingSize, borderSize, boxSizing, contextStyle } =\n    calculateNodeStyling(targetElement)\n\n  hiddenTextarea.setAttribute('style', `${contextStyle};${HIDDEN_STYLE}`)\n  hiddenTextarea.value = targetElement.value || targetElement.placeholder || ''\n\n  let height = hiddenTextarea.scrollHeight\n  const result = {} as TextAreaHeight\n\n  if (boxSizing === 'border-box') {\n    height = height + borderSize\n  } else if (boxSizing === 'content-box') {\n    height = height - paddingSize\n  }\n\n  hiddenTextarea.value = ''\n  const singleRowHeight = hiddenTextarea.scrollHeight - paddingSize\n\n  if (isNumber(minRows)) {\n    let minHeight = singleRowHeight * minRows\n    if (boxSizing === 'border-box') {\n      minHeight = minHeight + paddingSize + borderSize\n    }\n    height = Math.max(minHeight, height)\n    result.minHeight = `${minHeight}px`\n  }\n  if (isNumber(maxRows)) {\n    let maxHeight = singleRowHeight * maxRows\n    if (boxSizing === 'border-box') {\n      maxHeight = maxHeight + paddingSize + borderSize\n    }\n    height = Math.min(maxHeight, height)\n  }\n  result.height = `${height}px`\n  hiddenTextarea.parentNode?.removeChild(hiddenTextarea)\n  hiddenTextarea = undefined\n\n  return result\n}\n"]},"metadata":{},"sourceType":"module"}