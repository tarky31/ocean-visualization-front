{"ast":null,"code":"import _asyncToGenerator from \"D:/MyFile/WebCode/ocean-vis/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _defineProperty from \"D:/MyFile/WebCode/ocean-vis/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { defineComponent, getCurrentInstance, inject, ref, watch, nextTick, openBlock, createElementBlock, normalizeClass, normalizeStyle } from 'vue';\nimport { capitalize } from '@vue/shared';\nimport { useResizeObserver } from '@vueuse/core';\nimport '../../../tokens/index.mjs';\nimport '../../../utils/index.mjs';\nimport { tabBar } from './tab-bar.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { tabsRootContextKey } from '../../../tokens/tabs.mjs';\nimport { throwError } from '../../../utils/error.mjs';\nvar COMPONENT_NAME = \"ElTabBar\";\n\nvar _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  props: tabBar,\n  setup: function setup(props) {\n    var instance = getCurrentInstance();\n    var rootTabs = inject(tabsRootContextKey);\n    if (!rootTabs) throwError(COMPONENT_NAME, \"must use with ElTabs\");\n    var bar$ = ref();\n    var barStyle = ref();\n\n    var getBarStyle = function getBarStyle() {\n      var _ref;\n\n      var offset = 0;\n      var tabSize = 0;\n      var sizeName = [\"top\", \"bottom\"].includes(rootTabs.props.tabPosition) ? \"width\" : \"height\";\n      var sizeDir = sizeName === \"width\" ? \"x\" : \"y\";\n      props.tabs.every(function (tab) {\n        var _a, _b, _c, _d;\n\n        var $el = (_b = (_a = instance.parent) == null ? void 0 : _a.refs) == null ? void 0 : _b[\"tab-\".concat(tab.paneName)];\n        if (!$el) return false;\n\n        if (!tab.active) {\n          return true;\n        }\n\n        tabSize = $el[\"client\".concat(capitalize(sizeName))];\n        var position = sizeDir === \"x\" ? \"left\" : \"top\";\n        offset = $el.getBoundingClientRect()[position] - ((_d = (_c = $el.parentElement) == null ? void 0 : _c.getBoundingClientRect()[position]) != null ? _d : 0);\n        var tabStyles = window.getComputedStyle($el);\n\n        if (sizeName === \"width\") {\n          if (props.tabs.length > 1) {\n            tabSize -= parseFloat(tabStyles.paddingLeft) + parseFloat(tabStyles.paddingRight);\n          }\n\n          offset += parseFloat(tabStyles.paddingLeft);\n        }\n\n        return false;\n      });\n      return _ref = {}, _defineProperty(_ref, sizeName, \"\".concat(tabSize, \"px\")), _defineProperty(_ref, \"transform\", \"translate\".concat(capitalize(sizeDir), \"(\").concat(offset, \"px)\")), _ref;\n    };\n\n    var update = function update() {\n      return barStyle.value = getBarStyle();\n    };\n\n    watch(function () {\n      return props.tabs;\n    }, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee() {\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return nextTick();\n\n            case 2:\n              update();\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    })), {\n      immediate: true\n    });\n    useResizeObserver(bar$, function () {\n      return update();\n    });\n    return {\n      bar$: bar$,\n      rootTabs: rootTabs,\n      barStyle: barStyle,\n      update: update\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"bar$\",\n    class: normalizeClass([\"el-tabs__active-bar\", \"is-\".concat(_ctx.rootTabs.props.tabPosition)]),\n    style: normalizeStyle(_ctx.barStyle)\n  }, null, 6);\n}\n\nvar TabBar = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { TabBar as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;AAwBA,IAAMA,iBAAiB,UAAvB;;AACA,IAAKC,YAAaC,gBAAa;AAC7BC,QAAMH,cADuB;AAE7BI,SAAOC,MAFsB;AAI7BC,OAJ6B,iBAIvBF,KAJuB,EAIhB;AACX,QAAMG,WAAWC,oBAAjB;AACA,QAAMC,WAAWC,OAAOC,kBAAP,CAAjB;AACA,QAAI,CAACF,QAAL,EAAeG,WAAWZ,cAAX,EAA2B,sBAA3B;AAEf,QAAMa,OAAOC,KAAb;AACA,QAAMC,WAAWD,KAAjB;;AAEA,QAAME,cAAc,SAAdA,WAAc,GAAqB;AAAA;;AACvC,UAAIC,SAAS,CAAb;AACA,UAAIC,UAAU,CAAd;AAEA,UAAMC,WAAW,CAAC,KAAD,EAAQ,QAAR,EAAkBC,QAAlB,CAA2BX,SAASL,KAAT,CAAeiB,WAA1C,IACb,OADa,GAEb,QAFJ;AAGA,UAAMC,UAAUH,aAAa,OAAb,GAAuB,GAAvB,GAA6B,GAA7C;AAEAf,YAAMmB,IAAN,CAAWC,KAAX,CAAiB,UAACC,GAAD,EAAS;AACxB,gBAAMC,EAAN,EAAYC,EAAZ,EAAYC,EAAZ;;AAGA;AAAU,kBAEV,OAAS,KAAT;;AACE,iBAAOC,MAAP,EAAO;AAAA;AAGT;;AACAX;AACA;AAGAD,cAAM,qJAAN;AAEA;;AACE,oBAAU,KAAK,OAAf,EAAwB;AACtB,kCACa,CADb,EACa;AACUC;AAEzB;;AAA+BD;AAEjC;;AAAO;AAGT,OA5BA;AA4BO,8CAELE,QAFK,YAELD,OAFK,gEAEyCY,mBAFzC,cAEyCb,MAFzC;AAMT,KA3CA;;AA6CA,QACEc,MAAM,YAANA,MAAM;AAAA;AAAA,KADR;;AAGIC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACAC,UADA;;AAAA;AACAF;;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKJ;AAAAG;AAAA,KALI;AAOJC;AAAA;AAAA;AAAO;AAELtB,gBAFK;AAGLJ,wBAHK;AAILM,wBAJK;AAILgB;AAJK;AAIL;AAvEyB,CAAb,CAAlB;;2CApBSK;AAAA,SAHDC;AACHvB,eADGuB;AAEHC,WAAKC,eAAE,sEAAFA,CAFFF;AAEIG;AAFJH,aAGC","names":["COMPONENT_NAME","_sfc_main","defineComponent","name","props","tabBar","setup","instance","getCurrentInstance","rootTabs","inject","tabsRootContextKey","throwError","bar$","ref","barStyle","getBarStyle","offset","tabSize","sizeName","includes","tabPosition","sizeDir","tabs","every","tab","_b","_c","_d","active","capitalize","update","watch","nextTick","immediate","useResizeObserver","$setup","_openBlock","class","_normalizeClass","style"],"sources":["../../../../../../packages/components/tabs/src/tab-bar.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"bar$\"\n    :class=\"['el-tabs__active-bar', `is-${rootTabs.props.tabPosition}`]\"\n    :style=\"barStyle\"\n  ></div>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  inject,\n  getCurrentInstance,\n  watch,\n  nextTick,\n  ref,\n} from 'vue'\nimport { capitalize } from '@vue/shared'\nimport { useResizeObserver } from '@vueuse/core'\nimport { tabsRootContextKey } from '@element-plus/tokens'\nimport { throwError } from '@element-plus/utils'\nimport { tabBar } from './tab-bar'\n\nimport type { CSSProperties } from 'vue'\n\nconst COMPONENT_NAME = 'ElTabBar'\nexport default defineComponent({\n  name: COMPONENT_NAME,\n  props: tabBar,\n\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const rootTabs = inject(tabsRootContextKey)\n    if (!rootTabs) throwError(COMPONENT_NAME, 'must use with ElTabs')\n\n    const bar$ = ref<HTMLDivElement>()\n    const barStyle = ref()\n\n    const getBarStyle = (): CSSProperties => {\n      let offset = 0\n      let tabSize = 0\n\n      const sizeName = ['top', 'bottom'].includes(rootTabs.props.tabPosition)\n        ? 'width'\n        : 'height'\n      const sizeDir = sizeName === 'width' ? 'x' : 'y'\n\n      props.tabs.every((tab) => {\n        const $el = instance.parent?.refs?.[\n          `tab-${tab.paneName}`\n        ] as HTMLElement\n        if (!$el) return false\n\n        if (!tab.active) {\n          return true\n        }\n\n        tabSize = $el[`client${capitalize(sizeName)}`]\n        const position = sizeDir === 'x' ? 'left' : 'top'\n        offset =\n          $el.getBoundingClientRect()[position] -\n          ($el.parentElement?.getBoundingClientRect()[position] ?? 0)\n        const tabStyles = window.getComputedStyle($el)\n\n        if (sizeName === 'width') {\n          if (props.tabs.length > 1) {\n            tabSize -=\n              parseFloat(tabStyles.paddingLeft) +\n              parseFloat(tabStyles.paddingRight)\n          }\n          offset += parseFloat(tabStyles.paddingLeft)\n        }\n        return false\n      })\n\n      return {\n        [sizeName]: `${tabSize}px`,\n        transform: `translate${capitalize(sizeDir)}(${offset}px)`,\n      }\n    }\n\n    const update = () => (barStyle.value = getBarStyle())\n\n    watch(\n      () => props.tabs,\n      async () => {\n        await nextTick()\n        update()\n      },\n      { immediate: true }\n    )\n    useResizeObserver(bar$, () => update())\n\n    return {\n      bar$,\n      rootTabs,\n      barStyle,\n      update,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}