{"ast":null,"code":"import _objectSpread from \"D:/MyFile/WebCode/ocean-vis/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport { defineComponent, computed, openBlock, createElementBlock, mergeProps, unref, renderSlot } from 'vue';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { iconProps } from './icon.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { isUndefined } from '../../../utils/types.mjs';\nimport { addUnit } from '../../../utils/vue/style.mjs';\nvar __default__ = {\n  name: \"ElIcon\",\n  inheritAttrs: false\n};\n\nvar _sfc_main = /* @__PURE__ */defineComponent(_objectSpread(_objectSpread({}, __default__), {}, {\n  props: iconProps,\n  setup: function setup(__props) {\n    var props = __props;\n    var ns = useNamespace(\"icon\");\n    var style = computed(function () {\n      if (!props.size && !props.color) return {};\n      return {\n        fontSize: isUndefined(props.size) ? void 0 : addUnit(props.size),\n        \"--color\": props.color\n      };\n    });\n    return function (_ctx, _cache) {\n      return openBlock(), createElementBlock(\"i\", mergeProps({\n        class: unref(ns).b(),\n        style: unref(style)\n      }, _ctx.$attrs), [renderSlot(_ctx.$slots, \"default\")], 16);\n    };\n  }\n}));\n\nexport { _sfc_main as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AAkBA;AAEA;;;;;;KAAA","names":[],"sources":["../../../../../../packages/components/icon/src/icon.vue"],"sourcesContent":["<template>\n  <i :class=\"ns.b()\" :style=\"style\" v-bind=\"$attrs\">\n    <slot></slot>\n  </i>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed } from 'vue'\nimport { isUndefined, addUnit } from '@element-plus/utils'\nimport { useNamespace } from '@element-plus/hooks'\nimport { iconProps } from './icon'\nimport type { CSSProperties } from 'vue'\n\ndefineOptions({\n  name: 'ElIcon',\n  inheritAttrs: false,\n})\nconst props = defineProps(iconProps)\nconst ns = useNamespace('icon')\n\nconst style = computed<CSSProperties>(() => {\n  if (!props.size && !props.color) return {}\n\n  return {\n    fontSize: isUndefined(props.size) ? undefined : addUnit(props.size),\n    '--color': props.color,\n  }\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}