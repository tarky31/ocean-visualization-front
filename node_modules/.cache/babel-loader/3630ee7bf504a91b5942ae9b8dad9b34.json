{"ast":null,"code":"import \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport { defineComponent, inject, ref, unref, nextTick, computed, provide, resolveComponent, openBlock, createBlock, withCtx, renderSlot } from 'vue';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElCollectionItem, ROVING_FOCUS_COLLECTION_INJECTION_KEY as COLLECTION_INJECTION_KEY } from './roving-focus-group.mjs';\nimport { ROVING_FOCUS_GROUP_INJECTION_KEY, ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY } from './tokens.mjs';\nimport { getFocusIntent, reorderArray, focusFirst } from './utils.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useId } from '../../../hooks/use-id/index.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\n\nvar _sfc_main = defineComponent({\n  components: {\n    ElRovingFocusCollectionItem: ElCollectionItem\n  },\n  props: {\n    focusable: {\n      type: Boolean,\n      default: true\n    },\n    active: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: [\"mousedown\", \"focus\", \"keydown\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n\n    var _inject = inject(ROVING_FOCUS_GROUP_INJECTION_KEY, void 0),\n        currentTabbedId = _inject.currentTabbedId,\n        loop = _inject.loop,\n        onItemFocus = _inject.onItemFocus,\n        onItemShiftTab = _inject.onItemShiftTab;\n\n    var _inject2 = inject(COLLECTION_INJECTION_KEY, void 0),\n        getItems = _inject2.getItems;\n\n    var id = useId();\n    var rovingFocusGroupItemRef = ref(null);\n    var handleMousedown = composeEventHandlers(function (e) {\n      emit(\"mousedown\", e);\n    }, function (e) {\n      if (!props.focusable) {\n        e.preventDefault();\n      } else {\n        onItemFocus(unref(id));\n      }\n    });\n    var handleFocus = composeEventHandlers(function (e) {\n      emit(\"focus\", e);\n    }, function () {\n      onItemFocus(unref(id));\n    });\n    var handleKeydown = composeEventHandlers(function (e) {\n      emit(\"keydown\", e);\n    }, function (e) {\n      var key = e.key,\n          shiftKey = e.shiftKey,\n          target = e.target,\n          currentTarget = e.currentTarget;\n\n      if (key === EVENT_CODE.tab && shiftKey) {\n        onItemShiftTab();\n        return;\n      }\n\n      if (target !== currentTarget) return;\n      var focusIntent = getFocusIntent(e);\n\n      if (focusIntent) {\n        e.preventDefault();\n        var items = getItems().filter(function (item) {\n          return item.focusable;\n        });\n        var elements = items.map(function (item) {\n          return item.ref;\n        });\n\n        switch (focusIntent) {\n          case \"last\":\n            {\n              elements.reverse();\n              break;\n            }\n\n          case \"prev\":\n          case \"next\":\n            {\n              if (focusIntent === \"prev\") {\n                elements.reverse();\n              }\n\n              var currentIdx = elements.indexOf(currentTarget);\n              elements = loop.value ? reorderArray(elements, currentIdx + 1) : elements.slice(currentIdx + 1);\n              break;\n            }\n\n          default:\n            {\n              break;\n            }\n        }\n\n        nextTick(function () {\n          focusFirst(elements);\n        });\n      }\n    });\n    var isCurrentTab = computed(function () {\n      return currentTabbedId.value === unref(id);\n    });\n    provide(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, {\n      rovingFocusGroupItemRef: rovingFocusGroupItemRef,\n      tabIndex: computed(function () {\n        return unref(isCurrentTab) ? 0 : -1;\n      }),\n      handleMousedown: handleMousedown,\n      handleFocus: handleFocus,\n      handleKeydown: handleKeydown\n    });\n    return {\n      id: id,\n      handleKeydown: handleKeydown,\n      handleFocus: handleFocus,\n      handleMousedown: handleMousedown\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_roving_focus_collection_item = resolveComponent(\"el-roving-focus-collection-item\");\n\n  return openBlock(), createBlock(_component_el_roving_focus_collection_item, {\n    id: _ctx.id,\n    focusable: _ctx.focusable,\n    active: _ctx.active\n  }, {\n    default: withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"default\")];\n    }),\n    _: 3\n  }, 8, [\"id\", \"focusable\", \"active\"]);\n}\n\nvar ElRovingFocusItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { ElRovingFocusItem as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","components","ElRovingFocusCollectionItem","props","focusable","type","Boolean","default","active","emits","setup","emit","inject","ROVING_FOCUS_GROUP_INJECTION_KEY","currentTabbedId","loop","onItemFocus","onItemShiftTab","ROVING_FOCUS_COLLECTION_INJECTION_KEY","getItems","id","useId","rovingFocusGroupItemRef","ref","handleMousedown","composeEventHandlers","e","preventDefault","unref","handleFocus","handleKeydown","key","shiftKey","target","currentTarget","EVENT_CODE","tab","focusIntent","getFocusIntent","items","filter","item","elements","map","reverse","currentIdx","indexOf","value","reorderArray","slice","nextTick","focusFirst","isCurrentTab","computed","provide","ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY","tabIndex","_createBlock","_component_el_roving_focus_collection_item","_ctx","_renderSlot","_"],"sources":["../../../../../../packages/components/roving-focus-group/src/roving-focus-item.vue"],"sourcesContent":["<template>\n  <el-roving-focus-collection-item\n    :id=\"id\"\n    :focusable=\"focusable\"\n    :active=\"active\"\n  >\n    <slot />\n  </el-roving-focus-collection-item>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  ref,\n  unref,\n  nextTick,\n  provide,\n} from 'vue'\nimport { useId } from '@element-plus/hooks'\nimport { composeEventHandlers } from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport {\n  ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n  ElCollectionItem as ElRovingFocusCollectionItem,\n} from './roving-focus-group'\nimport {\n  ROVING_FOCUS_GROUP_INJECTION_KEY,\n  ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY,\n} from './tokens'\nimport { getFocusIntent, reorderArray, focusFirst } from './utils'\n\nexport default defineComponent({\n  components: {\n    ElRovingFocusCollectionItem,\n  },\n  props: {\n    focusable: {\n      type: Boolean,\n      default: true,\n    },\n    active: {\n      type: Boolean,\n      default: false,\n    },\n  },\n  emits: ['mousedown', 'focus', 'keydown'],\n  setup(props, { emit }) {\n    const { currentTabbedId, loop, onItemFocus, onItemShiftTab } = inject(\n      ROVING_FOCUS_GROUP_INJECTION_KEY,\n      undefined\n    )!\n\n    const { getItems } = inject(\n      ROVING_FOCUS_COLLECTION_INJECTION_KEY,\n      undefined\n    )!\n\n    const id = useId()\n    const rovingFocusGroupItemRef = ref<HTMLElement | null>(null)\n\n    const handleMousedown = composeEventHandlers(\n      (e: Event) => {\n        emit('mousedown', e)\n      },\n      (e) => {\n        if (!props.focusable) {\n          e.preventDefault()\n        } else {\n          onItemFocus(unref(id))\n        }\n      }\n    )\n\n    const handleFocus = composeEventHandlers(\n      (e: Event) => {\n        emit('focus', e)\n      },\n      () => {\n        onItemFocus(unref(id))\n      }\n    )\n\n    const handleKeydown = composeEventHandlers(\n      (e: Event) => {\n        emit('keydown', e)\n      },\n      (e) => {\n        const { key, shiftKey, target, currentTarget } = e as KeyboardEvent\n        if (key === EVENT_CODE.tab && shiftKey) {\n          onItemShiftTab()\n          return\n        }\n        if (target !== currentTarget) return\n        const focusIntent = getFocusIntent(e as KeyboardEvent)\n\n        if (focusIntent) {\n          e.preventDefault()\n          const items = getItems<typeof props>().filter(\n            (item) => item.focusable\n          )\n\n          let elements = items.map((item) => item.ref!)\n\n          switch (focusIntent) {\n            case 'last': {\n              elements.reverse()\n              break\n            }\n            case 'prev':\n            case 'next': {\n              if (focusIntent === 'prev') {\n                elements.reverse()\n              }\n              const currentIdx = elements.indexOf(currentTarget as HTMLElement)\n              elements = loop.value\n                ? reorderArray(elements, currentIdx + 1)\n                : elements.slice(currentIdx + 1)\n              break\n            }\n            default: {\n              break\n            }\n          }\n\n          nextTick(() => {\n            focusFirst(elements)\n          })\n        }\n      }\n    )\n\n    const isCurrentTab = computed(() => currentTabbedId.value === unref(id))\n\n    provide(ROVING_FOCUS_GROUP_ITEM_INJECTION_KEY, {\n      rovingFocusGroupItemRef,\n      tabIndex: computed(() => (unref(isCurrentTab) ? 0 : -1)),\n      handleMousedown,\n      handleFocus,\n      handleKeydown,\n    })\n\n    return {\n      id,\n      handleKeydown,\n      handleFocus,\n      handleMousedown,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}