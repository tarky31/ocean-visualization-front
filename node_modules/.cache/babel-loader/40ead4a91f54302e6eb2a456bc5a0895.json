{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/web.url.js\";\nimport \"core-js/modules/web.url-search-params.js\";\nimport \"core-js/modules/es.function.name.js\";\nimport { defineComponent, inject, computed, provide, getCurrentInstance, onBeforeUnmount, ref, h } from 'vue';\nimport { NOOP } from '@vue/shared';\nimport '../../../tokens/index.mjs';\nimport upload from './ajax.mjs';\nimport UploadList from './upload-list.mjs';\nimport Upload from './upload.mjs';\nimport useHandlers from './useHandlers.mjs';\nimport { elFormKey } from '../../../tokens/form.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElUpload\",\n  components: {\n    Upload: Upload,\n    UploadList: UploadList\n  },\n  props: {\n    action: {\n      type: String,\n      required: true\n    },\n    headers: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    method: {\n      type: String,\n      default: \"post\"\n    },\n    data: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    multiple: {\n      type: Boolean,\n      default: false\n    },\n    name: {\n      type: String,\n      default: \"file\"\n    },\n    drag: {\n      type: Boolean,\n      default: false\n    },\n    withCredentials: Boolean,\n    showFileList: {\n      type: Boolean,\n      default: true\n    },\n    accept: {\n      type: String,\n      default: \"\"\n    },\n    type: {\n      type: String,\n      default: \"select\"\n    },\n    beforeUpload: {\n      type: Function,\n      default: NOOP\n    },\n    beforeRemove: {\n      type: Function,\n      default: NOOP\n    },\n    onRemove: {\n      type: Function,\n      default: NOOP\n    },\n    onChange: {\n      type: Function,\n      default: NOOP\n    },\n    onPreview: {\n      type: Function,\n      default: NOOP\n    },\n    onSuccess: {\n      type: Function,\n      default: NOOP\n    },\n    onProgress: {\n      type: Function,\n      default: NOOP\n    },\n    onError: {\n      type: Function,\n      default: NOOP\n    },\n    fileList: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    autoUpload: {\n      type: Boolean,\n      default: true\n    },\n    listType: {\n      type: String,\n      default: \"text\"\n    },\n    httpRequest: {\n      type: Function,\n      default: upload\n    },\n    disabled: Boolean,\n    limit: {\n      type: Number,\n      default: null\n    },\n    onExceed: {\n      type: Function,\n      default: function _default() {\n        return NOOP;\n      }\n    }\n  },\n  setup: function setup(props) {\n    var elForm = inject(elFormKey, {});\n    var uploadDisabled = computed(function () {\n      return props.disabled || elForm.disabled;\n    });\n\n    var _useHandlers = useHandlers(props),\n        abort = _useHandlers.abort,\n        clearFiles = _useHandlers.clearFiles,\n        handleError = _useHandlers.handleError,\n        handleProgress = _useHandlers.handleProgress,\n        handleStart = _useHandlers.handleStart,\n        handleSuccess = _useHandlers.handleSuccess,\n        handleRemove = _useHandlers.handleRemove,\n        submit = _useHandlers.submit,\n        uploadRef = _useHandlers.uploadRef,\n        uploadFiles = _useHandlers.uploadFiles;\n\n    provide(\"uploader\", getCurrentInstance());\n    onBeforeUnmount(function () {\n      uploadFiles.value.forEach(function (file) {\n        if (file.url && file.url.indexOf(\"blob:\") === 0) {\n          URL.revokeObjectURL(file.url);\n        }\n      });\n    });\n    return {\n      abort: abort,\n      dragOver: ref(false),\n      draging: ref(false),\n      handleError: handleError,\n      handleProgress: handleProgress,\n      handleRemove: handleRemove,\n      handleStart: handleStart,\n      handleSuccess: handleSuccess,\n      uploadDisabled: uploadDisabled,\n      uploadFiles: uploadFiles,\n      uploadRef: uploadRef,\n      submit: submit,\n      clearFiles: clearFiles\n    };\n  },\n  render: function render() {\n    var _this = this;\n\n    var _a, _b;\n\n    var uploadList;\n\n    if (this.showFileList) {\n      uploadList = h(UploadList, {\n        disabled: this.uploadDisabled,\n        listType: this.listType,\n        files: this.uploadFiles,\n        onRemove: this.handleRemove,\n        handlePreview: this.onPreview\n      }, this.$slots.file ? {\n        default: function _default(props) {\n          return _this.$slots.file({\n            file: props.file\n          });\n        }\n      } : null);\n    } else {\n      uploadList = null;\n    }\n\n    var uploadData = {\n      type: this.type,\n      drag: this.drag,\n      action: this.action,\n      multiple: this.multiple,\n      \"before-upload\": this.beforeUpload,\n      \"with-credentials\": this.withCredentials,\n      headers: this.headers,\n      method: this.method,\n      name: this.name,\n      data: this.data,\n      accept: this.accept,\n      fileList: this.uploadFiles,\n      autoUpload: this.autoUpload,\n      listType: this.listType,\n      disabled: this.uploadDisabled,\n      limit: this.limit,\n      \"on-exceed\": this.onExceed,\n      \"on-start\": this.handleStart,\n      \"on-progress\": this.handleProgress,\n      \"on-success\": this.handleSuccess,\n      \"on-error\": this.handleError,\n      \"on-preview\": this.onPreview,\n      \"on-remove\": this.handleRemove,\n      \"http-request\": this.httpRequest,\n      ref: \"uploadRef\"\n    };\n    var trigger = this.$slots.trigger || this.$slots.default;\n    var uploadComponent = h(Upload, uploadData, {\n      default: function _default() {\n        return trigger == null ? void 0 : trigger();\n      }\n    });\n    return h(\"div\", [this.listType === \"picture-card\" ? uploadList : null, this.$slots.trigger ? [uploadComponent, this.$slots.default()] : uploadComponent, (_b = (_a = this.$slots).tip) == null ? void 0 : _b.call(_a), this.listType !== \"picture-card\" ? uploadList : null]);\n  }\n});\n\nexport { _sfc_main as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","Upload","UploadList","props","action","type","String","required","headers","Object","default","method","data","multiple","Boolean","drag","withCredentials","showFileList","accept","beforeUpload","Function","NOOP","beforeRemove","onRemove","onChange","onPreview","onSuccess","onProgress","onError","fileList","Array","autoUpload","listType","httpRequest","ajax","disabled","limit","Number","onExceed","setup","elForm","inject","elFormKey","uploadDisabled","computed","useHandlers","abort","clearFiles","handleError","handleProgress","handleStart","handleSuccess","handleRemove","submit","uploadRef","uploadFiles","provide","getCurrentInstance","onBeforeUnmount","value","forEach","file","url","indexOf","URL","revokeObjectURL","dragOver","ref","draging","render","_a","_b","uploadList","files","handlePreview","trigger","h","$slots","uploadComponent"],"sources":["../../../../../../packages/components/upload/src/index.vue"],"sourcesContent":["<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  h,\n  getCurrentInstance,\n  inject,\n  ref,\n  provide,\n  onBeforeUnmount,\n} from 'vue'\nimport { NOOP } from '@vue/shared'\nimport { elFormKey } from '@element-plus/tokens'\n\nimport ajax from './ajax'\nimport UploadList from './upload-list.vue'\nimport Upload from './upload.vue'\nimport useHandlers from './useHandlers'\n\nimport type { PropType } from 'vue'\nimport type { ElFormContext } from '@element-plus/tokens'\nimport type { Nullable } from '@element-plus/utils'\nimport type {\n  ListType,\n  UploadFile,\n  FileHandler,\n  FileResultHandler,\n} from './upload.type'\n\ntype PFileHandler<T> = PropType<FileHandler<T>>\ntype PFileResultHandler<T = any> = PropType<FileResultHandler<T>>\n\nexport default defineComponent({\n  name: 'ElUpload',\n  components: {\n    Upload,\n    UploadList,\n  },\n  props: {\n    action: {\n      type: String,\n      required: true,\n    },\n    headers: {\n      type: Object as PropType<Headers>,\n      default: () => ({}),\n    },\n    method: {\n      type: String,\n      default: 'post',\n    },\n    data: {\n      type: Object,\n      default: () => ({}),\n    },\n    multiple: {\n      type: Boolean,\n      default: false,\n    },\n    name: {\n      type: String,\n      default: 'file',\n    },\n    drag: {\n      type: Boolean,\n      default: false,\n    },\n    withCredentials: Boolean,\n    showFileList: {\n      type: Boolean,\n      default: true,\n    },\n    accept: {\n      type: String,\n      default: '',\n    },\n    type: {\n      type: String,\n      default: 'select',\n    },\n    beforeUpload: {\n      type: Function as PFileHandler<void>,\n      default: NOOP,\n    },\n    beforeRemove: {\n      type: Function as PFileHandler<boolean>,\n      default: NOOP,\n    },\n    onRemove: {\n      type: Function as PFileHandler<void>,\n      default: NOOP,\n    },\n    onChange: {\n      type: Function as PFileHandler<void>,\n      default: NOOP,\n    },\n    onPreview: {\n      type: Function as PropType<() => void>,\n      default: NOOP,\n    },\n    onSuccess: {\n      type: Function as PFileResultHandler,\n      default: NOOP,\n    },\n    onProgress: {\n      type: Function as PFileResultHandler<ProgressEvent>,\n      default: NOOP,\n    },\n    onError: {\n      type: Function as PFileResultHandler<Error>,\n      default: NOOP,\n    },\n    fileList: {\n      type: Array as PropType<UploadFile[]>,\n      default: () => {\n        return [] as UploadFile[]\n      },\n    },\n    autoUpload: {\n      type: Boolean,\n      default: true,\n    },\n    listType: {\n      type: String as PropType<ListType>,\n      default: 'text' as ListType, // text,picture,picture-card\n    },\n    httpRequest: {\n      type: Function,\n      default: ajax,\n    },\n    disabled: Boolean,\n    limit: {\n      type: Number as PropType<Nullable<number>>,\n      default: null,\n    },\n    onExceed: {\n      type: Function,\n      default: () => NOOP,\n    },\n  },\n  setup(props) {\n    const elForm = inject(elFormKey, {} as ElFormContext)\n\n    const uploadDisabled = computed(() => {\n      return props.disabled || elForm.disabled\n    })\n\n    const {\n      abort,\n      clearFiles,\n      handleError,\n      handleProgress,\n      handleStart,\n      handleSuccess,\n      handleRemove,\n      submit,\n      uploadRef,\n      uploadFiles,\n    } = useHandlers(props)\n\n    provide('uploader', getCurrentInstance())\n\n    onBeforeUnmount(() => {\n      uploadFiles.value.forEach((file) => {\n        if (file.url && file.url.indexOf('blob:') === 0) {\n          URL.revokeObjectURL(file.url)\n        }\n      })\n    })\n\n    return {\n      abort,\n      dragOver: ref(false),\n      draging: ref(false),\n      handleError,\n      handleProgress,\n      handleRemove,\n      handleStart,\n      handleSuccess,\n      uploadDisabled,\n      uploadFiles,\n      uploadRef,\n      submit,\n      clearFiles,\n    }\n  },\n  render() {\n    let uploadList\n    if (this.showFileList) {\n      uploadList = h(\n        UploadList,\n        {\n          disabled: this.uploadDisabled,\n          listType: this.listType,\n          files: this.uploadFiles,\n          onRemove: this.handleRemove,\n          handlePreview: this.onPreview,\n        },\n        this.$slots.file\n          ? {\n              default: (props: { file: UploadFile }) => {\n                return this.$slots.file({\n                  file: props.file,\n                })\n              },\n            }\n          : null\n      )\n    } else {\n      uploadList = null\n    }\n\n    const uploadData = {\n      type: this.type,\n      drag: this.drag,\n      action: this.action,\n      multiple: this.multiple,\n      'before-upload': this.beforeUpload,\n      'with-credentials': this.withCredentials,\n      headers: this.headers,\n      method: this.method,\n      name: this.name,\n      data: this.data,\n      accept: this.accept,\n      fileList: this.uploadFiles,\n      autoUpload: this.autoUpload,\n      listType: this.listType,\n      disabled: this.uploadDisabled,\n      limit: this.limit,\n      'on-exceed': this.onExceed,\n      'on-start': this.handleStart,\n      'on-progress': this.handleProgress,\n      'on-success': this.handleSuccess,\n      'on-error': this.handleError,\n      'on-preview': this.onPreview,\n      'on-remove': this.handleRemove,\n      'http-request': this.httpRequest,\n      ref: 'uploadRef',\n    }\n    const trigger = this.$slots.trigger || this.$slots.default\n    const uploadComponent = h(Upload, uploadData, {\n      default: () => trigger?.(),\n    })\n    return h('div', [\n      this.listType === 'picture-card' ? uploadList : null,\n      this.$slots.trigger\n        ? [uploadComponent, this.$slots.default()]\n        : uploadComponent,\n      this.$slots.tip?.(),\n      this.listType !== 'picture-card' ? uploadList : null,\n    ])\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}