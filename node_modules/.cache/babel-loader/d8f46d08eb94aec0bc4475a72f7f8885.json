{"ast":null,"code":"import \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { defineComponent, getCurrentInstance, inject, ref, computed, resolveComponent, openBlock, createBlock, withCtx, createElementBlock, Fragment, renderList, createVNode, createTextVNode, toDisplayString, createCommentVNode } from 'vue';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { Loading } from '@element-plus/icons-vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport ElCascaderNode from './node2.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { generateId } from '../../../utils/rand.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElCascaderMenu\",\n  components: {\n    Loading: Loading,\n    ElIcon: ElIcon,\n    ElScrollbar: ElScrollbar,\n    ElCascaderNode: ElCascaderNode\n  },\n  props: {\n    nodes: {\n      type: Array,\n      required: true\n    },\n    index: {\n      type: Number,\n      required: true\n    }\n  },\n  setup: function setup(props) {\n    var instance = getCurrentInstance();\n\n    var _useLocale = useLocale(),\n        t = _useLocale.t;\n\n    var id = generateId();\n    var activeNode = null;\n    var hoverTimer = null;\n    var panel = inject(CASCADER_PANEL_INJECTION_KEY);\n    var hoverZone = ref(null);\n    var isEmpty = computed(function () {\n      return !props.nodes.length;\n    });\n    var isLoading = computed(function () {\n      return !panel.initialLoaded;\n    });\n    var menuId = computed(function () {\n      return \"cascader-menu-\".concat(id, \"-\").concat(props.index);\n    });\n\n    var handleExpand = function handleExpand(e) {\n      activeNode = e.target;\n    };\n\n    var handleMouseMove = function handleMouseMove(e) {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return;\n\n      if (activeNode.contains(e.target)) {\n        clearHoverTimer();\n        var el = instance.vnode.el;\n\n        var _el$getBoundingClient = el.getBoundingClientRect(),\n            left = _el$getBoundingClient.left;\n\n        var offsetWidth = el.offsetWidth,\n            offsetHeight = el.offsetHeight;\n        var startX = e.clientX - left;\n        var top = activeNode.offsetTop;\n        var bottom = top + activeNode.offsetHeight;\n        hoverZone.value.innerHTML = \"\\n          <path style=\\\"pointer-events: auto;\\\" fill=\\\"transparent\\\" d=\\\"M\".concat(startX, \" \").concat(top, \" L\").concat(offsetWidth, \" 0 V\").concat(top, \" Z\\\" />\\n          <path style=\\\"pointer-events: auto;\\\" fill=\\\"transparent\\\" d=\\\"M\").concat(startX, \" \").concat(bottom, \" L\").concat(offsetWidth, \" \").concat(offsetHeight, \" V\").concat(bottom, \" Z\\\" />\\n        \");\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(clearHoverZone, panel.config.hoverThreshold);\n      }\n    };\n\n    var clearHoverTimer = function clearHoverTimer() {\n      if (!hoverTimer) return;\n      clearTimeout(hoverTimer);\n      hoverTimer = null;\n    };\n\n    var clearHoverZone = function clearHoverZone() {\n      if (!hoverZone.value) return;\n      hoverZone.value.innerHTML = \"\";\n      clearHoverTimer();\n    };\n\n    return {\n      panel: panel,\n      hoverZone: hoverZone,\n      isEmpty: isEmpty,\n      isLoading: isLoading,\n      menuId: menuId,\n      t: t,\n      handleExpand: handleExpand,\n      handleMouseMove: handleMouseMove,\n      clearHoverZone: clearHoverZone\n    };\n  }\n});\n\nvar _hoisted_1 = {\n  key: 0,\n  class: \"el-cascader-menu__empty-text\"\n};\nvar _hoisted_2 = {\n  key: 1,\n  class: \"el-cascader-menu__empty-text\"\n};\nvar _hoisted_3 = {\n  key: 2,\n  ref: \"hoverZone\",\n  class: \"el-cascader-menu__hover-zone\"\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_cascader_node = resolveComponent(\"el-cascader-node\");\n\n  var _component_loading = resolveComponent(\"loading\");\n\n  var _component_el_icon = resolveComponent(\"el-icon\");\n\n  var _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n\n  return openBlock(), createBlock(_component_el_scrollbar, {\n    key: _ctx.menuId,\n    tag: \"ul\",\n    role: \"menu\",\n    class: \"el-cascader-menu\",\n    \"wrap-class\": \"el-cascader-menu__wrap\",\n    \"view-class\": [\"el-cascader-menu__list\", _ctx.isEmpty && \"is-empty\"],\n    onMousemove: _ctx.handleMouseMove,\n    onMouseleave: _ctx.clearHoverZone\n  }, {\n    default: withCtx(function () {\n      var _a;\n\n      return [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.nodes, function (node) {\n        return openBlock(), createBlock(_component_el_cascader_node, {\n          key: node.uid,\n          node: node,\n          \"menu-id\": _ctx.menuId,\n          onExpand: _ctx.handleExpand\n        }, null, 8, [\"node\", \"menu-id\", \"onExpand\"]);\n      }), 128)), _ctx.isLoading ? (openBlock(), createElementBlock(\"div\", _hoisted_1, [createVNode(_component_el_icon, {\n        size: \"14\",\n        class: \"is-loading\"\n      }, {\n        default: withCtx(function () {\n          return [createVNode(_component_loading)];\n        }),\n        _: 1\n      }), createTextVNode(\" \" + toDisplayString(_ctx.t(\"el.cascader.loading\")), 1)])) : _ctx.isEmpty ? (openBlock(), createElementBlock(\"div\", _hoisted_2, toDisplayString(_ctx.t(\"el.cascader.noData\")), 1)) : ((_a = _ctx.panel) == null ? void 0 : _a.isHoverMenu) ? (openBlock(), createElementBlock(\"svg\", _hoisted_3, null, 512)) : createCommentVNode(\"v-if\", true)];\n    }),\n    _: 1\n  }, 8, [\"view-class\", \"onMousemove\", \"onMouseleave\"]);\n}\n\nvar ElCascaderMenu = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { ElCascaderMenu as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","Loading","ElIcon","ElScrollbar","ElCascaderNode","props","nodes","type","Array","required","index","Number","setup","instance","getCurrentInstance","useLocale","t","id","generateId","activeNode","hoverTimer","panel","inject","CASCADER_PANEL_INJECTION_KEY","hoverZone","ref","isEmpty","computed","length","isLoading","initialLoaded","menuId","handleExpand","e","target","handleMouseMove","isHoverMenu","value","contains","clearHoverTimer","el","vnode","getBoundingClientRect","left","offsetWidth","offsetHeight","startX","clientX","top","offsetTop","bottom","innerHTML","window","setTimeout","clearHoverZone","config","hoverThreshold","clearTimeout","class","_createBlock","_component_el_scrollbar","key","_ctx","tag","role","onMousemove","onMouseleave","openBlock","createElementBlock","node","_createVNode","size","default"],"sources":["../../../../../../packages/components/cascader-panel/src/menu.vue"],"sourcesContent":["<template>\n  <el-scrollbar\n    :key=\"menuId\"\n    tag=\"ul\"\n    role=\"menu\"\n    class=\"el-cascader-menu\"\n    wrap-class=\"el-cascader-menu__wrap\"\n    :view-class=\"['el-cascader-menu__list', isEmpty && 'is-empty']\"\n    @mousemove=\"handleMouseMove\"\n    @mouseleave=\"clearHoverZone\"\n  >\n    <el-cascader-node\n      v-for=\"node in nodes\"\n      :key=\"node.uid\"\n      :node=\"node\"\n      :menu-id=\"menuId\"\n      @expand=\"handleExpand\"\n    />\n    <div v-if=\"isLoading\" class=\"el-cascader-menu__empty-text\">\n      <el-icon size=\"14\" class=\"is-loading\">\n        <loading />\n      </el-icon>\n      {{ t('el.cascader.loading') }}\n    </div>\n    <div v-else-if=\"isEmpty\" class=\"el-cascader-menu__empty-text\">\n      {{ t('el.cascader.noData') }}\n    </div>\n    <svg\n      v-else-if=\"panel?.isHoverMenu\"\n      ref=\"hoverZone\"\n      class=\"el-cascader-menu__hover-zone\"\n    ></svg>\n  </el-scrollbar>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, getCurrentInstance, inject, ref } from 'vue'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport { useLocale } from '@element-plus/hooks'\nimport { generateId } from '@element-plus/utils'\nimport { Loading } from '@element-plus/icons-vue'\nimport ElIcon from '@element-plus/components/icon'\nimport ElCascaderNode from './node.vue'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\n\nimport type { default as CascaderNode } from './node'\nimport type { PropType } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\n\nexport default defineComponent({\n  name: 'ElCascaderMenu',\n\n  components: {\n    Loading,\n    ElIcon,\n    ElScrollbar,\n    ElCascaderNode,\n  },\n\n  props: {\n    nodes: {\n      type: Array as PropType<CascaderNode[]>,\n      required: true,\n    },\n    index: {\n      type: Number,\n      required: true,\n    },\n  },\n\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const { t } = useLocale()\n    const id = generateId()\n    let activeNode: Nullable<HTMLElement> = null\n    let hoverTimer: Nullable<number> = null\n\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY)!\n\n    const hoverZone = ref<null | SVGSVGElement>(null)\n\n    const isEmpty = computed(() => !props.nodes.length)\n    const isLoading = computed(() => !panel.initialLoaded)\n    const menuId = computed(() => `cascader-menu-${id}-${props.index}`)\n\n    const handleExpand = (e: MouseEvent) => {\n      activeNode = e.target as HTMLElement\n    }\n\n    const handleMouseMove = (e: MouseEvent) => {\n      if (!panel.isHoverMenu || !activeNode || !hoverZone.value) return\n\n      if (activeNode.contains(e.target as HTMLElement)) {\n        clearHoverTimer()\n\n        const el = instance.vnode.el as HTMLElement\n        const { left } = el.getBoundingClientRect()\n        const { offsetWidth, offsetHeight } = el\n        const startX = e.clientX - left\n        const top = activeNode.offsetTop\n        const bottom = top + activeNode.offsetHeight\n\n        hoverZone.value.innerHTML = `\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${top} L${offsetWidth} 0 V${top} Z\" />\n          <path style=\"pointer-events: auto;\" fill=\"transparent\" d=\"M${startX} ${bottom} L${offsetWidth} ${offsetHeight} V${bottom} Z\" />\n        `\n      } else if (!hoverTimer) {\n        hoverTimer = window.setTimeout(\n          clearHoverZone,\n          panel.config.hoverThreshold\n        )\n      }\n    }\n\n    const clearHoverTimer = () => {\n      if (!hoverTimer) return\n      clearTimeout(hoverTimer)\n      hoverTimer = null\n    }\n\n    const clearHoverZone = () => {\n      if (!hoverZone.value) return\n      hoverZone.value.innerHTML = ''\n      clearHoverTimer()\n    }\n    return {\n      panel,\n      hoverZone,\n      isEmpty,\n      isLoading,\n      menuId,\n      t,\n      handleExpand,\n      handleMouseMove,\n      clearHoverZone,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}