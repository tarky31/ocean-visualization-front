{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport { defineComponent, inject, computed, createElementVNode, resolveComponent, openBlock, createElementBlock, normalizeClass, createCommentVNode, createBlock, withModifiers, withCtx, createVNode, Fragment } from 'vue';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElRadio } from '../../radio/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { Check, Loading, ArrowRight } from '@element-plus/icons-vue';\nimport NodeContent from './node-content.mjs';\nimport { CASCADER_PANEL_INJECTION_KEY } from './types.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElCascaderNode\",\n  components: {\n    ElCheckbox: ElCheckbox,\n    ElRadio: ElRadio,\n    NodeContent: NodeContent,\n    ElIcon: ElIcon,\n    Check: Check,\n    Loading: Loading,\n    ArrowRight: ArrowRight\n  },\n  props: {\n    node: {\n      type: Object,\n      required: true\n    },\n    menuId: String\n  },\n  emits: [\"expand\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var panel = inject(CASCADER_PANEL_INJECTION_KEY);\n    var isHoverMenu = computed(function () {\n      return panel.isHoverMenu;\n    });\n    var multiple = computed(function () {\n      return panel.config.multiple;\n    });\n    var checkStrictly = computed(function () {\n      return panel.config.checkStrictly;\n    });\n    var checkedNodeId = computed(function () {\n      var _a;\n\n      return (_a = panel.checkedNodes[0]) == null ? void 0 : _a.uid;\n    });\n    var isDisabled = computed(function () {\n      return props.node.isDisabled;\n    });\n    var isLeaf = computed(function () {\n      return props.node.isLeaf;\n    });\n    var expandable = computed(function () {\n      return checkStrictly.value && !isLeaf.value || !isDisabled.value;\n    });\n    var inExpandingPath = computed(function () {\n      return isInPath(panel.expandingNode);\n    });\n    var inCheckedPath = computed(function () {\n      return checkStrictly.value && panel.checkedNodes.some(isInPath);\n    });\n\n    var isInPath = function isInPath(node) {\n      var _a;\n\n      var _props$node = props.node,\n          level = _props$node.level,\n          uid = _props$node.uid;\n      return ((_a = node == null ? void 0 : node.pathNodes[level - 1]) == null ? void 0 : _a.uid) === uid;\n    };\n\n    var doExpand = function doExpand() {\n      if (inExpandingPath.value) return;\n      panel.expandNode(props.node);\n    };\n\n    var doCheck = function doCheck(checked) {\n      var node = props.node;\n      if (checked === node.checked) return;\n      panel.handleCheckChange(node, checked);\n    };\n\n    var doLoad = function doLoad() {\n      panel.lazyLoad(props.node, function () {\n        if (!isLeaf.value) doExpand();\n      });\n    };\n\n    var handleHoverExpand = function handleHoverExpand(e) {\n      if (!isHoverMenu.value) return;\n      handleExpand();\n      !isLeaf.value && emit(\"expand\", e);\n    };\n\n    var handleExpand = function handleExpand() {\n      var node = props.node;\n      if (!expandable.value || node.loading) return;\n      node.loaded ? doExpand() : doLoad();\n    };\n\n    var handleClick = function handleClick() {\n      if (isHoverMenu.value && !isLeaf.value) return;\n\n      if (isLeaf.value && !isDisabled.value && !checkStrictly.value && !multiple.value) {\n        handleCheck(true);\n      } else {\n        handleExpand();\n      }\n    };\n\n    var handleSelectCheck = function handleSelectCheck(checked) {\n      if (checkStrictly.value) {\n        doCheck(checked);\n\n        if (props.node.loaded) {\n          doExpand();\n        }\n      } else {\n        handleCheck(checked);\n      }\n    };\n\n    var handleCheck = function handleCheck(checked) {\n      if (!props.node.loaded) {\n        doLoad();\n      } else {\n        doCheck(checked);\n        !checkStrictly.value && doExpand();\n      }\n    };\n\n    return {\n      panel: panel,\n      isHoverMenu: isHoverMenu,\n      multiple: multiple,\n      checkStrictly: checkStrictly,\n      checkedNodeId: checkedNodeId,\n      isDisabled: isDisabled,\n      isLeaf: isLeaf,\n      expandable: expandable,\n      inExpandingPath: inExpandingPath,\n      inCheckedPath: inCheckedPath,\n      handleHoverExpand: handleHoverExpand,\n      handleExpand: handleExpand,\n      handleClick: handleClick,\n      handleCheck: handleCheck,\n      handleSelectCheck: handleSelectCheck\n    };\n  }\n});\n\nvar _hoisted_1 = [\"id\", \"aria-haspopup\", \"aria-owns\", \"aria-expanded\", \"tabindex\"];\n\nvar _hoisted_2 = /* @__PURE__ */createElementVNode(\"span\", null, null, -1);\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_checkbox = resolveComponent(\"el-checkbox\");\n\n  var _component_el_radio = resolveComponent(\"el-radio\");\n\n  var _component_check = resolveComponent(\"check\");\n\n  var _component_el_icon = resolveComponent(\"el-icon\");\n\n  var _component_node_content = resolveComponent(\"node-content\");\n\n  var _component_loading = resolveComponent(\"loading\");\n\n  var _component_arrow_right = resolveComponent(\"arrow-right\");\n\n  return openBlock(), createElementBlock(\"li\", {\n    id: \"\".concat(_ctx.menuId, \"-\").concat(_ctx.node.uid),\n    role: \"menuitem\",\n    \"aria-haspopup\": !_ctx.isLeaf,\n    \"aria-owns\": _ctx.isLeaf ? null : _ctx.menuId,\n    \"aria-expanded\": _ctx.inExpandingPath,\n    tabindex: _ctx.expandable ? -1 : void 0,\n    class: normalizeClass([\"el-cascader-node\", _ctx.checkStrictly && \"is-selectable\", _ctx.inExpandingPath && \"in-active-path\", _ctx.inCheckedPath && \"in-checked-path\", _ctx.node.checked && \"is-active\", !_ctx.expandable && \"is-disabled\"]),\n    onMouseenter: _cache[2] || (_cache[2] = function () {\n      return _ctx.handleHoverExpand && _ctx.handleHoverExpand.apply(_ctx, arguments);\n    }),\n    onFocus: _cache[3] || (_cache[3] = function () {\n      return _ctx.handleHoverExpand && _ctx.handleHoverExpand.apply(_ctx, arguments);\n    }),\n    onClick: _cache[4] || (_cache[4] = function () {\n      return _ctx.handleClick && _ctx.handleClick.apply(_ctx, arguments);\n    })\n  }, [createCommentVNode(\" prefix \"), _ctx.multiple ? (openBlock(), createBlock(_component_el_checkbox, {\n    key: 0,\n    \"model-value\": _ctx.node.checked,\n    indeterminate: _ctx.node.indeterminate,\n    disabled: _ctx.isDisabled,\n    onClick: _cache[0] || (_cache[0] = withModifiers(function () {}, [\"stop\"])),\n    \"onUpdate:modelValue\": _ctx.handleSelectCheck\n  }, null, 8, [\"model-value\", \"indeterminate\", \"disabled\", \"onUpdate:modelValue\"])) : _ctx.checkStrictly ? (openBlock(), createBlock(_component_el_radio, {\n    key: 1,\n    \"model-value\": _ctx.checkedNodeId,\n    label: _ctx.node.uid,\n    disabled: _ctx.isDisabled,\n    \"onUpdate:modelValue\": _ctx.handleSelectCheck,\n    onClick: _cache[1] || (_cache[1] = withModifiers(function () {}, [\"stop\"]))\n  }, {\n    default: withCtx(function () {\n      return [createCommentVNode(\"\\n        Add an empty element to avoid render label,\\n        do not use empty fragment here for https://github.com/vuejs/vue-next/pull/2485\\n      \"), _hoisted_2];\n    }),\n    _: 1\n  }, 8, [\"model-value\", \"label\", \"disabled\", \"onUpdate:modelValue\"])) : _ctx.isLeaf && _ctx.node.checked ? (openBlock(), createBlock(_component_el_icon, {\n    key: 2,\n    class: \"el-cascader-node__prefix\"\n  }, {\n    default: withCtx(function () {\n      return [createVNode(_component_check)];\n    }),\n    _: 1\n  })) : createCommentVNode(\"v-if\", true), createCommentVNode(\" content \"), createVNode(_component_node_content), createCommentVNode(\" postfix \"), !_ctx.isLeaf ? (openBlock(), createElementBlock(Fragment, {\n    key: 3\n  }, [_ctx.node.loading ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: \"is-loading el-cascader-node__postfix\"\n  }, {\n    default: withCtx(function () {\n      return [createVNode(_component_loading)];\n    }),\n    _: 1\n  })) : (openBlock(), createBlock(_component_el_icon, {\n    key: 1,\n    class: \"arrow-right el-cascader-node__postfix\"\n  }, {\n    default: withCtx(function () {\n      return [createVNode(_component_arrow_right)];\n    }),\n    _: 1\n  }))], 2112)) : createCommentVNode(\"v-if\", true)], 42, _hoisted_1);\n}\n\nvar ElCascaderNode = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { ElCascaderNode as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElCheckbox","ElRadio","NodeContent","ElIcon","Check","Loading","ArrowRight","props","node","type","Object","required","menuId","String","emits","setup","emit","panel","inject","CASCADER_PANEL_INJECTION_KEY","isHoverMenu","computed","multiple","config","checkStrictly","checkedNodeId","_a","isDisabled","isLeaf","expandable","inExpandingPath","checked","handleCheckChange","doExpand","handleExpand","e","handleCheck","doCheck","doLoad","inCheckedPath","handleHoverExpand","handleClick","_component_node_content","id","role","tabindex","class","_ctx","onMouseenter","onFocus","onClick","createCommentVNode","key","indeterminate","disabled","label","default","_hoisted_2","_","createVNode"],"sources":["../../../../../../packages/components/cascader-panel/src/node.vue"],"sourcesContent":["<template>\n  <li\n    :id=\"`${menuId}-${node.uid}`\"\n    role=\"menuitem\"\n    :aria-haspopup=\"!isLeaf\"\n    :aria-owns=\"isLeaf ? null : menuId\"\n    :aria-expanded=\"inExpandingPath\"\n    :tabindex=\"expandable ? -1 : undefined\"\n    :class=\"[\n      'el-cascader-node',\n      checkStrictly && 'is-selectable',\n      inExpandingPath && 'in-active-path',\n      inCheckedPath && 'in-checked-path',\n      node.checked && 'is-active',\n      !expandable && 'is-disabled',\n    ]\"\n    @mouseenter=\"handleHoverExpand\"\n    @focus=\"handleHoverExpand\"\n    @click=\"handleClick\"\n  >\n    <!-- prefix -->\n    <el-checkbox\n      v-if=\"multiple\"\n      :model-value=\"node.checked\"\n      :indeterminate=\"node.indeterminate\"\n      :disabled=\"isDisabled\"\n      @click.stop\n      @update:model-value=\"handleSelectCheck\"\n    />\n    <el-radio\n      v-else-if=\"checkStrictly\"\n      :model-value=\"checkedNodeId\"\n      :label=\"node.uid\"\n      :disabled=\"isDisabled\"\n      @update:model-value=\"handleSelectCheck\"\n      @click.stop\n    >\n      <!--\n        Add an empty element to avoid render label,\n        do not use empty fragment here for https://github.com/vuejs/vue-next/pull/2485\n      -->\n      <span></span>\n    </el-radio>\n    <el-icon\n      v-else-if=\"isLeaf && node.checked\"\n      class=\"el-cascader-node__prefix\"\n    >\n      <check />\n    </el-icon>\n\n    <!-- content -->\n    <node-content />\n\n    <!-- postfix -->\n    <template v-if=\"!isLeaf\">\n      <el-icon v-if=\"node.loading\" class=\"is-loading el-cascader-node__postfix\">\n        <loading />\n      </el-icon>\n      <el-icon v-else class=\"arrow-right el-cascader-node__postfix\">\n        <arrow-right />\n      </el-icon>\n    </template>\n  </li>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, inject } from 'vue'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport ElRadio from '@element-plus/components/radio'\nimport ElIcon from '@element-plus/components/icon'\nimport { Check, Loading, ArrowRight } from '@element-plus/icons-vue'\nimport NodeContent from './node-content'\nimport { CASCADER_PANEL_INJECTION_KEY } from './types'\nimport type { default as CascaderNode } from './node'\n\nimport type { PropType } from 'vue'\n\nexport default defineComponent({\n  name: 'ElCascaderNode',\n\n  components: {\n    ElCheckbox,\n    ElRadio,\n    NodeContent,\n    ElIcon,\n    Check,\n    Loading,\n    ArrowRight,\n  },\n\n  props: {\n    node: {\n      type: Object as PropType<CascaderNode>,\n      required: true,\n    },\n    menuId: String,\n  },\n\n  emits: ['expand'],\n\n  setup(props, { emit }) {\n    const panel = inject(CASCADER_PANEL_INJECTION_KEY)!\n\n    const isHoverMenu = computed(() => panel.isHoverMenu)\n    const multiple = computed(() => panel.config.multiple)\n    const checkStrictly = computed(() => panel.config.checkStrictly)\n    const checkedNodeId = computed(() => panel.checkedNodes[0]?.uid)\n    const isDisabled = computed(() => props.node.isDisabled)\n    const isLeaf = computed(() => props.node.isLeaf)\n    const expandable = computed(\n      () => (checkStrictly.value && !isLeaf.value) || !isDisabled.value\n    )\n    const inExpandingPath = computed(() => isInPath(panel.expandingNode!))\n    // only useful in check-strictly mode\n    const inCheckedPath = computed(\n      () => checkStrictly.value && panel.checkedNodes.some(isInPath)\n    )\n\n    const isInPath = (node: CascaderNode) => {\n      const { level, uid } = props.node\n      return node?.pathNodes[level - 1]?.uid === uid\n    }\n\n    const doExpand = () => {\n      if (inExpandingPath.value) return\n      panel.expandNode(props.node)\n    }\n\n    const doCheck = (checked: boolean) => {\n      const { node } = props\n      if (checked === node.checked) return\n      panel.handleCheckChange(node, checked)\n    }\n\n    const doLoad = () => {\n      panel.lazyLoad(props.node, () => {\n        if (!isLeaf.value) doExpand()\n      })\n    }\n\n    const handleHoverExpand = (e: Event) => {\n      if (!isHoverMenu.value) return\n      handleExpand()\n      !isLeaf.value && emit('expand', e)\n    }\n\n    const handleExpand = () => {\n      const { node } = props\n      // do not exclude leaf node because the menus expanded might have to reset\n      if (!expandable.value || node.loading) return\n      node.loaded ? doExpand() : doLoad()\n    }\n\n    const handleClick = () => {\n      if (isHoverMenu.value && !isLeaf.value) return\n\n      if (\n        isLeaf.value &&\n        !isDisabled.value &&\n        !checkStrictly.value &&\n        !multiple.value\n      ) {\n        handleCheck(true)\n      } else {\n        handleExpand()\n      }\n    }\n\n    const handleSelectCheck = (checked: boolean) => {\n      if (checkStrictly.value) {\n        doCheck(checked)\n        if (props.node.loaded) {\n          doExpand()\n        }\n      } else {\n        handleCheck(checked)\n      }\n    }\n\n    const handleCheck = (checked: boolean) => {\n      if (!props.node.loaded) {\n        doLoad()\n      } else {\n        doCheck(checked)\n        !checkStrictly.value && doExpand()\n      }\n    }\n\n    return {\n      panel,\n      isHoverMenu,\n      multiple,\n      checkStrictly,\n      checkedNodeId,\n      isDisabled,\n      isLeaf,\n      expandable,\n      inExpandingPath,\n      inCheckedPath,\n      handleHoverExpand,\n      handleExpand,\n      handleClick,\n      handleCheck,\n      handleSelectCheck,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}