{"ast":null,"code":"import { defineComponent, getCurrentInstance, ref, computed, watch, onMounted, openBlock, createElementBlock, normalizeClass, createElementVNode, normalizeStyle } from 'vue';\nimport '../../../../utils/index.mjs';\nimport draggable from '../draggable.mjs';\nimport _export_sfc from '../../../../_virtual/plugin-vue_export-helper.mjs';\nimport { getClientXY } from '../../../../utils/dom/position.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElColorHueSlider\",\n  props: {\n    color: {\n      type: Object,\n      required: true\n    },\n    vertical: Boolean\n  },\n  setup: function setup(props) {\n    var instance = getCurrentInstance();\n    var thumb = ref(null);\n    var bar = ref(null);\n    var thumbLeft = ref(0);\n    var thumbTop = ref(0);\n    var hueValue = computed(function () {\n      return props.color.get(\"hue\");\n    });\n    watch(function () {\n      return hueValue.value;\n    }, function () {\n      update();\n    });\n\n    function handleClick(event) {\n      var target = event.target;\n\n      if (target !== thumb.value) {\n        handleDrag(event);\n      }\n    }\n\n    function handleDrag(event) {\n      var el = instance.vnode.el;\n      var rect = el.getBoundingClientRect();\n\n      var _getClientXY = getClientXY(event),\n          clientX = _getClientXY.clientX,\n          clientY = _getClientXY.clientY;\n\n      var hue;\n\n      if (!props.vertical) {\n        var left = clientX - rect.left;\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2);\n        left = Math.max(thumb.value.offsetWidth / 2, left);\n        hue = Math.round((left - thumb.value.offsetWidth / 2) / (rect.width - thumb.value.offsetWidth) * 360);\n      } else {\n        var top = clientY - rect.top;\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2);\n        top = Math.max(thumb.value.offsetHeight / 2, top);\n        hue = Math.round((top - thumb.value.offsetHeight / 2) / (rect.height - thumb.value.offsetHeight) * 360);\n      }\n\n      props.color.set(\"hue\", hue);\n    }\n\n    function getThumbLeft() {\n      var el = instance.vnode.el;\n      if (props.vertical) return 0;\n      var hue = props.color.get(\"hue\");\n      if (!el) return 0;\n      return Math.round(hue * (el.offsetWidth - thumb.value.offsetWidth / 2) / 360);\n    }\n\n    function getThumbTop() {\n      var el = instance.vnode.el;\n      if (!props.vertical) return 0;\n      var hue = props.color.get(\"hue\");\n      if (!el) return 0;\n      return Math.round(hue * (el.offsetHeight - thumb.value.offsetHeight / 2) / 360);\n    }\n\n    function update() {\n      thumbLeft.value = getThumbLeft();\n      thumbTop.value = getThumbTop();\n    }\n\n    onMounted(function () {\n      var dragConfig = {\n        drag: function drag(event) {\n          handleDrag(event);\n        },\n        end: function end(event) {\n          handleDrag(event);\n        }\n      };\n      draggable(bar.value, dragConfig);\n      draggable(thumb.value, dragConfig);\n      update();\n    });\n    return {\n      bar: bar,\n      thumb: thumb,\n      thumbLeft: thumbLeft,\n      thumbTop: thumbTop,\n      hueValue: hueValue,\n      handleClick: handleClick,\n      update: update\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass([\"el-color-hue-slider\", {\n      \"is-vertical\": _ctx.vertical\n    }])\n  }, [createElementVNode(\"div\", {\n    ref: \"bar\",\n    class: \"el-color-hue-slider__bar\",\n    onClick: _cache[0] || (_cache[0] = function () {\n      return _ctx.handleClick && _ctx.handleClick.apply(_ctx, arguments);\n    })\n  }, null, 512), createElementVNode(\"div\", {\n    ref: \"thumb\",\n    class: \"el-color-hue-slider__thumb\",\n    style: normalizeStyle({\n      left: _ctx.thumbLeft + \"px\",\n      top: _ctx.thumbTop + \"px\"\n    })\n  }, null, 4)], 2);\n}\n\nvar HueSlider = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { HueSlider as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","props","color","type","Object","required","vertical","Boolean","setup","instance","getCurrentInstance","thumb","ref","bar","thumbLeft","thumbTop","hueValue","computed","get","watch","value","update","event","target","handleDrag","el","vnode","rect","getBoundingClientRect","getClientXY","clientX","clientY","hue","left","Math","min","width","offsetWidth","max","round","top","height","offsetHeight","set","getThumbLeft","getThumbTop","onMounted","dragConfig","drag","end","draggable","handleClick","_createElementBlock","class","_normalizeClass","_ctx","_createElementVNode","onClick","_cache","style","_normalizeStyle"],"sources":["../../../../../../../packages/components/color-picker/src/components/hue-slider.vue"],"sourcesContent":["<template>\n  <div class=\"el-color-hue-slider\" :class=\"{ 'is-vertical': vertical }\">\n    <div ref=\"bar\" class=\"el-color-hue-slider__bar\" @click=\"handleClick\"></div>\n    <div\n      ref=\"thumb\"\n      class=\"el-color-hue-slider__thumb\"\n      :style=\"{\n        left: thumbLeft + 'px',\n        top: thumbTop + 'px',\n      }\"\n    ></div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  ref,\n  computed,\n  watch,\n  onMounted,\n  getCurrentInstance,\n  defineComponent,\n} from 'vue'\nimport { getClientXY } from '@element-plus/utils'\nimport draggable from '../draggable'\n\nimport type { PropType } from 'vue'\nimport type Color from '../color'\n\nexport default defineComponent({\n  name: 'ElColorHueSlider',\n\n  props: {\n    color: {\n      type: Object as PropType<Color>,\n      required: true,\n    },\n\n    vertical: Boolean,\n  },\n  setup(props) {\n    const instance = getCurrentInstance()\n    // ref\n    const thumb = ref<HTMLElement | null>(null)\n    const bar = ref<HTMLElement | null>(null)\n    // data\n    const thumbLeft = ref(0)\n    const thumbTop = ref(0)\n    // computed\n    const hueValue = computed(() => {\n      return props.color.get('hue')\n    })\n    // watch\n    watch(\n      () => hueValue.value,\n      () => {\n        update()\n      }\n    )\n\n    // methods\n    function handleClick(event: Event) {\n      const target = event.target\n\n      if (target !== thumb.value) {\n        handleDrag(event)\n      }\n    }\n\n    function handleDrag(event) {\n      const el = instance.vnode.el as HTMLElement\n      const rect = el.getBoundingClientRect()\n      const { clientX, clientY } = getClientXY(event)\n      let hue\n\n      if (!props.vertical) {\n        let left = clientX - rect.left\n        left = Math.min(left, rect.width - thumb.value.offsetWidth / 2)\n        left = Math.max(thumb.value.offsetWidth / 2, left)\n\n        hue = Math.round(\n          ((left - thumb.value.offsetWidth / 2) /\n            (rect.width - thumb.value.offsetWidth)) *\n            360\n        )\n      } else {\n        let top = clientY - rect.top\n\n        top = Math.min(top, rect.height - thumb.value.offsetHeight / 2)\n        top = Math.max(thumb.value.offsetHeight / 2, top)\n        hue = Math.round(\n          ((top - thumb.value.offsetHeight / 2) /\n            (rect.height - thumb.value.offsetHeight)) *\n            360\n        )\n      }\n      props.color.set('hue', hue)\n    }\n\n    function getThumbLeft() {\n      const el = instance.vnode.el\n\n      if (props.vertical) return 0\n      const hue = props.color.get('hue')\n\n      if (!el) return 0\n      return Math.round(\n        (hue * (el.offsetWidth - thumb.value.offsetWidth / 2)) / 360\n      )\n    }\n\n    function getThumbTop() {\n      const el = instance.vnode.el as HTMLElement\n      if (!props.vertical) return 0\n      const hue = props.color.get('hue')\n\n      if (!el) return 0\n      return Math.round(\n        (hue * (el.offsetHeight - thumb.value.offsetHeight / 2)) / 360\n      )\n    }\n\n    function update() {\n      thumbLeft.value = getThumbLeft()\n      thumbTop.value = getThumbTop()\n    }\n\n    // mounded\n    onMounted(() => {\n      const dragConfig = {\n        drag: (event) => {\n          handleDrag(event)\n        },\n        end: (event) => {\n          handleDrag(event)\n        },\n      }\n\n      draggable(bar.value, dragConfig)\n      draggable(thumb.value, dragConfig)\n      update()\n    })\n\n    return {\n      bar,\n      thumb,\n      thumbLeft,\n      thumbTop,\n      hueValue,\n      handleClick,\n      update,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}