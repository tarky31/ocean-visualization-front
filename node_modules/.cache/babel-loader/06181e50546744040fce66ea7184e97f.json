{"ast":null,"code":"import { defineComponent, inject, withDirectives, cloneVNode, Fragment, h, Text, Comment } from 'vue';\nimport { NOOP, isObject } from '@vue/shared';\nimport '../../../hooks/index.mjs';\nimport '../../../utils/index.mjs';\nimport { FORWARD_REF_INJECTION_KEY, useForwardRefDirective } from '../../../hooks/use-forward-ref/index.mjs';\nimport { debugWarn } from '../../../utils/error.mjs';\nvar NAME = \"ElOnlyChild\";\nvar OnlyChild = defineComponent({\n  name: NAME,\n  setup: function setup(_, _ref) {\n    var slots = _ref.slots,\n        attrs = _ref.attrs;\n\n    var _a;\n\n    var forwardRefInjection = inject(FORWARD_REF_INJECTION_KEY, void 0);\n    var forwardRefDirective = useForwardRefDirective((_a = forwardRefInjection.setForwardRef) != null ? _a : NOOP);\n    return function () {\n      var _a2;\n\n      var defaultSlot = (_a2 = slots.default) == null ? void 0 : _a2.call(slots, attrs);\n      if (!defaultSlot) return null;\n\n      if (defaultSlot.length > 1) {\n        debugWarn(NAME, \"ElOnlyChild requires exact only one valid child.\");\n        return null;\n      }\n\n      var firstLegitNode = findFirstLegitChild(defaultSlot);\n\n      if (!firstLegitNode) {\n        debugWarn(NAME, \"no valid child node found\");\n        return null;\n      }\n\n      return withDirectives(cloneVNode(firstLegitNode, attrs), [[forwardRefDirective]]);\n    };\n  }\n});\n\nfunction findFirstLegitChild(node) {\n  if (!node) return null;\n  var children = node;\n\n  for (var i = 0; i < children.length; i++) {\n    var child = children[i];\n\n    if (isObject(child)) {\n      switch (child.type) {\n        case Comment:\n          continue;\n\n        case Text:\n          return wrapTextContent(child);\n\n        case \"svg\":\n          return wrapTextContent(child);\n\n        case Fragment:\n          return findFirstLegitChild(child.children);\n\n        default:\n          return child;\n      }\n    }\n\n    return wrapTextContent(child);\n  }\n\n  return null;\n}\n\nfunction wrapTextContent(s) {\n  return h(\"span\", {\n    class: \"el-only-child__content\"\n  }, [s]);\n}\n\nexport { OnlyChild as default };","map":{"version":3,"mappings":";;;;;;AAgBA,IAAMA,IAAI,GAAG,aAAb;AACK,IAACC,SAAS,GAAGC,eAAe,CAAC;AAChCC,MAAI,EAAEH,IAD0B;AAEhCI,OAFgC,iBAE1BC,CAF0B,QAEL;AAAA,QAAhBC,KAAgB,QAAhBA,KAAgB;AAAA,QAATC,KAAS,QAATA,KAAS;;AACzB,QAAIC,EAAJ;;AACA,QAAMC,mBAAmB,GAAGC,MAAM,CAACC,yBAAD,EAA4B,KAAK,CAAjC,CAAlC;AACA,QAAMC,mBAAmB,GAAGC,sBAAsB,CAAC,CAACL,EAAE,GAAGC,mBAAmB,CAACK,aAA1B,KAA4C,IAA5C,GAAmDN,EAAnD,GAAwDO,IAAzD,CAAlD;AACA,WAAO,YAAM;AACX,UAAIC,GAAJ;;AACA,UAAMC,WAAW,GAAG,CAACD,GAAG,GAAGV,KAAK,CAACY,OAAb,KAAyB,IAAzB,GAAgC,KAAK,CAArC,GAAyCF,GAAG,CAACG,IAAJ,CAASb,KAAT,EAAgBC,KAAhB,CAA7D;AACA,UAAI,CAACU,WAAL,EACE,OAAO,IAAP;;AACF,UAAIA,WAAW,CAACG,MAAZ,GAAqB,CAAzB,EAA4B;AAC1BC,iBAAS,CAACrB,IAAD,EAAO,kDAAP,CAAT;AACA,eAAO,IAAP;AACD;;AACD,UAAMsB,cAAc,GAAGC,mBAAmB,CAACN,WAAD,CAA1C;;AACA,UAAI,CAACK,cAAL,EAAqB;AACnBD,iBAAS,CAACrB,IAAD,EAAO,2BAAP,CAAT;AACA,eAAO,IAAP;AACD;;AACD,aAAOwB,cAAc,CAACC,UAAU,CAACH,cAAD,EAAiBf,KAAjB,CAAX,EAAoC,CACvD,CAACK,mBAAD,CADuD,CAApC,CAArB;AAGD,KAjBD;AAkBD;AAxB+B,CAAD,CAA5B;;AA0BL,SAASW,mBAAT,CAA6BG,IAA7B,EAAmC;AACjC,MAAI,CAACA,IAAL,EACE,OAAO,IAAP;AACF,MAAMC,QAAQ,GAAGD,IAAjB;;AACA,OAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAAQ,CAACP,MAA7B,EAAqCQ,CAAC,EAAtC,EAA0C;AACxC,QAAMC,KAAK,GAAGF,QAAQ,CAACC,CAAD,CAAtB;;AACA,QAAIE,QAAQ,CAACD,KAAD,CAAZ,EAAqB;AACnB,cAAQA,KAAK,CAACE,IAAd;AACE,aAAKC,OAAL;AACE;;AACF,aAAKC,IAAL;AACE,iBAAOC,eAAe,CAACL,KAAD,CAAtB;;AACF,aAAK,KAAL;AACE,iBAAOK,eAAe,CAACL,KAAD,CAAtB;;AACF,aAAKM,QAAL;AACE,iBAAOZ,mBAAmB,CAACM,KAAK,CAACF,QAAP,CAA1B;;AACF;AACE,iBAAOE,KAAP;AAVJ;AAYD;;AACD,WAAOK,eAAe,CAACL,KAAD,CAAtB;AACD;;AACD,SAAO,IAAP;AACD;;AACD,SAASK,eAAT,CAAyBE,CAAzB,EAA4B;AAC1B,SAAOC,CAAC,CAAC,MAAD,EAAS;AAAEC,SAAK,EAAE;AAAT,GAAT,EAA8C,CAACF,CAAD,CAA9C,CAAR;AACF","names":["NAME","OnlyChild","defineComponent","name","setup","_","slots","attrs","_a","forwardRefInjection","inject","FORWARD_REF_INJECTION_KEY","forwardRefDirective","useForwardRefDirective","setForwardRef","NOOP","_a2","defaultSlot","default","call","length","debugWarn","firstLegitNode","findFirstLegitChild","withDirectives","cloneVNode","node","children","i","child","isObject","type","Comment","Text","wrapTextContent","Fragment","s","h","class"],"sources":["../../../../../../packages/components/slot/src/only-child.ts"],"sourcesContent":["import {\n  cloneVNode,\n  Comment,\n  defineComponent,\n  Fragment,\n  h,\n  Text,\n  withDirectives,\n  inject,\n} from 'vue'\nimport { NOOP, isObject } from '@vue/shared'\nimport {\n  FORWARD_REF_INJECTION_KEY,\n  useForwardRefDirective,\n} from '@element-plus/hooks'\nimport { debugWarn } from '@element-plus/utils'\n\nimport type { VNode } from 'vue'\n\nconst NAME = 'ElOnlyChild'\n\nconst OnlyChild = defineComponent({\n  name: NAME,\n  setup(_, { slots, attrs }) {\n    const forwardRefInjection = inject(FORWARD_REF_INJECTION_KEY, undefined)!\n    const forwardRefDirective = useForwardRefDirective(\n      forwardRefInjection.setForwardRef ?? NOOP\n    )\n    return () => {\n      const defaultSlot = slots.default?.(attrs)\n      if (!defaultSlot) return null\n\n      if (defaultSlot.length > 1) {\n        debugWarn(NAME, 'ElOnlyChild requires exact only one valid child.')\n        return null\n      }\n\n      const firstLegitNode = findFirstLegitChild(defaultSlot)\n      if (!firstLegitNode) {\n        debugWarn(NAME, 'no valid child node found')\n        return null\n      }\n\n      return withDirectives(cloneVNode(firstLegitNode, attrs), [\n        [forwardRefDirective],\n      ])\n    }\n  },\n})\n\nfunction findFirstLegitChild(node: VNode[] | undefined) {\n  if (!node) return null\n  const children = node as VNode[]\n  for (let i = 0; i < children.length; i++) {\n    /**\n     * when user uses h(Fragment, [text]) to render plain string,\n     * this switch case just cannot handle, when the value is primitives\n     * we should just return the wrapped string\n     */\n    const child = children[i]\n    if (isObject(child)) {\n      switch (child.type) {\n        case Comment:\n          continue\n        case Text:\n          return wrapTextContent(child)\n        case 'svg':\n          return wrapTextContent(child)\n        case Fragment:\n          return findFirstLegitChild(child.children as VNode[])\n        default:\n          return child\n      }\n    }\n    return wrapTextContent(child)\n  }\n  return null\n}\n\nfunction wrapTextContent(s: string | VNode) {\n  return h('span', { class: 'el-only-child__content' }, [s])\n}\n\nexport default OnlyChild\n"]},"metadata":{},"sourceType":"module"}