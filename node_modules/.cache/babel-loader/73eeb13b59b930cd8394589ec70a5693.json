{"ast":null,"code":"import _defineProperty from \"D:/MyFile/WebCode/ocean-vis/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { defineComponent, getCurrentInstance, ref, computed, watch, resolveComponent, resolveDirective, openBlock, createBlock, withCtx, createElementBlock, createElementVNode, normalizeClass, createVNode, Fragment, renderList, createTextVNode, toDisplayString, withDirectives } from 'vue';\nimport { ElCheckbox } from '../../checkbox/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport { ArrowDown, ArrowUp } from '@element-plus/icons-vue';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElTooltip } from '../../tooltip/index.mjs';\nimport { ElScrollbar } from '../../scrollbar/index.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ClickOutside from '../../../directives/click-outside/index.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar ElCheckboxGroup = ElCheckbox.CheckboxGroup;\n\nvar _sfc_main = defineComponent({\n  name: \"ElTableFilterPanel\",\n  components: {\n    ElCheckbox: ElCheckbox,\n    ElCheckboxGroup: ElCheckboxGroup,\n    ElScrollbar: ElScrollbar,\n    ElTooltip: ElTooltip,\n    ElIcon: ElIcon,\n    ArrowDown: ArrowDown,\n    ArrowUp: ArrowUp\n  },\n  directives: {\n    ClickOutside: ClickOutside\n  },\n  props: {\n    placement: {\n      type: String,\n      default: \"bottom-start\"\n    },\n    store: {\n      type: Object\n    },\n    column: {\n      type: Object\n    },\n    upDataColumn: {\n      type: Function\n    }\n  },\n  setup: function setup(props) {\n    var instance = getCurrentInstance();\n\n    var _useLocale = useLocale(),\n        t = _useLocale.t;\n\n    var ns = useNamespace(\"table-filter\");\n    var parent = instance == null ? void 0 : instance.parent;\n\n    if (!parent.filterPanels.value[props.column.id]) {\n      parent.filterPanels.value[props.column.id] = instance;\n    }\n\n    var tooltipVisible = ref(false);\n    var tooltip = ref(null);\n    var filters = computed(function () {\n      return props.column && props.column.filters;\n    });\n    var filterValue = computed({\n      get: function get() {\n        var _a;\n\n        return (((_a = props.column) == null ? void 0 : _a.filteredValue) || [])[0];\n      },\n      set: function set(value) {\n        if (filteredValue.value) {\n          if (typeof value !== \"undefined\" && value !== null) {\n            filteredValue.value.splice(0, 1, value);\n          } else {\n            filteredValue.value.splice(0, 1);\n          }\n        }\n      }\n    });\n    var filteredValue = computed({\n      get: function get() {\n        if (props.column) {\n          return props.column.filteredValue || [];\n        }\n\n        return [];\n      },\n      set: function set(value) {\n        if (props.column) {\n          props.upDataColumn(\"filteredValue\", value);\n        }\n      }\n    });\n    var multiple = computed(function () {\n      if (props.column) {\n        return props.column.filterMultiple;\n      }\n\n      return true;\n    });\n\n    var isActive = function isActive(filter) {\n      return filter.value === filterValue.value;\n    };\n\n    var hidden = function hidden() {\n      tooltipVisible.value = false;\n    };\n\n    var showFilterPanel = function showFilterPanel(e) {\n      e.stopPropagation();\n      tooltipVisible.value = !tooltipVisible.value;\n    };\n\n    var hideFilterPanel = function hideFilterPanel() {\n      tooltipVisible.value = false;\n    };\n\n    var handleConfirm = function handleConfirm() {\n      confirmFilter(filteredValue.value);\n      hidden();\n    };\n\n    var handleReset = function handleReset() {\n      filteredValue.value = [];\n      confirmFilter(filteredValue.value);\n      hidden();\n    };\n\n    var handleSelect = function handleSelect(_filterValue) {\n      filterValue.value = _filterValue;\n\n      if (typeof _filterValue !== \"undefined\" && _filterValue !== null) {\n        confirmFilter(filteredValue.value);\n      } else {\n        confirmFilter([]);\n      }\n\n      hidden();\n    };\n\n    var confirmFilter = function confirmFilter(filteredValue2) {\n      props.store.commit(\"filterChange\", {\n        column: props.column,\n        values: filteredValue2\n      });\n      props.store.updateAllSelected();\n    };\n\n    watch(tooltipVisible, function (value) {\n      if (props.column) {\n        props.upDataColumn(\"filterOpened\", value);\n      }\n    }, {\n      immediate: true\n    });\n    var popperPaneRef = computed(function () {\n      var _a, _b;\n\n      return (_b = (_a = tooltip.value) == null ? void 0 : _a.popperRef) == null ? void 0 : _b.contentRef;\n    });\n    return {\n      tooltipVisible: tooltipVisible,\n      multiple: multiple,\n      filteredValue: filteredValue,\n      filterValue: filterValue,\n      filters: filters,\n      handleConfirm: handleConfirm,\n      handleReset: handleReset,\n      handleSelect: handleSelect,\n      isActive: isActive,\n      t: t,\n      ns: ns,\n      showFilterPanel: showFilterPanel,\n      hideFilterPanel: hideFilterPanel,\n      popperPaneRef: popperPaneRef,\n      tooltip: tooltip\n    };\n  }\n});\n\nvar _hoisted_1 = {\n  key: 0\n};\nvar _hoisted_2 = [\"disabled\"];\nvar _hoisted_3 = [\"label\", \"onClick\"];\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_checkbox = resolveComponent(\"el-checkbox\");\n\n  var _component_el_checkbox_group = resolveComponent(\"el-checkbox-group\");\n\n  var _component_el_scrollbar = resolveComponent(\"el-scrollbar\");\n\n  var _component_arrow_up = resolveComponent(\"arrow-up\");\n\n  var _component_arrow_down = resolveComponent(\"arrow-down\");\n\n  var _component_el_icon = resolveComponent(\"el-icon\");\n\n  var _component_el_tooltip = resolveComponent(\"el-tooltip\");\n\n  var _directive_click_outside = resolveDirective(\"click-outside\");\n\n  return openBlock(), createBlock(_component_el_tooltip, {\n    ref: \"tooltip\",\n    visible: _ctx.tooltipVisible,\n    \"onUpdate:visible\": _cache[5] || (_cache[5] = function ($event) {\n      return _ctx.tooltipVisible = $event;\n    }),\n    offset: 0,\n    placement: _ctx.placement,\n    \"show-arrow\": false,\n    \"stop-popper-mouse-event\": false,\n    \"append-to-body\": \"\",\n    effect: \"light\",\n    pure: \"\",\n    \"popper-class\": _ctx.ns.b(),\n    persistent: \"\"\n  }, {\n    content: withCtx(function () {\n      return [_ctx.multiple ? (openBlock(), createElementBlock(\"div\", _hoisted_1, [createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.ns.e(\"content\"))\n      }, [createVNode(_component_el_scrollbar, {\n        \"wrap-class\": _ctx.ns.e(\"wrap\")\n      }, {\n        default: withCtx(function () {\n          return [createVNode(_component_el_checkbox_group, {\n            modelValue: _ctx.filteredValue,\n            \"onUpdate:modelValue\": _cache[0] || (_cache[0] = function ($event) {\n              return _ctx.filteredValue = $event;\n            }),\n            class: normalizeClass(_ctx.ns.e(\"checkbox-group\"))\n          }, {\n            default: withCtx(function () {\n              return [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.filters, function (filter) {\n                return openBlock(), createBlock(_component_el_checkbox, {\n                  key: filter.value,\n                  label: filter.value\n                }, {\n                  default: withCtx(function () {\n                    return [createTextVNode(toDisplayString(filter.text), 1)];\n                  }),\n                  _: 2\n                }, 1032, [\"label\"]);\n              }), 128))];\n            }),\n            _: 1\n          }, 8, [\"modelValue\", \"class\"])];\n        }),\n        _: 1\n      }, 8, [\"wrap-class\"])], 2), createElementVNode(\"div\", {\n        class: normalizeClass(_ctx.ns.e(\"bottom\"))\n      }, [createElementVNode(\"button\", {\n        class: normalizeClass(_defineProperty({}, _ctx.ns.is(\"disabled\"), _ctx.filteredValue.length === 0)),\n        disabled: _ctx.filteredValue.length === 0,\n        type: \"button\",\n        onClick: _cache[1] || (_cache[1] = function () {\n          return _ctx.handleConfirm && _ctx.handleConfirm.apply(_ctx, arguments);\n        })\n      }, toDisplayString(_ctx.t(\"el.table.confirmFilter\")), 11, _hoisted_2), createElementVNode(\"button\", {\n        type: \"button\",\n        onClick: _cache[2] || (_cache[2] = function () {\n          return _ctx.handleReset && _ctx.handleReset.apply(_ctx, arguments);\n        })\n      }, toDisplayString(_ctx.t(\"el.table.resetFilter\")), 1)], 2)])) : (openBlock(), createElementBlock(\"ul\", {\n        key: 1,\n        class: normalizeClass(_ctx.ns.e(\"list\"))\n      }, [createElementVNode(\"li\", {\n        class: normalizeClass([_ctx.ns.e(\"list-item\"), _defineProperty({}, _ctx.ns.is(\"active\"), _ctx.filterValue === void 0 || _ctx.filterValue === null)]),\n        onClick: _cache[3] || (_cache[3] = function ($event) {\n          return _ctx.handleSelect(null);\n        })\n      }, toDisplayString(_ctx.t(\"el.table.clearFilter\")), 3), (openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.filters, function (filter) {\n        return openBlock(), createElementBlock(\"li\", {\n          key: filter.value,\n          class: normalizeClass([_ctx.ns.e(\"list-item\"), _ctx.ns.is(\"active\", _ctx.isActive(filter))]),\n          label: filter.value,\n          onClick: function onClick($event) {\n            return _ctx.handleSelect(filter.value);\n          }\n        }, toDisplayString(filter.text), 11, _hoisted_3);\n      }), 128))], 2))];\n    }),\n    default: withCtx(function () {\n      return [withDirectives((openBlock(), createElementBlock(\"span\", {\n        class: normalizeClass([\"\".concat(_ctx.ns.namespace.value, \"-table__column-filter-trigger\"), \"\".concat(_ctx.ns.namespace.value, \"-none-outline\")]),\n        onClick: _cache[4] || (_cache[4] = function () {\n          return _ctx.showFilterPanel && _ctx.showFilterPanel.apply(_ctx, arguments);\n        })\n      }, [createVNode(_component_el_icon, null, {\n        default: withCtx(function () {\n          return [_ctx.column.filterOpened ? (openBlock(), createBlock(_component_arrow_up, {\n            key: 0\n          })) : (openBlock(), createBlock(_component_arrow_down, {\n            key: 1\n          }))];\n        }),\n        _: 1\n      })], 2)), [[_directive_click_outside, _ctx.hideFilterPanel, _ctx.popperPaneRef]])];\n    }),\n    _: 1\n  }, 8, [\"visible\", \"placement\", \"popper-class\"]);\n}\n\nvar FilterPanel = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { FilterPanel as default };","map":{"version":3,"mappings":"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","names":["ElCheckboxGroup","ElCheckbox","CheckboxGroup","_sfc_main","defineComponent","name","components","ElScrollbar","ElTooltip","ElIcon","ArrowDown","ArrowUp","directives","ClickOutside","props","placement","type","String","default","store","Object","column","upDataColumn","Function","setup","instance","getCurrentInstance","useLocale","t","ns","useNamespace","parent","filterPanels","value","id","tooltipVisible","ref","tooltip","filters","computed","filterValue","get","_a","set","filteredValue","isActive","hidden","e","hideFilterPanel","confirmFilter","handleSelect","values","watch","immediate","multiple","handleConfirm","handleReset","showFilterPanel","popperPaneRef","visible","_cache","offset","effect","pure","persistent","content","_openBlock","class","createVNode","openBlock","key","label","_","createElementVNode","_ctx","disabled","onClick","toDisplayString","_hoisted_2","createElementBlock","_toDisplayString","_withCtx","withDirectives","namespace"],"sources":["../../../../../../packages/components/table/src/filter-panel.vue"],"sourcesContent":["<template>\n  <el-tooltip\n    ref=\"tooltip\"\n    v-model:visible=\"tooltipVisible\"\n    :offset=\"0\"\n    :placement=\"placement\"\n    :show-arrow=\"false\"\n    :stop-popper-mouse-event=\"false\"\n    append-to-body\n    effect=\"light\"\n    pure\n    :popper-class=\"ns.b()\"\n    persistent\n  >\n    <template #content>\n      <div v-if=\"multiple\">\n        <div :class=\"ns.e('content')\">\n          <el-scrollbar :wrap-class=\"ns.e('wrap')\">\n            <el-checkbox-group\n              v-model=\"filteredValue\"\n              :class=\"ns.e('checkbox-group')\"\n            >\n              <el-checkbox\n                v-for=\"filter in filters\"\n                :key=\"filter.value\"\n                :label=\"filter.value\"\n              >\n                {{ filter.text }}\n              </el-checkbox>\n            </el-checkbox-group>\n          </el-scrollbar>\n        </div>\n        <div :class=\"ns.e('bottom')\">\n          <button\n            :class=\"{ [ns.is('disabled')]: filteredValue.length === 0 }\"\n            :disabled=\"filteredValue.length === 0\"\n            type=\"button\"\n            @click=\"handleConfirm\"\n          >\n            {{ t('el.table.confirmFilter') }}\n          </button>\n          <button type=\"button\" @click=\"handleReset\">\n            {{ t('el.table.resetFilter') }}\n          </button>\n        </div>\n      </div>\n      <ul v-else :class=\"ns.e('list')\">\n        <li\n          :class=\"[\n            ns.e('list-item'),\n            {\n              [ns.is('active')]:\n                filterValue === undefined || filterValue === null,\n            },\n          ]\"\n          @click=\"handleSelect(null)\"\n        >\n          {{ t('el.table.clearFilter') }}\n        </li>\n        <li\n          v-for=\"filter in filters\"\n          :key=\"filter.value\"\n          :class=\"[ns.e('list-item'), ns.is('active', isActive(filter))]\"\n          :label=\"filter.value\"\n          @click=\"handleSelect(filter.value)\"\n        >\n          {{ filter.text }}\n        </li>\n      </ul>\n    </template>\n    <template #default>\n      <span\n        v-click-outside:[popperPaneRef]=\"hideFilterPanel\"\n        :class=\"[\n          `${ns.namespace.value}-table__column-filter-trigger`,\n          `${ns.namespace.value}-none-outline`,\n        ]\"\n        @click=\"showFilterPanel\"\n      >\n        <el-icon>\n          <arrow-up v-if=\"column.filterOpened\" />\n          <arrow-down v-else />\n        </el-icon>\n      </span>\n    </template>\n  </el-tooltip>\n</template>\n\n<script lang=\"ts\">\nimport { defineComponent, ref, computed, getCurrentInstance, watch } from 'vue'\nimport ElCheckbox from '@element-plus/components/checkbox'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { ArrowDown, ArrowUp } from '@element-plus/icons-vue'\nimport { ClickOutside } from '@element-plus/directives'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport ElTooltip from '@element-plus/components/tooltip'\nimport ElScrollbar from '@element-plus/components/scrollbar'\nimport type { Placement } from '@element-plus/components/popper'\n\nimport type { WritableComputedRef, PropType } from 'vue'\nimport type { TableColumnCtx } from './table-column/defaults'\nimport type { TableHeader } from './table-header'\nimport type { Store } from './store'\n\nconst { CheckboxGroup: ElCheckboxGroup } = ElCheckbox\n\nexport default defineComponent({\n  name: 'ElTableFilterPanel',\n  components: {\n    ElCheckbox,\n    ElCheckboxGroup,\n    ElScrollbar,\n    ElTooltip,\n    ElIcon,\n    ArrowDown,\n    ArrowUp,\n  },\n  directives: { ClickOutside },\n  props: {\n    placement: {\n      type: String as PropType<Placement>,\n      default: 'bottom-start',\n    },\n    store: {\n      type: Object as PropType<Store<unknown>>,\n    },\n    column: {\n      type: Object as PropType<TableColumnCtx<unknown>>,\n    },\n    upDataColumn: {\n      type: Function,\n    },\n  },\n  setup(props) {\n    const instance = getCurrentInstance()\n    const { t } = useLocale()\n    const ns = useNamespace('table-filter')\n    const parent = instance?.parent as TableHeader\n    if (!parent.filterPanels.value[props.column.id]) {\n      parent.filterPanels.value[props.column.id] = instance\n    }\n    const tooltipVisible = ref(false)\n    const tooltip = ref<InstanceType<typeof ElTooltip> | null>(null)\n    const filters = computed(() => {\n      return props.column && props.column.filters\n    })\n    const filterValue = computed({\n      get: () => (props.column?.filteredValue || [])[0],\n      set: (value: string) => {\n        if (filteredValue.value) {\n          if (typeof value !== 'undefined' && value !== null) {\n            filteredValue.value.splice(0, 1, value)\n          } else {\n            filteredValue.value.splice(0, 1)\n          }\n        }\n      },\n    })\n    const filteredValue: WritableComputedRef<unknown[]> = computed({\n      get() {\n        if (props.column) {\n          return props.column.filteredValue || []\n        }\n        return []\n      },\n      set(value: unknown[]) {\n        if (props.column) {\n          props.upDataColumn('filteredValue', value)\n        }\n      },\n    })\n    const multiple = computed(() => {\n      if (props.column) {\n        return props.column.filterMultiple\n      }\n      return true\n    })\n    const isActive = (filter) => {\n      return filter.value === filterValue.value\n    }\n    const hidden = () => {\n      tooltipVisible.value = false\n    }\n    const showFilterPanel = (e: MouseEvent) => {\n      e.stopPropagation()\n      tooltipVisible.value = !tooltipVisible.value\n    }\n    const hideFilterPanel = () => {\n      tooltipVisible.value = false\n    }\n    const handleConfirm = () => {\n      confirmFilter(filteredValue.value)\n      hidden()\n    }\n    const handleReset = () => {\n      filteredValue.value = []\n      confirmFilter(filteredValue.value)\n      hidden()\n    }\n    const handleSelect = (_filterValue?: string) => {\n      filterValue.value = _filterValue\n      if (typeof _filterValue !== 'undefined' && _filterValue !== null) {\n        confirmFilter(filteredValue.value)\n      } else {\n        confirmFilter([])\n      }\n      hidden()\n    }\n    const confirmFilter = (filteredValue: unknown[]) => {\n      props.store.commit('filterChange', {\n        column: props.column,\n        values: filteredValue,\n      })\n      props.store.updateAllSelected()\n    }\n    watch(\n      tooltipVisible,\n      (value) => {\n        // todo\n        if (props.column) {\n          props.upDataColumn('filterOpened', value)\n        }\n      },\n      {\n        immediate: true,\n      }\n    )\n\n    const popperPaneRef = computed(() => {\n      return tooltip.value?.popperRef?.contentRef\n    })\n\n    return {\n      tooltipVisible,\n      multiple,\n      filteredValue,\n      filterValue,\n      filters,\n      handleConfirm,\n      handleReset,\n      handleSelect,\n      isActive,\n      t,\n      ns,\n      showFilterPanel,\n      hideFilterPanel,\n      popperPaneRef,\n      tooltip,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}