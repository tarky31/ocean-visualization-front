{"ast":null,"code":"import _objectSpread from \"D:/MyFile/WebCode/ocean-vis/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport { defineComponent, inject, reactive, ref, computed, watch, h, toRefs, resolveComponent, openBlock, createElementBlock, normalizeClass, createVNode, withCtx, renderSlot, createElementVNode, toDisplayString, createCommentVNode } from 'vue';\nimport { ElButton } from '../../button/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../constants/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ArrowLeft, ArrowRight } from '@element-plus/icons-vue';\nimport TransferPanel from './transfer-panel.mjs';\nimport { useComputedData } from './useComputedData.mjs';\nimport { LEFT_CHECK_CHANGE_EVENT, RIGHT_CHECK_CHANGE_EVENT, useCheckedChange } from './useCheckedChange.mjs';\nimport { useMove } from './useMove.mjs';\nimport './transfer.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { UPDATE_MODEL_EVENT, CHANGE_EVENT } from '../../../constants/event.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nimport { elFormItemKey } from '../../../tokens/form.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElTransfer\",\n  components: {\n    TransferPanel: TransferPanel,\n    ElButton: ElButton,\n    ElIcon: ElIcon,\n    ArrowLeft: ArrowLeft,\n    ArrowRight: ArrowRight\n  },\n  props: {\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    titles: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    buttonTexts: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    filterPlaceholder: {\n      type: String,\n      default: \"\"\n    },\n    filterMethod: Function,\n    leftDefaultChecked: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    rightDefaultChecked: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    renderContent: Function,\n    modelValue: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    format: {\n      type: Object,\n      default: function _default() {\n        return {};\n      }\n    },\n    filterable: {\n      type: Boolean,\n      default: false\n    },\n    props: {\n      type: Object,\n      default: function _default() {\n        return {\n          label: \"label\",\n          key: \"key\",\n          disabled: \"disabled\"\n        };\n      }\n    },\n    targetOrder: {\n      type: String,\n      default: \"original\",\n      validator: function validator(val) {\n        return [\"original\", \"push\", \"unshift\"].includes(val);\n      }\n    }\n  },\n  emits: [UPDATE_MODEL_EVENT, CHANGE_EVENT, LEFT_CHECK_CHANGE_EVENT, RIGHT_CHECK_CHANGE_EVENT],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n        slots = _ref.slots;\n\n    var _useLocale = useLocale(),\n        t = _useLocale.t;\n\n    var ns = useNamespace(\"transfer\");\n    var elFormItem = inject(elFormItemKey, {});\n    var checkedState = reactive({\n      leftChecked: [],\n      rightChecked: []\n    });\n\n    var _useComputedData = useComputedData(props),\n        propsKey = _useComputedData.propsKey,\n        sourceData = _useComputedData.sourceData,\n        targetData = _useComputedData.targetData;\n\n    var _useCheckedChange = useCheckedChange(checkedState, emit),\n        onSourceCheckedChange = _useCheckedChange.onSourceCheckedChange,\n        onTargetCheckedChange = _useCheckedChange.onTargetCheckedChange;\n\n    var _useMove = useMove(props, checkedState, propsKey, emit),\n        addToLeft = _useMove.addToLeft,\n        addToRight = _useMove.addToRight;\n\n    var leftPanel = ref();\n    var rightPanel = ref();\n\n    var clearQuery = function clearQuery(which) {\n      switch (which) {\n        case \"left\":\n          leftPanel.value.query = \"\";\n          break;\n\n        case \"right\":\n          rightPanel.value.query = \"\";\n          break;\n      }\n    };\n\n    var hasButtonTexts = computed(function () {\n      return props.buttonTexts.length === 2;\n    });\n    var leftPanelTitle = computed(function () {\n      return props.titles[0] || t(\"el.transfer.titles.0\");\n    });\n    var rightPanelTitle = computed(function () {\n      return props.titles[1] || t(\"el.transfer.titles.1\");\n    });\n    var panelFilterPlaceholder = computed(function () {\n      return props.filterPlaceholder || t(\"el.transfer.filterPlaceholder\");\n    });\n    watch(function () {\n      return props.modelValue;\n    }, function () {\n      var _a;\n\n      (_a = elFormItem.validate) == null ? void 0 : _a.call(elFormItem, \"change\");\n    });\n    var optionRender = computed(function () {\n      return function (option) {\n        if (props.renderContent) return props.renderContent(h, option);\n        if (slots.default) return slots.default({\n          option: option\n        });\n        return h(\"span\", option[props.props.label] || option[props.props.key]);\n      };\n    });\n    return _objectSpread(_objectSpread({\n      ns: ns,\n      sourceData: sourceData,\n      targetData: targetData,\n      onSourceCheckedChange: onSourceCheckedChange,\n      onTargetCheckedChange: onTargetCheckedChange,\n      addToLeft: addToLeft,\n      addToRight: addToRight\n    }, toRefs(checkedState)), {}, {\n      hasButtonTexts: hasButtonTexts,\n      leftPanelTitle: leftPanelTitle,\n      rightPanelTitle: rightPanelTitle,\n      panelFilterPlaceholder: panelFilterPlaceholder,\n      clearQuery: clearQuery,\n      leftPanel: leftPanel,\n      rightPanel: rightPanel,\n      optionRender: optionRender\n    });\n  }\n});\n\nvar _hoisted_1 = {\n  key: 0\n};\nvar _hoisted_2 = {\n  key: 0\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_transfer_panel = resolveComponent(\"transfer-panel\");\n\n  var _component_arrow_left = resolveComponent(\"arrow-left\");\n\n  var _component_el_icon = resolveComponent(\"el-icon\");\n\n  var _component_el_button = resolveComponent(\"el-button\");\n\n  var _component_arrow_right = resolveComponent(\"arrow-right\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.ns.b())\n  }, [createVNode(_component_transfer_panel, {\n    ref: \"leftPanel\",\n    data: _ctx.sourceData,\n    \"option-render\": _ctx.optionRender,\n    placeholder: _ctx.panelFilterPlaceholder,\n    title: _ctx.leftPanelTitle,\n    filterable: _ctx.filterable,\n    format: _ctx.format,\n    \"filter-method\": _ctx.filterMethod,\n    \"default-checked\": _ctx.leftDefaultChecked,\n    props: _ctx.props,\n    onCheckedChange: _ctx.onSourceCheckedChange\n  }, {\n    default: withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"left-footer\")];\n    }),\n    _: 3\n  }, 8, [\"data\", \"option-render\", \"placeholder\", \"title\", \"filterable\", \"format\", \"filter-method\", \"default-checked\", \"props\", \"onCheckedChange\"]), createElementVNode(\"div\", {\n    class: normalizeClass(_ctx.ns.e(\"buttons\"))\n  }, [createVNode(_component_el_button, {\n    type: \"primary\",\n    class: normalizeClass([_ctx.ns.e(\"button\"), _ctx.ns.is(\"with-texts\", _ctx.hasButtonTexts)]),\n    disabled: _ctx.rightChecked.length === 0,\n    onClick: _ctx.addToLeft\n  }, {\n    default: withCtx(function () {\n      return [createVNode(_component_el_icon, null, {\n        default: withCtx(function () {\n          return [createVNode(_component_arrow_left)];\n        }),\n        _: 1\n      }), _ctx.buttonTexts[0] !== void 0 ? (openBlock(), createElementBlock(\"span\", _hoisted_1, toDisplayString(_ctx.buttonTexts[0]), 1)) : createCommentVNode(\"v-if\", true)];\n    }),\n    _: 1\n  }, 8, [\"class\", \"disabled\", \"onClick\"]), createVNode(_component_el_button, {\n    type: \"primary\",\n    class: normalizeClass([_ctx.ns.e(\"button\"), _ctx.ns.is(\"with-texts\", _ctx.hasButtonTexts)]),\n    disabled: _ctx.leftChecked.length === 0,\n    onClick: _ctx.addToRight\n  }, {\n    default: withCtx(function () {\n      return [_ctx.buttonTexts[1] !== void 0 ? (openBlock(), createElementBlock(\"span\", _hoisted_2, toDisplayString(_ctx.buttonTexts[1]), 1)) : createCommentVNode(\"v-if\", true), createVNode(_component_el_icon, null, {\n        default: withCtx(function () {\n          return [createVNode(_component_arrow_right)];\n        }),\n        _: 1\n      })];\n    }),\n    _: 1\n  }, 8, [\"class\", \"disabled\", \"onClick\"])], 2), createVNode(_component_transfer_panel, {\n    ref: \"rightPanel\",\n    data: _ctx.targetData,\n    \"option-render\": _ctx.optionRender,\n    placeholder: _ctx.panelFilterPlaceholder,\n    filterable: _ctx.filterable,\n    format: _ctx.format,\n    \"filter-method\": _ctx.filterMethod,\n    title: _ctx.rightPanelTitle,\n    \"default-checked\": _ctx.rightDefaultChecked,\n    props: _ctx.props,\n    onCheckedChange: _ctx.onTargetCheckedChange\n  }, {\n    default: withCtx(function () {\n      return [renderSlot(_ctx.$slots, \"right-footer\")];\n    }),\n    _: 3\n  }, 8, [\"data\", \"option-render\", \"placeholder\", \"filterable\", \"format\", \"filter-method\", \"title\", \"default-checked\", \"props\", \"onCheckedChange\"])], 2);\n}\n\nvar Transfer = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Transfer as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;AAwFA,IAAKA,YAAaC,gBAAa;AAC7BC,QAAM,YADuB;AAG7BC,cAAY;AACVC,gCADU;AAEVC,sBAFU;AAGVC,kBAHU;AAIVC,wBAJU;AAKVC;AALU,GAHiB;AAW7BC,SAAO;AACLC,UAAM;AACJC,YAAMC,KADF;AAEJC,eAAS;AAAA,eAAM,EAAN;AAAA;AAFL,KADD;AAKLC,YAAQ;AACNH,YAAMC,KADA;AAENC,eAAS;AAAA,eAAM,EAAN;AAAA;AAFH,KALH;AASLE,iBAAa;AACXJ,YAAMC,KADK;AAEXC,eAAS;AAAA,eAAM,EAAN;AAAA;AAFE,KATR;AAaLG,uBAAmB;AACjBL,YAAMM,MADW;AAEjBJ,eAAS;AAFQ,KAbd;AAiBLK,kBAAcC,QAjBT;AAoBLC,wBAAoB;AAClBT,YAAMC,KADY;AAElBC,eAAS;AAAA,eAAM,EAAN;AAAA;AAFS,KApBf;AAwBLQ,yBAAqB;AACnBV,YAAMC,KADa;AAEnBC,eAAS;AAAA,eAAM,EAAN;AAAA;AAFU,KAxBhB;AA4BLS,mBAAeH,QA5BV;AA6BLI,gBAAY;AACVZ,YAAMC,KADI;AAEVC,eAAS;AAAA,eAAM,EAAN;AAAA;AAFC,KA7BP;AAiCLW,YAAQ;AACNb,YAAMc,MADA;AAENZ,eAAS;AAAA;AAAA;AAFH,KAjCH;AAqCLa,gBAAY;AACVf,YAAMgB,OADI;AAEVd,eAAS;AAFC,KArCP;AAyCLJ,WAAO;AACLE,YAAMc,MADD;AAELZ,eAAS;AAAA;AACPe,iBAAO,OADA;AAEPC,eAAK,KAFE;AAGPC,oBAAU;AAHH;AAAA;AAFJ,KAzCF;AAiDLC,iBAAa;AACXpB,YAAMM,MADK;AAEXJ,eAAS,UAFE;AAGXmB,iBAAW,mBAACC,GAAD,EAAiB;AAC1B,eAAO,CAAC,UAAD,EAAa,MAAb,EAAqB,SAArB,EAAgCC,QAAhC,CAAyCD,GAAzC,CAAP;AAAgD;AAJvC;AAjDR,GAXsB;AAqE7BE,SAAO,CACLC,kBADK,EAELC,YAFK,EAGLC,uBAHK,EAILC,wBAJK,CArEsB;AA4E7BC,OA5E6B,iBA4EvB/B,KA5EuB,QA4EC;AAAA,QAAfgC,IAAe,QAAfA,IAAe;AAAA,QAATC,KAAS,QAATA,KAAS;;AAC5B,qBAAcC,WAAd;AAAA,QAAQC,CAAR,cAAQA,CAAR;;AACA,QAAMC,KAAKC,aAAa,UAAb,CAAX;AACA,QAAMC,aAAaC,OAAOC,aAAP,EAAsB,EAAtB,CAAnB;AAEA,QAAMC,eAAeC,SAAS;AAC5BC,mBAAa,EADe;AAE5BC,oBAAc;AAFc,KAAT,CAArB;;AAKA,2BAA6CC,gBAAgB7C,KAAhB,CAA7C;AAAA,QAAQ8C,QAAR,oBAAQA,QAAR;AAAA,QAAkBC,UAAlB,oBAAkBA,UAAlB;AAAA,QAA8BC,UAA9B,oBAA8BA,UAA9B;;AAEA,4BAAyDC,iBACvDR,YADuD,EAEvDT,IAFuD,CAAzD;AAAA,QAAQkB,qBAAR,qBAAQA,qBAAR;AAAA,QAA+BC,qBAA/B,qBAA+BA,qBAA/B;;AAKA,mBAAkCC,QAChCpD,KADgC,EAEhCyC,YAFgC,EAGhCK,QAHgC,EAIhCd,IAJgC,CAAlC;AAAA,QAAQqB,SAAR,YAAQA,SAAR;AAAA,QAAmBC,UAAnB,YAAmBA,UAAnB;;AAOA,QAAMC,YAAYC,KAAlB;AACA,QAAMC,aAAaD,KAAnB;;AAEA,QAAME,aAAa,SAAbA,UAAa,CAACC,KAAD,EAA6B;AAC9C,cAAQA,KAAR;AAAQ,aACD,MADC;AAEJJ,oBAAUK,KAAV,CAAiBC,KAAjB,GAAyB,EAAzB;AACA;;AAAA,aACG,OADH;AAEAJ,qBAAWG,KAAX,CAAkBC,KAAlB,GAA0B,EAA1B;AACA;AANJ;AAMI,KAPN;;AAWA,QAAMC,iBAAiBC,SAAS;AAAA,aAAM/D,MAAMM,WAAN,CAAkB0D,MAAlB,KAA6B,CAAnC;AAAA,KAAT,CAAvB;AAEA,QAAMC,iBAAiBF,SACrB;AAAA,aAAM/D,MAAMK,MAAN,CAAa,CAAb,KAAmB8B,EAAE,sBAAF,CAAzB;AAAA,KADqB,CAAvB;AAIA,QAAM+B,kBAAkBH,SACtB;AAAA,aAAM/D,MAAMK,MAAN,CAAa,CAAb,KAAmB8B,EAAE,sBAAF,CAAzB;AAAA,KADsB,CAAxB;AAIA,QAAMgC,yBAAyBJ,SAC7B;AAAA,aAAM/D,MAAMO,iBAAN,IAA2B4B,EAAE,+BAAF,CAAjC;AAAA,KAD6B,CAA/B;AAIAiC,UACE;AAAA,aAAMpE,MAAMc,UAAZ;AAAA,KADF,EAEE,YAAM;AACJ;;AAAsB;AAI1B,KAPA;AAQE,QAAIuD;AAAA;AAAqB,iBAAO,cAAP,EAEzB;AAAmB,iBAAO,QAAP,EAEnB,OAASpC;AAAAqC;AAAA,UAAT;AAAiE;AAGnE,OAPM;AAAA,MAAJ;AAOK;AAELlC,YAFK;AAGLW,4BAHK;AAILC,4BAJK;AAKLE,kDALK;AAMLC,kDANK;AAOLE,0BAPK;AAOLC,gBAEU,EAFVA;AAPK,OAWLiB,oBAXK;AAYLT,oCAZK;AAaLG,oCAbK;AAcLC,sCAdK;AAeLC,oDAfK;AAgBLT,4BAhBK;AAiBLH,0BAjBK;AAmBLE,4BAnBK;AAmBLY;AAnBK;AAmBL;AAlKyB,CAAb,CAAlB;;;;;;;;;;;;;;;;;;;;AApCQ;AAnDUG;AAmDV,MApCaC;AAZdjB,oBAYc;AAXdvD,yBAWc;AAVd,sCAUc;AATdyE,4CASc;AARdC,gBAAYV,cAQE;AAPdhD,+BAOc;AANdF,uBAMc;AALd,sCAKc;AAJd,8CAIc;AAHdf,qBAGc;AAHE4E;AAGF;AADiBxE;AAAA;AAAA;;GACjB,iJAoBXyE,0BAnBO;AAAIL;AAAJ,GAmBP,GAVQC;AANTvE,mBAMS;AALTsE,+BAAuB,GAAvB,CAAuBM,CAAvB,CAAuB,QAAvB,GAAuBC,6CAAvB,EAKS;AAJT1D,4CAIS;AAJF2D;AAIE;AAFuB5E;AAAA;AAAVA;AAAA;AAAA,UAAU;;AAAA;AAAA;;GAEvB,wCASAqE;AANTvE,mBAMS;AALTsE,+FAKS;AAJTnD,2CAIS;AAJF2D;AAIE;AAF2D5E;AAAA,cACrE2E,kKADqE,EACnCN;AAAVrE;AAAA;AAAA,UAAU;;AAAA,QADmC;AAAA;;GAE3D,uCACR,MAeWqE;AAZdjB,qBAYc;AAXdvD,yBAWc;AAVd,sCAUc;AATdyE,4CASc;AARdzD,+BAQc;AAPdF,uBAOc;AANd,sCAMc;AALd4D,+BAKc;AAJd,+CAIc;AAHd3E,qBAGc;AAHE4E;AAGF;AADkBxE;AAAA;AAAA;;GAClB,gJACb","names":["_sfc_main","defineComponent","name","components","TransferPanel","ElButton","ElIcon","ArrowLeft","ArrowRight","props","data","type","Array","default","titles","buttonTexts","filterPlaceholder","String","filterMethod","Function","leftDefaultChecked","rightDefaultChecked","renderContent","modelValue","format","Object","filterable","Boolean","label","key","disabled","targetOrder","validator","val","includes","emits","UPDATE_MODEL_EVENT","CHANGE_EVENT","LEFT_CHECK_CHANGE_EVENT","RIGHT_CHECK_CHANGE_EVENT","setup","emit","slots","useLocale","t","ns","useNamespace","elFormItem","inject","elFormItemKey","checkedState","reactive","leftChecked","rightChecked","useComputedData","propsKey","sourceData","targetData","useCheckedChange","onSourceCheckedChange","onTargetCheckedChange","useMove","addToLeft","addToRight","leftPanel","ref","rightPanel","clearQuery","which","value","query","hasButtonTexts","computed","length","leftPanelTitle","rightPanelTitle","panelFilterPlaceholder","watch","optionRender","option","toRefs","class","createVNode","placeholder","title","onCheckedChange","createElementVNode","e","_ctx","onClick"],"sources":["../../../../../../packages/components/transfer/src/index.vue"],"sourcesContent":["<template>\n  <div :class=\"ns.b()\">\n    <transfer-panel\n      ref=\"leftPanel\"\n      :data=\"sourceData\"\n      :option-render=\"optionRender\"\n      :placeholder=\"panelFilterPlaceholder\"\n      :title=\"leftPanelTitle\"\n      :filterable=\"filterable\"\n      :format=\"format\"\n      :filter-method=\"filterMethod\"\n      :default-checked=\"leftDefaultChecked\"\n      :props=\"props\"\n      @checked-change=\"onSourceCheckedChange\"\n    >\n      <slot name=\"left-footer\"></slot>\n    </transfer-panel>\n    <div :class=\"ns.e('buttons')\">\n      <el-button\n        type=\"primary\"\n        :class=\"[ns.e('button'), ns.is('with-texts', hasButtonTexts)]\"\n        :disabled=\"rightChecked.length === 0\"\n        @click=\"addToLeft\"\n      >\n        <el-icon><arrow-left /></el-icon>\n        <span v-if=\"buttonTexts[0] !== undefined\">{{ buttonTexts[0] }}</span>\n      </el-button>\n      <el-button\n        type=\"primary\"\n        :class=\"[ns.e('button'), ns.is('with-texts', hasButtonTexts)]\"\n        :disabled=\"leftChecked.length === 0\"\n        @click=\"addToRight\"\n      >\n        <span v-if=\"buttonTexts[1] !== undefined\">{{ buttonTexts[1] }}</span>\n        <el-icon><arrow-right /></el-icon>\n      </el-button>\n    </div>\n    <transfer-panel\n      ref=\"rightPanel\"\n      :data=\"targetData\"\n      :option-render=\"optionRender\"\n      :placeholder=\"panelFilterPlaceholder\"\n      :filterable=\"filterable\"\n      :format=\"format\"\n      :filter-method=\"filterMethod\"\n      :title=\"rightPanelTitle\"\n      :default-checked=\"rightDefaultChecked\"\n      :props=\"props\"\n      @checked-change=\"onTargetCheckedChange\"\n    >\n      <slot name=\"right-footer\"></slot>\n    </transfer-panel>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  inject,\n  h,\n  reactive,\n  ref,\n  toRefs,\n  watch,\n} from 'vue'\nimport ElButton from '@element-plus/components/button'\nimport ElIcon from '@element-plus/components/icon'\nimport { elFormItemKey } from '@element-plus/tokens'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport { ArrowLeft, ArrowRight } from '@element-plus/icons-vue'\nimport TransferPanel from './transfer-panel.vue'\nimport { useComputedData } from './useComputedData'\nimport {\n  useCheckedChange,\n  LEFT_CHECK_CHANGE_EVENT,\n  RIGHT_CHECK_CHANGE_EVENT,\n} from './useCheckedChange'\nimport { useMove } from './useMove'\nimport { CHANGE_EVENT } from './transfer'\n\nimport type { PropType, VNode } from 'vue'\nimport type { ElFormItemContext } from '@element-plus/tokens'\nimport type { DataItem, Format, Key, Props, TargetOrder } from './transfer'\n\ntype TransferType = InstanceType<typeof TransferPanel>\n\nexport default defineComponent({\n  name: 'ElTransfer',\n\n  components: {\n    TransferPanel,\n    ElButton,\n    ElIcon,\n    ArrowLeft,\n    ArrowRight,\n  },\n\n  props: {\n    data: {\n      type: Array as PropType<DataItem[]>,\n      default: () => [],\n    },\n    titles: {\n      type: Array as PropType<any> as PropType<[string, string]>,\n      default: () => [],\n    },\n    buttonTexts: {\n      type: Array as PropType<any> as PropType<[string, string]>,\n      default: () => [],\n    },\n    filterPlaceholder: {\n      type: String,\n      default: '',\n    },\n    filterMethod: Function as PropType<\n      (query: string, item: DataItem) => boolean\n    >,\n    leftDefaultChecked: {\n      type: Array as PropType<Key[]>,\n      default: () => [],\n    },\n    rightDefaultChecked: {\n      type: Array as PropType<Key[]>,\n      default: () => [],\n    },\n    renderContent: Function as PropType<(h, option) => VNode>,\n    modelValue: {\n      type: Array as PropType<Key[]>,\n      default: () => [],\n    },\n    format: {\n      type: Object as PropType<Format>,\n      default: () => ({}),\n    },\n    filterable: {\n      type: Boolean,\n      default: false,\n    },\n    props: {\n      type: Object as PropType<Props>,\n      default: () => ({\n        label: 'label',\n        key: 'key',\n        disabled: 'disabled',\n      }),\n    },\n    targetOrder: {\n      type: String as PropType<TargetOrder>,\n      default: 'original',\n      validator: (val: string) => {\n        return ['original', 'push', 'unshift'].includes(val)\n      },\n    },\n  },\n\n  emits: [\n    UPDATE_MODEL_EVENT,\n    CHANGE_EVENT,\n    LEFT_CHECK_CHANGE_EVENT,\n    RIGHT_CHECK_CHANGE_EVENT,\n  ],\n\n  setup(props, { emit, slots }) {\n    const { t } = useLocale()\n    const ns = useNamespace('transfer')\n    const elFormItem = inject(elFormItemKey, {} as ElFormItemContext)\n\n    const checkedState = reactive({\n      leftChecked: [],\n      rightChecked: [],\n    })\n\n    const { propsKey, sourceData, targetData } = useComputedData(props)\n\n    const { onSourceCheckedChange, onTargetCheckedChange } = useCheckedChange(\n      checkedState,\n      emit\n    )\n\n    const { addToLeft, addToRight } = useMove(\n      props,\n      checkedState,\n      propsKey,\n      emit\n    )\n\n    const leftPanel = ref<TransferType>()\n    const rightPanel = ref<TransferType>()\n\n    const clearQuery = (which: 'left' | 'right') => {\n      switch (which) {\n        case 'left':\n          leftPanel.value!.query = ''\n          break\n        case 'right':\n          rightPanel.value!.query = ''\n          break\n      }\n    }\n\n    const hasButtonTexts = computed(() => props.buttonTexts.length === 2)\n\n    const leftPanelTitle = computed(\n      () => props.titles[0] || t('el.transfer.titles.0')\n    )\n\n    const rightPanelTitle = computed(\n      () => props.titles[1] || t('el.transfer.titles.1')\n    )\n\n    const panelFilterPlaceholder = computed(\n      () => props.filterPlaceholder || t('el.transfer.filterPlaceholder')\n    )\n\n    watch(\n      () => props.modelValue,\n      () => {\n        elFormItem.validate?.('change')\n      }\n    )\n\n    const optionRender = computed(() => (option) => {\n      if (props.renderContent) return props.renderContent(h, option)\n\n      if (slots.default) return slots.default({ option })\n\n      return h('span', option[props.props.label] || option[props.props.key])\n    })\n\n    return {\n      ns,\n      sourceData,\n      targetData,\n      onSourceCheckedChange,\n      onTargetCheckedChange,\n      addToLeft,\n      addToRight,\n\n      ...toRefs(checkedState),\n\n      hasButtonTexts,\n      leftPanelTitle,\n      rightPanelTitle,\n      panelFilterPlaceholder,\n      clearQuery,\n      leftPanel,\n      rightPanel,\n\n      optionRender,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}