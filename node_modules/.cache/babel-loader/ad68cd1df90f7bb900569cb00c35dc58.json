{"ast":null,"code":"import \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport { defineComponent, getCurrentInstance, inject, ref, onMounted, resolveComponent, openBlock, createElementBlock, normalizeClass, createElementVNode, renderSlot, createBlock, withCtx, resolveDynamicComponent, toDisplayString } from 'vue';\nimport { ElIcon } from '../../icon/index.mjs';\nimport '../../../tokens/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { breadcrumbItemProps } from './breadcrumb-item.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { elBreadcrumbKey } from '../../../tokens/breadcrumb.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\nvar COMPONENT_NAME = \"ElBreadcrumbItem\";\n\nvar _sfc_main = defineComponent({\n  name: COMPONENT_NAME,\n  components: {\n    ElIcon: ElIcon\n  },\n  props: breadcrumbItemProps,\n  setup: function setup(props) {\n    var instance = getCurrentInstance();\n    var router = instance.appContext.config.globalProperties.$router;\n    var parent = inject(elBreadcrumbKey, void 0);\n    var ns = useNamespace(\"breadcrumb\");\n    var link = ref();\n    onMounted(function () {\n      link.value.setAttribute(\"role\", \"link\");\n      link.value.addEventListener(\"click\", function () {\n        if (!props.to || !router) return;\n        props.replace ? router.replace(props.to) : router.push(props.to);\n      });\n    });\n    return {\n      ns: ns,\n      link: link,\n      separator: parent == null ? void 0 : parent.separator,\n      separatorIcon: parent == null ? void 0 : parent.separatorIcon\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_icon = resolveComponent(\"el-icon\");\n\n  return openBlock(), createElementBlock(\"span\", {\n    class: normalizeClass(_ctx.ns.e(\"item\"))\n  }, [createElementVNode(\"span\", {\n    ref: \"link\",\n    class: normalizeClass([_ctx.ns.e(\"inner\"), _ctx.ns.is(\"link\", !!_ctx.to)]),\n    role: \"link\"\n  }, [renderSlot(_ctx.$slots, \"default\")], 2), _ctx.separatorIcon ? (openBlock(), createBlock(_component_el_icon, {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"separator\"))\n  }, {\n    default: withCtx(function () {\n      return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.separatorIcon)))];\n    }),\n    _: 1\n  }, 8, [\"class\"])) : (openBlock(), createElementBlock(\"span\", {\n    key: 1,\n    class: normalizeClass(_ctx.ns.e(\"separator\")),\n    role: \"presentation\"\n  }, toDisplayString(_ctx.separator), 3))], 2);\n}\n\nvar BreadcrumbItem = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { BreadcrumbItem as default };","map":{"version":3,"mappings":";;;;;;;;;;AA6BA,IAAMA,iBAAiB,kBAAvB;;AAEA,IAAKC,YAAaC,gBAAa;AAC7BC,QAAMH,cADuB;AAG7BI,cAAY;AACVC;AADU,GAHiB;AAO7BC,SAAOC,mBAPsB;AAS7BC,OAT6B,iBASvBF,KATuB,EAShB;AACX,QAAMG,WAAWC,oBAAjB;AACA,QAAMC,SAASF,SAASG,UAAT,CAAoBC,MAApB,CAA2BC,gBAA3B,CAA4CC,OAA3D;AACA,QAAMC,SAASC,OAAOC,eAAP,EAAwB,MAAxB,CAAf;AACA,QAAMC,KAAKC,aAAa,YAAb,CAAX;AAEA,QAAMC,OAAOC,KAAb;AAEAC,cAAU,YAAM;AACdF,WAAKG,KAAL,CAAYC,YAAZ,CAAyB,MAAzB,EAAiC,MAAjC;AACAJ,WAAKG,KAAL,CAAYE,gBAAZ,CAA6B,OAA7B,EAAsC,YAAM;AAC1C,YAAI,CAACpB,MAAMqB,EAAP,IAAa,CAAChB,MAAlB,EAA0B;AAC1BL,cAAMsB,OAAN,GAAgBjB,OAAOiB,OAAP,CAAetB,MAAMqB,EAArB,CAAhB,GAA2ChB,OAAOkB,IAAP,CAAYvB,MAAMqB,EAAlB,CAA3C;AAA6D,OAF/D;AAE+D,KAJjE;AAQA,WAAO;AACLR,YADK;AAELE,gBAFK;AAGLS,iBAAWd,0CAHN;AAILe,qBAAef;AAJV,KAAP;AAIyB;AA7BE,CAAb,CAAlB;;;;;sBA9BEgB,mBAUO,MAVPA,EAUO;AAVAC,WAAKC,eAAEC,QAAGC,CAAH,CAAI,MAAJ,CAAFF;AAUL,GAVPF,EAAkB,CAChBK,mBAEO,MAFPA,EAEO;AAFDf,SAAI,MAEH;AAFWW,WAAKC,gBAAGC,QAAGC,CAAH,CAAI,OAAJ,CAAHF,EAAkBC,QAAGG,EAAH,CAAK,MAAL,EAAK,EAAWH,OAAhB,CAAlBD,EAEhB;AAFwDK,UAAK;AAE7D,GAFPF,EAAoE,CAClEG,WAAaL,WAAbK,EAAa,SAAbA,CADkE,CAApEH,EACe,CADfA,CADgB,EAIDF,mCAAfM,YAEUC,kBAFVD,EAEU;AAAAE;AAFqBV,WAAKC,eAAEC,QAAGC,CAAH,CAAI,WAAJ,CAAFF;AAE1B,GAFVO,EAA0C;qBACxC;AAAA,aAAiC,eAAjCA,YAAiCG,wBAAjBT,kBAAiBS,CAAjCH,CAAiC,EAAjC;AAAA,MADwC;AACxBI;AADwB,GAA1CJ,eAAe,kBAGfT,mBAEO,MAFPA,EAEO;AAAAW;AAFOV,WAAKC,eAAEC,QAAGC,CAAH,CAAI,WAAJ,CAAFF,CAEZ;AAFiCK,UAAK;AAEtC,GAFPP,EAA6Cc,gBACxCX,cADwC,CAA7CH,EACc,CADdA,CAHe,CAJC,CAAlBA,EAQgB,CARhBA","names":["COMPONENT_NAME","_sfc_main","defineComponent","name","components","ElIcon","props","breadcrumbItemProps","setup","instance","getCurrentInstance","router","appContext","config","globalProperties","$router","parent","inject","elBreadcrumbKey","ns","useNamespace","link","ref","onMounted","value","setAttribute","addEventListener","to","replace","push","separator","separatorIcon","_createElementBlock","class","_normalizeClass","_ctx","e","_createElementVNode","is","role","_renderSlot","_createBlock","_component_el_icon","key","_resolveDynamicComponent","_","toDisplayString"],"sources":["../../../../../../packages/components/breadcrumb/src/breadcrumb-item.vue"],"sourcesContent":["<template>\n  <span :class=\"ns.e('item')\">\n    <span ref=\"link\" :class=\"[ns.e('inner'), ns.is('link', !!to)]\" role=\"link\">\n      <slot></slot>\n    </span>\n    <el-icon v-if=\"separatorIcon\" :class=\"ns.e('separator')\">\n      <component :is=\"separatorIcon\" />\n    </el-icon>\n    <span v-else :class=\"ns.e('separator')\" role=\"presentation\">\n      {{ separator }}\n    </span>\n  </span>\n</template>\n\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  inject,\n  ref,\n  onMounted,\n  getCurrentInstance,\n} from 'vue'\nimport ElIcon from '@element-plus/components/icon'\nimport { elBreadcrumbKey } from '@element-plus/tokens'\nimport { useNamespace } from '@element-plus/hooks'\nimport { breadcrumbItemProps } from './breadcrumb-item'\n\nimport type { Router } from 'vue-router'\n\nconst COMPONENT_NAME = 'ElBreadcrumbItem'\n\nexport default defineComponent({\n  name: COMPONENT_NAME,\n\n  components: {\n    ElIcon,\n  },\n\n  props: breadcrumbItemProps,\n\n  setup(props) {\n    const instance = getCurrentInstance()!\n    const router = instance.appContext.config.globalProperties.$router as Router\n    const parent = inject(elBreadcrumbKey, undefined)\n    const ns = useNamespace('breadcrumb')\n\n    const link = ref<HTMLSpanElement>()\n\n    onMounted(() => {\n      link.value!.setAttribute('role', 'link')\n      link.value!.addEventListener('click', () => {\n        if (!props.to || !router) return\n        props.replace ? router.replace(props.to) : router.push(props.to)\n      })\n    })\n\n    return {\n      ns,\n      link,\n      separator: parent?.separator,\n      separatorIcon: parent?.separatorIcon,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}