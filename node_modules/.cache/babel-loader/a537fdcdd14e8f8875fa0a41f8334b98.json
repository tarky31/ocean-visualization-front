{"ast":null,"code":"import _defineProperty from \"D:/MyFile/WebCode/ocean-vis/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.number.constructor.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.error.cause.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport { defineComponent, ref, computed, watch, provide, getCurrentInstance, resolveComponent, openBlock, createElementBlock, normalizeClass, Fragment, renderList, createBlock, createElementVNode, toDisplayString, createCommentVNode, withDirectives, vShow } from 'vue';\nimport '../../../hooks/index.mjs';\nimport TreeStore from './model/tree-store.mjs';\nimport { getNodeKey } from './model/util.mjs';\nimport ElTreeNode from './tree-node.mjs';\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast.mjs';\nimport { useDragNodeHandler } from './model/useDragNode.mjs';\nimport { useKeydown } from './model/useKeydown.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useNamespace } from '../../../hooks/use-namespace/index.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElTree\",\n  components: {\n    ElTreeNode: ElTreeNode\n  },\n  props: {\n    data: {\n      type: Array,\n      default: function _default() {\n        return [];\n      }\n    },\n    emptyText: {\n      type: String\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true\n    },\n    defaultCheckedKeys: Array,\n    defaultExpandedKeys: Array,\n    currentNodeKey: [String, Number],\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false\n    },\n    draggable: {\n      type: Boolean,\n      default: false\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object,\n      default: function _default() {\n        return {\n          children: \"children\",\n          label: \"label\",\n          disabled: \"disabled\"\n        };\n      }\n    },\n    lazy: {\n      type: Boolean,\n      default: false\n    },\n    highlightCurrent: Boolean,\n    load: Function,\n    filterNodeMethod: Function,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18\n    },\n    icon: [String, Object]\n  },\n  emits: [\"check-change\", \"current-change\", \"node-click\", \"node-contextmenu\", \"node-collapse\", \"node-expand\", \"check\", \"node-drag-start\", \"node-drag-end\", \"node-drop\", \"node-drag-leave\", \"node-drag-enter\", \"node-drag-over\"],\n  setup: function setup(props, ctx) {\n    var _useLocale = useLocale(),\n        t = _useLocale.t;\n\n    var ns = useNamespace(\"tree\");\n    var store = ref(new TreeStore({\n      key: props.nodeKey,\n      data: props.data,\n      lazy: props.lazy,\n      props: props.props,\n      load: props.load,\n      currentNodeKey: props.currentNodeKey,\n      checkStrictly: props.checkStrictly,\n      checkDescendants: props.checkDescendants,\n      defaultCheckedKeys: props.defaultCheckedKeys,\n      defaultExpandedKeys: props.defaultExpandedKeys,\n      autoExpandParent: props.autoExpandParent,\n      defaultExpandAll: props.defaultExpandAll,\n      filterNodeMethod: props.filterNodeMethod\n    }));\n    store.value.initialize();\n    var root = ref(store.value.root);\n    var currentNode = ref(null);\n    var el$ = ref(null);\n    var dropIndicator$ = ref(null);\n\n    var _useNodeExpandEventBr = useNodeExpandEventBroadcast(props),\n        broadcastExpanded = _useNodeExpandEventBr.broadcastExpanded;\n\n    var _useDragNodeHandler = useDragNodeHandler({\n      props: props,\n      ctx: ctx,\n      el$: el$,\n      dropIndicator$: dropIndicator$,\n      store: store\n    }),\n        dragState = _useDragNodeHandler.dragState;\n\n    useKeydown({\n      el$: el$\n    }, store);\n    var isEmpty = computed(function () {\n      var childNodes = root.value.childNodes;\n      return !childNodes || childNodes.length === 0 || childNodes.every(function (_ref) {\n        var visible = _ref.visible;\n        return !visible;\n      });\n    });\n    watch(function () {\n      return props.defaultCheckedKeys;\n    }, function (newVal) {\n      store.value.setDefaultCheckedKey(newVal);\n    });\n    watch(function () {\n      return props.defaultExpandedKeys;\n    }, function (newVal) {\n      store.value.setDefaultExpandedKeys(newVal);\n    });\n    watch(function () {\n      return props.data;\n    }, function (newVal) {\n      store.value.setData(newVal);\n    }, {\n      deep: true\n    });\n    watch(function () {\n      return props.checkStrictly;\n    }, function (newVal) {\n      store.value.checkStrictly = newVal;\n    });\n\n    var filter = function filter(value) {\n      if (!props.filterNodeMethod) throw new Error(\"[Tree] filterNodeMethod is required when filter\");\n      store.value.filter(value);\n    };\n\n    var getNodeKey$1 = function getNodeKey$1(node) {\n      return getNodeKey(props.nodeKey, node.data);\n    };\n\n    var getNodePath = function getNodePath(data) {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getNodePath\");\n      var node = store.value.getNode(data);\n      if (!node) return [];\n      var path = [node.data];\n      var parent = node.parent;\n\n      while (parent && parent !== root.value) {\n        path.push(parent.data);\n        parent = parent.parent;\n      }\n\n      return path.reverse();\n    };\n\n    var getCheckedNodes = function getCheckedNodes(leafOnly, includeHalfChecked) {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked);\n    };\n\n    var getCheckedKeys = function getCheckedKeys(leafOnly) {\n      return store.value.getCheckedKeys(leafOnly);\n    };\n\n    var getCurrentNode = function getCurrentNode() {\n      var currentNode2 = store.value.getCurrentNode();\n      return currentNode2 ? currentNode2.data : null;\n    };\n\n    var getCurrentKey = function getCurrentKey() {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in getCurrentKey\");\n      var currentNode2 = getCurrentNode();\n      return currentNode2 ? currentNode2[props.nodeKey] : null;\n    };\n\n    var setCheckedNodes = function setCheckedNodes(nodes, leafOnly) {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedNodes\");\n      store.value.setCheckedNodes(nodes, leafOnly);\n    };\n\n    var setCheckedKeys = function setCheckedKeys(keys, leafOnly) {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCheckedKeys\");\n      store.value.setCheckedKeys(keys, leafOnly);\n    };\n\n    var setChecked = function setChecked(data, checked, deep) {\n      store.value.setChecked(data, checked, deep);\n    };\n\n    var getHalfCheckedNodes = function getHalfCheckedNodes() {\n      return store.value.getHalfCheckedNodes();\n    };\n\n    var getHalfCheckedKeys = function getHalfCheckedKeys() {\n      return store.value.getHalfCheckedKeys();\n    };\n\n    var setCurrentNode = function setCurrentNode(node) {\n      var shouldAutoExpandParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentNode\");\n      store.value.setUserCurrentNode(node, shouldAutoExpandParent);\n    };\n\n    var setCurrentKey = function setCurrentKey(key) {\n      var shouldAutoExpandParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in setCurrentKey\");\n      store.value.setCurrentNodeKey(key, shouldAutoExpandParent);\n    };\n\n    var getNode = function getNode(data) {\n      return store.value.getNode(data);\n    };\n\n    var remove = function remove(data) {\n      store.value.remove(data);\n    };\n\n    var append = function append(data, parentNode) {\n      store.value.append(data, parentNode);\n    };\n\n    var insertBefore = function insertBefore(data, refNode) {\n      store.value.insertBefore(data, refNode);\n    };\n\n    var insertAfter = function insertAfter(data, refNode) {\n      store.value.insertAfter(data, refNode);\n    };\n\n    var handleNodeExpand = function handleNodeExpand(nodeData, node, instance) {\n      broadcastExpanded(node);\n      ctx.emit(\"node-expand\", nodeData, node, instance);\n    };\n\n    var updateKeyChildren = function updateKeyChildren(key, data) {\n      if (!props.nodeKey) throw new Error(\"[Tree] nodeKey is required in updateKeyChild\");\n      store.value.updateChildren(key, data);\n    };\n\n    provide(\"RootTree\", {\n      ctx: ctx,\n      props: props,\n      store: store,\n      root: root,\n      currentNode: currentNode,\n      instance: getCurrentInstance()\n    });\n    return {\n      ns: ns,\n      store: store,\n      root: root,\n      currentNode: currentNode,\n      dragState: dragState,\n      el$: el$,\n      dropIndicator$: dropIndicator$,\n      isEmpty: isEmpty,\n      filter: filter,\n      getNodeKey: getNodeKey$1,\n      getNodePath: getNodePath,\n      getCheckedNodes: getCheckedNodes,\n      getCheckedKeys: getCheckedKeys,\n      getCurrentNode: getCurrentNode,\n      getCurrentKey: getCurrentKey,\n      setCheckedNodes: setCheckedNodes,\n      setCheckedKeys: setCheckedKeys,\n      setChecked: setChecked,\n      getHalfCheckedNodes: getHalfCheckedNodes,\n      getHalfCheckedKeys: getHalfCheckedKeys,\n      setCurrentNode: setCurrentNode,\n      setCurrentKey: setCurrentKey,\n      t: t,\n      getNode: getNode,\n      remove: remove,\n      append: append,\n      insertBefore: insertBefore,\n      insertAfter: insertAfter,\n      handleNodeExpand: handleNodeExpand,\n      updateKeyChildren: updateKeyChildren\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _a;\n\n  var _component_el_tree_node = resolveComponent(\"el-tree-node\");\n\n  return openBlock(), createElementBlock(\"div\", {\n    ref: \"el$\",\n    class: normalizeClass([_ctx.ns.b(), _ctx.ns.is(\"dragging\", !!_ctx.dragState.draggingNode), _ctx.ns.is(\"drop-not-allow\", !_ctx.dragState.allowDrop), _ctx.ns.is(\"drop-inner\", _ctx.dragState.dropType === \"inner\"), _defineProperty({}, _ctx.ns.m(\"highlight-current\"), _ctx.highlightCurrent)]),\n    role: \"tree\"\n  }, [(openBlock(true), createElementBlock(Fragment, null, renderList(_ctx.root.childNodes, function (child) {\n    return openBlock(), createBlock(_component_el_tree_node, {\n      key: _ctx.getNodeKey(child),\n      node: child,\n      props: _ctx.props,\n      accordion: _ctx.accordion,\n      \"render-after-expand\": _ctx.renderAfterExpand,\n      \"show-checkbox\": _ctx.showCheckbox,\n      \"render-content\": _ctx.renderContent,\n      onNodeExpand: _ctx.handleNodeExpand\n    }, null, 8, [\"node\", \"props\", \"accordion\", \"render-after-expand\", \"show-checkbox\", \"render-content\", \"onNodeExpand\"]);\n  }), 128)), _ctx.isEmpty ? (openBlock(), createElementBlock(\"div\", {\n    key: 0,\n    class: normalizeClass(_ctx.ns.e(\"empty-block\"))\n  }, [createElementVNode(\"span\", {\n    class: normalizeClass(_ctx.ns.e(\"empty-text\"))\n  }, toDisplayString((_a = _ctx.emptyText) != null ? _a : _ctx.t(\"el.tree.emptyText\")), 3)], 2)) : createCommentVNode(\"v-if\", true), withDirectives(createElementVNode(\"div\", {\n    ref: \"dropIndicator$\",\n    class: normalizeClass(_ctx.ns.e(\"drop-indicator\"))\n  }, null, 2), [[vShow, _ctx.dragState.showDropIndicator]])], 2);\n}\n\nvar Tree = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { Tree as default };","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;AA8DA,IAAKA,YAAaC,gBAAa;AAC7BC,QAAM,QADuB;AAE7BC,cAAY;AAAEC;AAAF,GAFiB;AAG7BC,SAAO;AACLC,UAAM;AACJC,YAAMC,KADF;AAEJC,eAAS;AAAA,eAAM,EAAN;AAAA;AAFL,KADD;AAKLC,eAAW;AACTH,YAAMI;AADG,KALN;AAQLC,uBAAmB;AACjBL,YAAMM,OADW;AAEjBJ,eAAS;AAFQ,KARd;AAYLK,aAASH,MAZJ;AAaLI,mBAAeF,OAbV;AAcLG,sBAAkBH,OAdb;AAeLI,uBAAmB;AACjBV,YAAMM,OADW;AAEjBJ,eAAS;AAFQ,KAfd;AAmBLS,sBAAkBL,OAnBb;AAoBLM,sBAAkB;AAChBZ,YAAMM,OADU;AAEhBJ,eAAS;AAFO,KApBb;AAwBLW,sBAAkB;AAChBb,YAAMM,OADU;AAEhBJ,eAAS;AAFO,KAxBb;AA4BLY,wBAAoBb,KA5Bf;AA+BLc,yBAAqBd,KA/BhB;AAkCLe,oBAAgB,CAACZ,MAAD,EAASa,MAAT,CAlCX;AAmCLC,mBAAeC,QAnCV;AAoCLC,kBAAc;AACZpB,YAAMM,OADM;AAEZJ,eAAS;AAFG,KApCT;AAwCLmB,eAAW;AACTrB,YAAMM,OADG;AAETJ,eAAS;AAFA,KAxCN;AA4CLoB,eAAWH,QA5CN;AA6CLI,eAAWJ,QA7CN;AA8CLrB,WAAO;AACLE,YAAMwB,MADD;AAELtB,eAAS;AAAA;AACPuB,oBAAU,UADH;AAEPC,iBAAO,OAFA;AAGPC,oBAAU;AAHH;AAAA;AAFJ,KA9CF;AAsDLC,UAAM;AACJ5B,YAAMM,OADF;AAEJJ,eAAS;AAFL,KAtDD;AA0DL2B,sBAAkBvB,OA1Db;AA2DLwB,UAAMX,QA3DD;AA4DLY,sBAAkBZ,QA5Db;AA+DLa,eAAW1B,OA/DN;AAgEL2B,YAAQ;AACNjC,YAAMiB,MADA;AAENf,eAAS;AAFH,KAhEH;AAoELgC,UAAM,CAAC9B,MAAD,EAASoB,MAAT;AApED,GAHsB;AAyE7BW,SAAO,CACL,cADK,EAEL,gBAFK,EAGL,YAHK,EAIL,kBAJK,EAKL,eALK,EAML,aANK,EAOL,OAPK,EAQL,iBARK,EASL,eATK,EAUL,WAVK,EAWL,iBAXK,EAYL,iBAZK,EAaL,gBAbK,CAzEsB;AAwF7BC,OAxF6B,iBAwFvBtC,KAxFuB,EAwFhBuC,GAxFgB,EAwFX;AAChB,qBAAcC,WAAd;AAAA,QAAQC,CAAR,cAAQA,CAAR;;AACA,QAAMC,KAAKC,aAAa,MAAb,CAAX;AAEA,QAAMC,QAAQC,IACZ,IAAIC,SAAJ,CAAc;AACZC,WAAK/C,MAAMS,OADC;AAEZR,YAAMD,MAAMC,IAFA;AAGZ6B,YAAM9B,MAAM8B,IAHA;AAIZ9B,aAAOA,MAAMA,KAJD;AAKZgC,YAAMhC,MAAMgC,IALA;AAMZd,sBAAgBlB,MAAMkB,cANV;AAOZR,qBAAeV,MAAMU,aAPT;AAQZI,wBAAkBd,MAAMc,gBARZ;AASZE,0BAAoBhB,MAAMgB,kBATd;AAUZC,2BAAqBjB,MAAMiB,mBAVf;AAWZF,wBAAkBf,MAAMe,gBAXZ;AAYZJ,wBAAkBX,MAAMW,gBAZZ;AAaZsB,wBAAkBjC,MAAMiC;AAbZ,KAAd,CADY,CAAd;AAkBAW,UAAMI,KAAN,CAAYC,UAAZ;AAEA,QAAMC,OAAOL,IAAUD,MAAMI,KAAN,CAAYE,IAAtB,CAAb;AACA,QAAMC,cAAcN,IAAU,IAAV,CAApB;AACA,QAAMO,MAAMP,IAA2B,IAA3B,CAAZ;AACA,QAAMQ,iBAAiBR,IAA2B,IAA3B,CAAvB;;AAEA,gCAA8BS,4BAA4BtD,KAA5B,CAA9B;AAAA,QAAQuD,iBAAR,yBAAQA,iBAAR;;AAEA,8BAAsBC,mBAAmB;AACvCxD,kBADuC;AAEvCuC,cAFuC;AAGvCa,cAHuC;AAIvCC,oCAJuC;AAKvCT;AALuC,KAAnB,CAAtB;AAAA,QAAQa,SAAR,uBAAQA,SAAR;;AAQAC,eAAW;AAAEN;AAAF,KAAX,EAAoBR,KAApB;AAEA,QAAMe,UAAUC,SAAS,YAAM;AAC7B,UAAQC,UAAR,GAAuBX,KAAKF,KAA5B,CAAQa,UAAR;AACA,aACE,CAACA,UAAD,IACAA,WAAWC,MAAX,KAAsB,CADtB,IAEAD,WAAWE,KAAX,CAAiB;AAAA,YAAGC,OAAH,QAAGA,OAAH;AAAA,eAAiB,CAACA,OAAlB;AAAA,OAAjB,CAHF;AAGqC,KALvB,CAAhB;AASAC,UACE;AAAA,aAAMjE,MAAMgB,kBAAZ;AAAA,KADF,EAEE,UAACkD,MAAD,EAAY;AACVtB,YAAMI,KAAN,CAAYmB,oBAAZ,CAAiCD,MAAjC;AAAiC,KAHrC;AAOAD,UACE;AAAA,aAAMjE,MAAMiB,mBAAZ;AAAA,KADF,EAEE,UAACiD,MAAD,EAAY;AACVtB,YAAMI,KAAN,CAAYoB,sBAAZ,CAAmCF,MAAnC;AAAmC,KAHvC;AAOAD,UACE;AAAA,aAAMjE,MAAMC,IAAZ;AAAA,KADF,EAEE,UAACiE,MAAD,EAAY;AACVtB,YAAMI,KAAN,CAAYqB,OAAZ,CAAoBH,MAApB;AAAoB,KAHxB,EAKE;AAAEI,YAAM;AAAR,KALF;AAQAL,UACE;AAAA,aAAMjE,MAAMU,aAAZ;AAAA,KADF,EAEE,UAACwD,MAAD,EAAY;AACVtB,YAAMI,KAAN,CAAYtC,aAAZ,GAA4BwD,MAA5B;AAA4B,KAHhC;;AAOA,QAAMK,SAAS,SAATA,MAAS,CAACvB,KAAD,EAAW;AACxB,UAAI,CAAChD,MAAMiC,gBAAX,EACE,MAAM,IAAIuC,KAAJ,CAAU,iDAAV,CAAN;AACF5B,YAAMI,KAAN,CAAYuB,MAAZ,CAAmBvB,KAAnB;AAAmB,KAHrB;;AAMA,QAAMyB,eAAa,SAAbA,YAAa,CAACC,IAAD,EAAgB;AACjC,aAAOC,WAAe3E,MAAMS,OAArBkE,EAA8BD,KAAKzE,IAAnC0E,CAAP;AAA0C,KAD5C;;AAIA,QAAMC,cAAc,SAAdA,WAAc,CAAC3E,IAAD,EAAkC;AACpD,UAAI,CAACD,MAAMS,OAAX,EACE,MAAM,IAAI+D,KAAJ,CAAU,2CAAV,CAAN;AACF,UAAME,OAAO9B,MAAMI,KAAN,CAAY6B,OAAZ,CAAoB5E,IAApB,CAAb;AACA,UAAI,CAACyE,IAAL,EAAW,OAAO,EAAP;AACX,UAAMI,OAAO,CAACJ,KAAKzE,IAAN,CAAb;AACA,UAAI8E,SAASL,KAAKK,MAAlB;;AACA,aAAOA,UAAUA,WAAW7B,KAAKF,KAAjC,EAAwC;AACtC8B,aAAKE,IAAL,CAAUD,OAAO9E,IAAjB;AACA8E,iBAASA,OAAOA,MAAhB;AAAgB;;AAElB,aAAOD,KAAKG,OAAL,EAAP;AAAY,KAXd;;AAcA,QAAMC,kBAAkB,SAAlBA,eAAkB,CACtBC,QADsB,EAEtBC,kBAFsB,EAGH;AACnB,aAAOxC,MAAMI,KAAN,CAAYkC,eAAZ,CAA4BC,QAA5B,EAAsCC,kBAAtC,CAAP;AAA6C,KAJ/C;;AAOA,QAAMC,iBAAiB,SAAjBA,cAAiB,CAACF,QAAD,EAAmC;AACxD,aAAOvC,MAAMI,KAAN,CAAYqC,cAAZ,CAA2BF,QAA3B,CAAP;AAAkC,KADpC;;AAIA,QAAMG,iBAAiB,SAAjBA,cAAiB,GAAoB;AACzC,UAAMC,eAAc3C,MAAMI,KAAN,CAAYsC,cAAZ,EAApB;AACA,aAAOC,eAAcA,aAAYtF,IAA1B,GAAiC,IAAxC;AAAwC,KAF1C;;AAKA,QAAMuF,gBAAgB,SAAhBA,aAAgB,GAAW;AAC/B,UAAI,CAACxF,MAAMS,OAAX,EACE,MAAM,IAAI+D,KAAJ,CAAU,6CAAV,CAAN;AACF,UAAMe,eAAcD,gBAApB;AACA,aAAOC,eAAcA,aAAYvF,MAAMS,OAAlB,CAAd,GAA2C,IAAlD;AAAkD,KAJpD;;AAOA,QAAMgF,kBAAkB,SAAlBA,eAAkB,CAACC,KAAD,EAAgBP,QAAhB,EAAuC;AAC7D,UAAI,CAACnF,MAAMS,OAAX,EACE,MAAM,IAAI+D,KAAJ,CAAU,+CAAV,CAAN;AACF5B,YAAMI,KAAN,CAAYyC,eAAZ,CAA4BC,KAA5B,EAAmCP,QAAnC;AAAmC,KAHrC;;AAMA,QAAMQ,iBAAiB,SAAjBA,cAAiB,CAACC,IAAD,EAAOT,QAAP,EAA8B;AACnD,UAAI,CAACnF,MAAMS,OAAX,EACE,MAAM,IAAI+D,KAAJ,CAAU,8CAAV,CAAN;AACF5B,YAAMI,KAAN,CAAY2C,cAAZ,CAA2BC,IAA3B,EAAiCT,QAAjC;AAAiC,KAHnC;;AAMA,QAAMU,aAAa,SAAbA,UAAa,CACjB5F,IADiB,EAEjB6F,OAFiB,EAGjBxB,IAHiB,EAId;AACH1B,YAAMI,KAAN,CAAY6C,UAAZ,CAAuB5F,IAAvB,EAA6B6F,OAA7B,EAAsCxB,IAAtC;AAAsC,KALxC;;AAQA,QAAMyB,sBAAsB,SAAtBA,mBAAsB,GAAsB;AAChD,aAAOnD,MAAMI,KAAN,CAAY+C,mBAAZ,EAAP;AAAmB,KADrB;;AAIA,QAAMC,qBAAqB,SAArBA,kBAAqB,GAAiB;AAC1C,aAAOpD,MAAMI,KAAN,CAAYgD,kBAAZ,EAAP;AAAmB,KADrB;;AAIA,QAAMC,iBAAiB,SAAjBA,cAAiB,CAACvB,IAAD,EAA+C;AAAA,UAAlCwB,sBAAkC,uEAAT,IAAS;AACpE,UAAI,CAAClG,MAAMS,OAAX,EACE,MAAM,IAAI+D,KAAJ,CAAU,8CAAV,CAAN;AACF5B,YAAMI,KAAN,CAAYmD,kBAAZ,CAA+BzB,IAA/B,EAAqCwB,sBAArC;AAAqC,KAHvC;;AAMA,QAAME,gBAAgB,SAAhBA,aAAgB,CAACrD,GAAD,EAAiD;AAAA,UAAlCmD,sBAAkC,uEAAT,IAAS;AACrE,UAAI,CAAClG,MAAMS,OAAX,EACE,MAAM,IAAI+D,KAAJ,CAAU,6CAAV,CAAN;AACF5B,YAAMI,KAAN,CAAYqD,iBAAZ,CAA8BtD,GAA9B,EAAmCmD,sBAAnC;AAAmC,KAHrC;;AAMA,QAAMrB,UAAU,SAAVA,OAAU,CAAC5E,IAAD,EAAwC;AACtD,aAAO2C,MAAMI,KAAN,CAAY6B,OAAZ,CAAoB5E,IAApB,CAAP;AAA2B,KAD7B;;AAIA,QAAMqG,SAAS,SAATA,MAAS,CAACrG,IAAD,EAA+B;AAC5C2C,YAAMI,KAAN,CAAYsD,MAAZ,CAAmBrG,IAAnB;AAAmB,KADrB;;AAIA,QAAMsG,SAAS,SAATA,MAAS,CACbtG,IADa,EAEbuG,UAFa,EAGV;AACH5D,YAAMI,KAAN,CAAYuD,MAAZ,CAAmBtG,IAAnB,EAAyBuG,UAAzB;AAAyB,KAJ3B;;AAOA,QAAMC,eAAe,SAAfA,YAAe,CACnBxG,IADmB,EAEnByG,OAFmB,EAGhB;AACH9D,YAAMI,KAAN,CAAYyD,YAAZ,CAAyBxG,IAAzB,EAA+ByG,OAA/B;AAA+B,KAJjC;;AAOA,QAAMC,cAAc,SAAdA,WAAc,CAClB1G,IADkB,EAElByG,OAFkB,EAGf;AACH9D,YAAMI,KAAN,CAAY2D,WAAZ,CAAwB1G,IAAxB,EAA8ByG,OAA9B;AAA8B,KAJhC;;AAOA,QAAME,mBAAmB,SAAnBA,gBAAmB,CACvBC,QADuB,EAEvBnC,IAFuB,EAGvBoC,QAHuB,EAIpB;AACHvD,wBAAkBmB,IAAlB;AACAnC,UAAIwE,IAAJ,CAAS,aAAT,EAAwBF,QAAxB,EAAkCnC,IAAlC,EAAwCoC,QAAxC;AAAwC,KAN1C;;AASA,QAAME,oBAAoB,SAApBA,iBAAoB,CAACjE,GAAD,EAAe9C,IAAf,EAAkC;AAC1D,UAAI,CAACD,MAAMS,OAAX,EACE,MAAM,IAAI+D,KAAJ,CAAU,8CAAV,CAAN;AACF5B,YAAMI,KAAN,CAAYiE,cAAZ,CAA2BlE,GAA3B,EAAgC9C,IAAhC;AAAgC,KAHlC;;AAMAiH,YAAQ,UAAR,EAAoB;AAClB3E,cADkB;AAElBvC,kBAFkB;AAGlB4C,kBAHkB;AAIlBM,gBAJkB;AAKlBC,8BALkB;AAMlB2D,gBAAUK;AANQ,KAApB;AASA,WAAO;AACLzE,YADK;AAGLE,kBAHK;AAILM,gBAJK;AAKLC,8BALK;AAMLM,0BANK;AAOLL,cAPK;AAQLC,oCARK;AAWLM,sBAXK;AAcLY,oBAdK;AAcLE,kBACAA,YAfK;AAgBLG,8BAhBK;AAiBLM,sCAjBK;AAkBLG,oCAlBK;AAmBLC,oCAnBK;AAoBLE,kCApBK;AAqBLC,sCArBK;AAsBLE,oCAtBK;AAuBLE,4BAvBK;AAwBLE,8CAxBK;AAyBLC,4CAzBK;AA0BLC,oCA1BK;AA2BLG,kCA3BK;AA4BL3D,UA5BK;AA6BLoC,sBA7BK;AA8BLyB,oBA9BK;AA+BLC,oBA/BK;AAgCLE,gCAhCK;AAiCLE,8BAjCK;AAkCLC,wCAlCK;AAmCLI;AAnCK,KAAP;AAmCE;AAtVyB,CAAb,CAAlB;;;;;;;AA7BQ,SA/BAI;AACHvE,cADGuE;AACEC,2BAAwBC,QAAGC,CAAH,EAAxB,EAA2ED,QAAGE,EAAH,CAAK,UAAL,EAAK,OAAoB/D,SAApB,CAAoBgE,YAAzB,CAA3E,EAAgIH,QAAGE,EAAH,CAAK,gBAAL,EAAK,yBAAL,CAAhI,EAAsKF,WAA2B,YAA3B,EAA2BA,mCAA3B,CAAtK,sBAA0NA,8BAA1N,EAA0NA,qBAA1N,GADFF;AAQCM;AARDN;AAoBF,WARMA;AACLrE,iCADKqE;AAEL1C,iBAFK0C;AAGLpH,iBAAW,MAHNoH;AAILlF,+BAJKkF;AAKL,mDALKA;AAML,wCANKA;AAOL,0CAPKA;AAOQO;AAPRP,yHAQN;aAKIE;AAJevE,UAIf;AAJ0BsE;AAI1B,MADKO;AAFSP;AAET,KADOQ,iFACP,EADO,CACP,EACL,0CAKCC;AADJjF,yBACI;AADOwE;AACP,eAHG,CAAU,yCAAV,CAGH,EA9BHD,IA+BA","names":["_sfc_main","defineComponent","name","components","ElTreeNode","props","data","type","Array","default","emptyText","String","renderAfterExpand","Boolean","nodeKey","checkStrictly","defaultExpandAll","expandOnClickNode","checkOnClickNode","checkDescendants","autoExpandParent","defaultCheckedKeys","defaultExpandedKeys","currentNodeKey","Number","renderContent","Function","showCheckbox","draggable","allowDrag","allowDrop","Object","children","label","disabled","lazy","highlightCurrent","load","filterNodeMethod","accordion","indent","icon","emits","setup","ctx","useLocale","t","ns","useNamespace","store","ref","TreeStore","key","value","initialize","root","currentNode","el$","dropIndicator$","useNodeExpandEventBroadcast","broadcastExpanded","useDragNodeHandler","dragState","useKeydown","isEmpty","computed","childNodes","length","every","visible","watch","newVal","setDefaultCheckedKey","setDefaultExpandedKeys","setData","deep","filter","Error","getNodeKey","node","getNodeKeyUtil","getNodePath","getNode","path","parent","push","reverse","getCheckedNodes","leafOnly","includeHalfChecked","getCheckedKeys","getCurrentNode","currentNode2","getCurrentKey","setCheckedNodes","nodes","setCheckedKeys","keys","setChecked","checked","getHalfCheckedNodes","getHalfCheckedKeys","setCurrentNode","shouldAutoExpandParent","setUserCurrentNode","setCurrentKey","setCurrentNodeKey","remove","append","parentNode","insertBefore","refNode","insertAfter","handleNodeExpand","nodeData","instance","emit","updateKeyChildren","updateChildren","provide","getCurrentInstance","_openBlock","class","_ctx","b","is","draggingNode","role","onNodeExpand","createElementVNode","toDisplayString","withDirectives"],"sources":["../../../../../../packages/components/tree/src/tree.vue"],"sourcesContent":["<template>\n  <div\n    ref=\"el$\"\n    :class=\"[\n      ns.b(),\n      ns.is('dragging', !!dragState.draggingNode),\n      ns.is('drop-not-allow', !dragState.allowDrop),\n      ns.is('drop-inner', dragState.dropType === 'inner'),\n      { [ns.m('highlight-current')]: highlightCurrent },\n    ]\"\n    role=\"tree\"\n  >\n    <el-tree-node\n      v-for=\"child in root.childNodes\"\n      :key=\"getNodeKey(child)\"\n      :node=\"child\"\n      :props=\"props\"\n      :accordion=\"accordion\"\n      :render-after-expand=\"renderAfterExpand\"\n      :show-checkbox=\"showCheckbox\"\n      :render-content=\"renderContent\"\n      @node-expand=\"handleNodeExpand\"\n    />\n    <div v-if=\"isEmpty\" :class=\"ns.e('empty-block')\">\n      <span :class=\"ns.e('empty-text')\">{{\n        emptyText ?? t('el.tree.emptyText')\n      }}</span>\n    </div>\n    <div\n      v-show=\"dragState.showDropIndicator\"\n      ref=\"dropIndicator$\"\n      :class=\"ns.e('drop-indicator')\"\n    ></div>\n  </div>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  ref,\n  provide,\n  computed,\n  watch,\n  getCurrentInstance,\n} from 'vue'\nimport { useLocale, useNamespace } from '@element-plus/hooks'\nimport TreeStore from './model/tree-store'\nimport { getNodeKey as getNodeKeyUtil } from './model/util'\nimport ElTreeNode from './tree-node.vue'\nimport { useNodeExpandEventBroadcast } from './model/useNodeExpandEventBroadcast'\nimport { useDragNodeHandler } from './model/useDragNode'\nimport { useKeydown } from './model/useKeydown'\nimport type Node from './model/node'\n\nimport type { ComponentInternalInstance, PropType, Component } from 'vue'\nimport type { Nullable } from '@element-plus/utils'\nimport type {\n  TreeComponentProps,\n  TreeNodeData,\n  TreeKey,\n  TreeData,\n} from './tree.type'\n\nexport default defineComponent({\n  name: 'ElTree',\n  components: { ElTreeNode },\n  props: {\n    data: {\n      type: Array,\n      default: () => [],\n    },\n    emptyText: {\n      type: String,\n    },\n    renderAfterExpand: {\n      type: Boolean,\n      default: true,\n    },\n    nodeKey: String,\n    checkStrictly: Boolean,\n    defaultExpandAll: Boolean,\n    expandOnClickNode: {\n      type: Boolean,\n      default: true,\n    },\n    checkOnClickNode: Boolean,\n    checkDescendants: {\n      type: Boolean,\n      default: false,\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true,\n    },\n    defaultCheckedKeys: Array as PropType<\n      TreeComponentProps['defaultCheckedKeys']\n    >,\n    defaultExpandedKeys: Array as PropType<\n      TreeComponentProps['defaultExpandedKeys']\n    >,\n    currentNodeKey: [String, Number] as PropType<string | number>,\n    renderContent: Function,\n    showCheckbox: {\n      type: Boolean,\n      default: false,\n    },\n    draggable: {\n      type: Boolean,\n      default: false,\n    },\n    allowDrag: Function,\n    allowDrop: Function,\n    props: {\n      type: Object as PropType<TreeComponentProps['props']>,\n      default: () => ({\n        children: 'children',\n        label: 'label',\n        disabled: 'disabled',\n      }),\n    },\n    lazy: {\n      type: Boolean,\n      default: false,\n    },\n    highlightCurrent: Boolean,\n    load: Function as PropType<TreeComponentProps['load']>,\n    filterNodeMethod: Function as PropType<\n      TreeComponentProps['filterNodeMethod']\n    >,\n    accordion: Boolean,\n    indent: {\n      type: Number,\n      default: 18,\n    },\n    icon: [String, Object] as PropType<string | Component>,\n  },\n  emits: [\n    'check-change',\n    'current-change',\n    'node-click',\n    'node-contextmenu',\n    'node-collapse',\n    'node-expand',\n    'check',\n    'node-drag-start',\n    'node-drag-end',\n    'node-drop',\n    'node-drag-leave',\n    'node-drag-enter',\n    'node-drag-over',\n  ],\n  setup(props, ctx) {\n    const { t } = useLocale()\n    const ns = useNamespace('tree')\n\n    const store = ref<TreeStore>(\n      new TreeStore({\n        key: props.nodeKey,\n        data: props.data,\n        lazy: props.lazy,\n        props: props.props,\n        load: props.load,\n        currentNodeKey: props.currentNodeKey,\n        checkStrictly: props.checkStrictly,\n        checkDescendants: props.checkDescendants,\n        defaultCheckedKeys: props.defaultCheckedKeys,\n        defaultExpandedKeys: props.defaultExpandedKeys,\n        autoExpandParent: props.autoExpandParent,\n        defaultExpandAll: props.defaultExpandAll,\n        filterNodeMethod: props.filterNodeMethod,\n      })\n    )\n\n    store.value.initialize()\n\n    const root = ref<Node>(store.value.root)\n    const currentNode = ref<Node>(null)\n    const el$ = ref<Nullable<HTMLElement>>(null)\n    const dropIndicator$ = ref<Nullable<HTMLElement>>(null)\n\n    const { broadcastExpanded } = useNodeExpandEventBroadcast(props)\n\n    const { dragState } = useDragNodeHandler({\n      props,\n      ctx,\n      el$,\n      dropIndicator$,\n      store,\n    })\n\n    useKeydown({ el$ }, store)\n\n    const isEmpty = computed(() => {\n      const { childNodes } = root.value\n      return (\n        !childNodes ||\n        childNodes.length === 0 ||\n        childNodes.every(({ visible }) => !visible)\n      )\n    })\n\n    watch(\n      () => props.defaultCheckedKeys,\n      (newVal) => {\n        store.value.setDefaultCheckedKey(newVal)\n      }\n    )\n\n    watch(\n      () => props.defaultExpandedKeys,\n      (newVal) => {\n        store.value.setDefaultExpandedKeys(newVal)\n      }\n    )\n\n    watch(\n      () => props.data,\n      (newVal) => {\n        store.value.setData(newVal)\n      },\n      { deep: true }\n    )\n\n    watch(\n      () => props.checkStrictly,\n      (newVal) => {\n        store.value.checkStrictly = newVal\n      }\n    )\n\n    const filter = (value) => {\n      if (!props.filterNodeMethod)\n        throw new Error('[Tree] filterNodeMethod is required when filter')\n      store.value.filter(value)\n    }\n\n    const getNodeKey = (node: Node) => {\n      return getNodeKeyUtil(props.nodeKey, node.data)\n    }\n\n    const getNodePath = (data: TreeKey | TreeNodeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getNodePath')\n      const node = store.value.getNode(data)\n      if (!node) return []\n      const path = [node.data]\n      let parent = node.parent\n      while (parent && parent !== root.value) {\n        path.push(parent.data)\n        parent = parent.parent\n      }\n      return path.reverse()\n    }\n\n    const getCheckedNodes = (\n      leafOnly?: boolean,\n      includeHalfChecked?: boolean\n    ): TreeNodeData[] => {\n      return store.value.getCheckedNodes(leafOnly, includeHalfChecked)\n    }\n\n    const getCheckedKeys = (leafOnly?: boolean): TreeKey[] => {\n      return store.value.getCheckedKeys(leafOnly)\n    }\n\n    const getCurrentNode = (): TreeNodeData => {\n      const currentNode = store.value.getCurrentNode()\n      return currentNode ? currentNode.data : null\n    }\n\n    const getCurrentKey = (): any => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in getCurrentKey')\n      const currentNode = getCurrentNode()\n      return currentNode ? currentNode[props.nodeKey] : null\n    }\n\n    const setCheckedNodes = (nodes: Node[], leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedNodes')\n      store.value.setCheckedNodes(nodes, leafOnly)\n    }\n\n    const setCheckedKeys = (keys, leafOnly?: boolean) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCheckedKeys')\n      store.value.setCheckedKeys(keys, leafOnly)\n    }\n\n    const setChecked = (\n      data: TreeKey | TreeNodeData,\n      checked: boolean,\n      deep: boolean\n    ) => {\n      store.value.setChecked(data, checked, deep)\n    }\n\n    const getHalfCheckedNodes = (): TreeNodeData[] => {\n      return store.value.getHalfCheckedNodes()\n    }\n\n    const getHalfCheckedKeys = (): TreeKey[] => {\n      return store.value.getHalfCheckedKeys()\n    }\n\n    const setCurrentNode = (node: Node, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentNode')\n      store.value.setUserCurrentNode(node, shouldAutoExpandParent)\n    }\n\n    const setCurrentKey = (key: TreeKey, shouldAutoExpandParent = true) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in setCurrentKey')\n      store.value.setCurrentNodeKey(key, shouldAutoExpandParent)\n    }\n\n    const getNode = (data: TreeKey | TreeNodeData): Node => {\n      return store.value.getNode(data)\n    }\n\n    const remove = (data: TreeNodeData | Node) => {\n      store.value.remove(data)\n    }\n\n    const append = (\n      data: TreeNodeData,\n      parentNode: TreeNodeData | TreeKey | Node\n    ) => {\n      store.value.append(data, parentNode)\n    }\n\n    const insertBefore = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData\n    ) => {\n      store.value.insertBefore(data, refNode)\n    }\n\n    const insertAfter = (\n      data: TreeNodeData,\n      refNode: TreeKey | TreeNodeData\n    ) => {\n      store.value.insertAfter(data, refNode)\n    }\n\n    const handleNodeExpand = (\n      nodeData: TreeNodeData,\n      node: Node,\n      instance: ComponentInternalInstance\n    ) => {\n      broadcastExpanded(node)\n      ctx.emit('node-expand', nodeData, node, instance)\n    }\n\n    const updateKeyChildren = (key: TreeKey, data: TreeData) => {\n      if (!props.nodeKey)\n        throw new Error('[Tree] nodeKey is required in updateKeyChild')\n      store.value.updateChildren(key, data)\n    }\n\n    provide('RootTree', {\n      ctx,\n      props,\n      store,\n      root,\n      currentNode,\n      instance: getCurrentInstance(),\n    } as any)\n\n    return {\n      ns,\n      // ref\n      store,\n      root,\n      currentNode,\n      dragState,\n      el$,\n      dropIndicator$,\n\n      // computed\n      isEmpty,\n\n      // methods\n      filter,\n      getNodeKey,\n      getNodePath,\n      getCheckedNodes,\n      getCheckedKeys,\n      getCurrentNode,\n      getCurrentKey,\n      setCheckedNodes,\n      setCheckedKeys,\n      setChecked,\n      getHalfCheckedNodes,\n      getHalfCheckedKeys,\n      setCurrentNode,\n      setCurrentKey,\n      t,\n      getNode,\n      remove,\n      append,\n      insertBefore,\n      insertAfter,\n      handleNodeExpand,\n      updateKeyChildren,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}