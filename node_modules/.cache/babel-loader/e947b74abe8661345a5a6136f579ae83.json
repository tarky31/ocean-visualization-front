{"ast":null,"code":"import _asyncToGenerator from \"D:/MyFile/WebCode/ocean-vis/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _objectSpread from \"D:/MyFile/WebCode/ocean-vis/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.regexp.test.js\";\nimport \"regenerator-runtime/runtime.js\";\nimport { defineComponent, ref, reactive, computed, watch, nextTick, onMounted, onBeforeUnmount, toRefs, resolveComponent, resolveDirective, openBlock, createBlock, Transition, withCtx, withDirectives, createVNode, createElementVNode, createElementBlock, normalizeClass, normalizeStyle, withModifiers, resolveDynamicComponent, createCommentVNode, toDisplayString, withKeys, renderSlot, vShow, createTextVNode } from 'vue';\nimport { ElButton } from '../../button/index.mjs';\nimport '../../../directives/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { ElInput } from '../../input/index.mjs';\nimport { ElOverlay } from '../../overlay/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../constants/index.mjs';\nimport { ElIcon } from '../../icon/index.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport TrapFocus from '../../../directives/trap-focus/index.mjs';\nimport { TypeComponents, TypeComponentsMap } from '../../../utils/vue/icon.mjs';\nimport { isValidComponentSize } from '../../../utils/vue/validator.mjs';\nimport { useLocale } from '../../../hooks/use-locale/index.mjs';\nimport { useZIndex } from '../../../hooks/use-z-index/index.mjs';\nimport { useSize } from '../../../hooks/use-common-props/index.mjs';\nimport { useDraggable } from '../../../hooks/use-draggable/index.mjs';\nimport { on, off } from '../../../utils/dom/event.mjs';\nimport { useSameTarget } from '../../../hooks/use-same-target/index.mjs';\nimport { useModal } from '../../../hooks/use-modal/index.mjs';\nimport { usePreventGlobal } from '../../../hooks/use-prevent-global/index.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\nimport { useLockscreen } from '../../../hooks/use-lockscreen/index.mjs';\nimport { useRestoreActive } from '../../../hooks/use-restore-active/index.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElMessageBox\",\n  directives: {\n    TrapFocus: TrapFocus\n  },\n  components: _objectSpread({\n    ElButton: ElButton,\n    ElInput: ElInput,\n    ElOverlay: ElOverlay,\n    ElIcon: ElIcon\n  }, TypeComponents),\n  inheritAttrs: false,\n  props: {\n    buttonSize: {\n      type: String,\n      validator: isValidComponentSize\n    },\n    modal: {\n      type: Boolean,\n      default: true\n    },\n    lockScroll: {\n      type: Boolean,\n      default: true\n    },\n    showClose: {\n      type: Boolean,\n      default: true\n    },\n    closeOnClickModal: {\n      type: Boolean,\n      default: true\n    },\n    closeOnPressEscape: {\n      type: Boolean,\n      default: true\n    },\n    closeOnHashChange: {\n      type: Boolean,\n      default: true\n    },\n    center: Boolean,\n    draggable: Boolean,\n    roundButton: {\n      default: false,\n      type: Boolean\n    },\n    container: {\n      type: String,\n      default: \"body\"\n    },\n    boxType: {\n      type: String,\n      default: \"\"\n    }\n  },\n  emits: [\"vanish\", \"action\"],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n\n    var _useLocale = useLocale(),\n        t = _useLocale.t;\n\n    var visible = ref(false);\n\n    var _useZIndex = useZIndex(),\n        nextZIndex = _useZIndex.nextZIndex;\n\n    var state = reactive({\n      beforeClose: null,\n      callback: null,\n      cancelButtonText: \"\",\n      cancelButtonClass: \"\",\n      confirmButtonText: \"\",\n      confirmButtonClass: \"\",\n      customClass: \"\",\n      customStyle: {},\n      dangerouslyUseHTMLString: false,\n      distinguishCancelAndClose: false,\n      icon: \"\",\n      inputPattern: null,\n      inputPlaceholder: \"\",\n      inputType: \"text\",\n      inputValue: null,\n      inputValidator: null,\n      inputErrorMessage: \"\",\n      message: null,\n      modalFade: true,\n      modalClass: \"\",\n      showCancelButton: false,\n      showConfirmButton: true,\n      type: \"\",\n      title: void 0,\n      showInput: false,\n      action: \"\",\n      confirmButtonLoading: false,\n      cancelButtonLoading: false,\n      confirmButtonDisabled: false,\n      editorErrorMessage: \"\",\n      validateError: false,\n      zIndex: nextZIndex()\n    });\n    var typeClass = computed(function () {\n      var type = state.type;\n      return type && TypeComponentsMap[type] ? \"el-message-box-icon--\".concat(type) : \"\";\n    });\n    var btnSize = useSize(computed(function () {\n      return props.buttonSize;\n    }), {\n      prop: true,\n      form: true,\n      formItem: true\n    });\n    var iconComponent = computed(function () {\n      return state.icon || TypeComponentsMap[state.type] || \"\";\n    });\n    var hasMessage = computed(function () {\n      return !!state.message;\n    });\n    var rootRef = ref();\n    var headerRef = ref();\n    var inputRef = ref();\n    var confirmRef = ref();\n    var confirmButtonClasses = computed(function () {\n      return state.confirmButtonClass;\n    });\n    watch(function () {\n      return state.inputValue;\n    }, /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee(val) {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return nextTick();\n\n              case 2:\n                if (props.boxType === \"prompt\" && val !== null) {\n                  validate();\n                }\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref2.apply(this, arguments);\n      };\n    }(), {\n      immediate: true\n    });\n    watch(function () {\n      return visible.value;\n    }, function (val) {\n      if (val) {\n        if (props.boxType === \"alert\" || props.boxType === \"confirm\") {\n          nextTick().then(function () {\n            var _a, _b, _c;\n\n            (_c = (_b = (_a = confirmRef.value) == null ? void 0 : _a.$el) == null ? void 0 : _b.focus) == null ? void 0 : _c.call(_b);\n          });\n        }\n\n        state.zIndex = nextZIndex();\n      }\n\n      if (props.boxType !== \"prompt\") return;\n\n      if (val) {\n        nextTick().then(function () {\n          if (inputRef.value && inputRef.value.$el) {\n            getInputElement().focus();\n          }\n        });\n      } else {\n        state.editorErrorMessage = \"\";\n        state.validateError = false;\n      }\n    });\n    var draggable = computed(function () {\n      return props.draggable;\n    });\n    useDraggable(rootRef, headerRef, draggable);\n    onMounted( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/regeneratorRuntime.mark(function _callee2() {\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return nextTick();\n\n            case 2:\n              if (props.closeOnHashChange) {\n                on(window, \"hashchange\", doClose);\n              }\n\n            case 3:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    })));\n    onBeforeUnmount(function () {\n      if (props.closeOnHashChange) {\n        off(window, \"hashchange\", doClose);\n      }\n    });\n\n    function doClose() {\n      if (!visible.value) return;\n      visible.value = false;\n      nextTick(function () {\n        if (state.action) emit(\"action\", state.action);\n      });\n    }\n\n    var handleWrapperClick = function handleWrapperClick() {\n      if (props.closeOnClickModal) {\n        handleAction(state.distinguishCancelAndClose ? \"close\" : \"cancel\");\n      }\n    };\n\n    var overlayEvent = useSameTarget(handleWrapperClick);\n\n    var handleInputEnter = function handleInputEnter() {\n      if (state.inputType !== \"textarea\") {\n        return handleAction(\"confirm\");\n      }\n    };\n\n    var handleAction = function handleAction(action) {\n      var _a;\n\n      if (props.boxType === \"prompt\" && action === \"confirm\" && !validate()) {\n        return;\n      }\n\n      state.action = action;\n\n      if (state.beforeClose) {\n        (_a = state.beforeClose) == null ? void 0 : _a.call(state, action, state, doClose);\n      } else {\n        doClose();\n      }\n    };\n\n    var validate = function validate() {\n      if (props.boxType === \"prompt\") {\n        var inputPattern = state.inputPattern;\n\n        if (inputPattern && !inputPattern.test(state.inputValue || \"\")) {\n          state.editorErrorMessage = state.inputErrorMessage || t(\"el.messagebox.error\");\n          state.validateError = true;\n          return false;\n        }\n\n        var inputValidator = state.inputValidator;\n\n        if (typeof inputValidator === \"function\") {\n          var validateResult = inputValidator(state.inputValue);\n\n          if (validateResult === false) {\n            state.editorErrorMessage = state.inputErrorMessage || t(\"el.messagebox.error\");\n            state.validateError = true;\n            return false;\n          }\n\n          if (typeof validateResult === \"string\") {\n            state.editorErrorMessage = validateResult;\n            state.validateError = true;\n            return false;\n          }\n        }\n      }\n\n      state.editorErrorMessage = \"\";\n      state.validateError = false;\n      return true;\n    };\n\n    var getInputElement = function getInputElement() {\n      var inputRefs = inputRef.value.$refs;\n      return inputRefs.input || inputRefs.textarea;\n    };\n\n    var handleClose = function handleClose() {\n      handleAction(\"close\");\n    };\n\n    if (props.closeOnPressEscape) {\n      useModal({\n        handleClose: handleClose\n      }, visible);\n    } else {\n      usePreventGlobal(visible, \"keydown\", function (e) {\n        return e.code === EVENT_CODE.esc;\n      });\n    }\n\n    if (props.lockScroll) {\n      useLockscreen(visible);\n    }\n\n    useRestoreActive(visible);\n    return _objectSpread(_objectSpread({}, toRefs(state)), {}, {\n      overlayEvent: overlayEvent,\n      visible: visible,\n      hasMessage: hasMessage,\n      typeClass: typeClass,\n      btnSize: btnSize,\n      iconComponent: iconComponent,\n      confirmButtonClasses: confirmButtonClasses,\n      rootRef: rootRef,\n      headerRef: headerRef,\n      inputRef: inputRef,\n      confirmRef: confirmRef,\n      doClose: doClose,\n      handleClose: handleClose,\n      handleWrapperClick: handleWrapperClick,\n      handleInputEnter: handleInputEnter,\n      handleAction: handleAction,\n      t: t\n    });\n  }\n});\n\nvar _hoisted_1 = [\"aria-label\"];\nvar _hoisted_2 = {\n  key: 0,\n  ref: \"headerRef\",\n  class: \"el-message-box__header\"\n};\nvar _hoisted_3 = {\n  class: \"el-message-box__title\"\n};\nvar _hoisted_4 = {\n  class: \"el-message-box__content\"\n};\nvar _hoisted_5 = {\n  class: \"el-message-box__container\"\n};\nvar _hoisted_6 = {\n  key: 1,\n  class: \"el-message-box__message\"\n};\nvar _hoisted_7 = {\n  key: 0\n};\nvar _hoisted_8 = [\"innerHTML\"];\nvar _hoisted_9 = {\n  class: \"el-message-box__input\"\n};\nvar _hoisted_10 = {\n  class: \"el-message-box__btns\"\n};\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_icon = resolveComponent(\"el-icon\");\n\n  var _component_close = resolveComponent(\"close\");\n\n  var _component_el_input = resolveComponent(\"el-input\");\n\n  var _component_el_button = resolveComponent(\"el-button\");\n\n  var _component_el_overlay = resolveComponent(\"el-overlay\");\n\n  var _directive_trap_focus = resolveDirective(\"trap-focus\");\n\n  return openBlock(), createBlock(Transition, {\n    name: \"fade-in-linear\",\n    onAfterLeave: _cache[11] || (_cache[11] = function ($event) {\n      return _ctx.$emit(\"vanish\");\n    })\n  }, {\n    default: withCtx(function () {\n      return [withDirectives(createVNode(_component_el_overlay, {\n        \"z-index\": _ctx.zIndex,\n        \"overlay-class\": [\"is-message-box\", _ctx.modalClass],\n        mask: _ctx.modal\n      }, {\n        default: withCtx(function () {\n          return [createElementVNode(\"div\", {\n            class: \"el-overlay-message-box\",\n            onClick: _cache[8] || (_cache[8] = function () {\n              var _ctx$overlayEvent;\n\n              return _ctx.overlayEvent.onClick && (_ctx$overlayEvent = _ctx.overlayEvent).onClick.apply(_ctx$overlayEvent, arguments);\n            }),\n            onMousedown: _cache[9] || (_cache[9] = function () {\n              var _ctx$overlayEvent2;\n\n              return _ctx.overlayEvent.onMousedown && (_ctx$overlayEvent2 = _ctx.overlayEvent).onMousedown.apply(_ctx$overlayEvent2, arguments);\n            }),\n            onMouseup: _cache[10] || (_cache[10] = function () {\n              var _ctx$overlayEvent3;\n\n              return _ctx.overlayEvent.onMouseup && (_ctx$overlayEvent3 = _ctx.overlayEvent).onMouseup.apply(_ctx$overlayEvent3, arguments);\n            })\n          }, [withDirectives((openBlock(), createElementBlock(\"div\", {\n            ref: \"rootRef\",\n            role: \"dialog\",\n            \"aria-label\": _ctx.title || \"dialog\",\n            \"aria-modal\": \"true\",\n            class: normalizeClass([\"el-message-box\", _ctx.customClass, {\n              \"el-message-box--center\": _ctx.center,\n              \"is-draggable\": _ctx.draggable\n            }]),\n            style: normalizeStyle(_ctx.customStyle),\n            onClick: _cache[7] || (_cache[7] = withModifiers(function () {}, [\"stop\"]))\n          }, [_ctx.title !== null && _ctx.title !== void 0 ? (openBlock(), createElementBlock(\"div\", _hoisted_2, [createElementVNode(\"div\", _hoisted_3, [_ctx.iconComponent && _ctx.center ? (openBlock(), createBlock(_component_el_icon, {\n            key: 0,\n            class: normalizeClass([\"el-message-box__status\", _ctx.typeClass])\n          }, {\n            default: withCtx(function () {\n              return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))];\n            }),\n            _: 1\n          }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), createElementVNode(\"span\", null, toDisplayString(_ctx.title), 1)]), _ctx.showClose ? (openBlock(), createElementBlock(\"button\", {\n            key: 0,\n            type: \"button\",\n            class: \"el-message-box__headerbtn\",\n            \"aria-label\": \"Close\",\n            onClick: _cache[0] || (_cache[0] = function ($event) {\n              return _ctx.handleAction(_ctx.distinguishCancelAndClose ? \"close\" : \"cancel\");\n            }),\n            onKeydown: _cache[1] || (_cache[1] = withKeys(withModifiers(function ($event) {\n              return _ctx.handleAction(_ctx.distinguishCancelAndClose ? \"close\" : \"cancel\");\n            }, [\"prevent\"]), [\"enter\"]))\n          }, [createVNode(_component_el_icon, {\n            class: \"el-message-box__close\"\n          }, {\n            default: withCtx(function () {\n              return [createVNode(_component_close)];\n            }),\n            _: 1\n          })], 32)) : createCommentVNode(\"v-if\", true)], 512)) : createCommentVNode(\"v-if\", true), createElementVNode(\"div\", _hoisted_4, [createElementVNode(\"div\", _hoisted_5, [_ctx.iconComponent && !_ctx.center && _ctx.hasMessage ? (openBlock(), createBlock(_component_el_icon, {\n            key: 0,\n            class: normalizeClass([\"el-message-box__status\", _ctx.typeClass])\n          }, {\n            default: withCtx(function () {\n              return [(openBlock(), createBlock(resolveDynamicComponent(_ctx.iconComponent)))];\n            }),\n            _: 1\n          }, 8, [\"class\"])) : createCommentVNode(\"v-if\", true), _ctx.hasMessage ? (openBlock(), createElementBlock(\"div\", _hoisted_6, [renderSlot(_ctx.$slots, \"default\", {}, function () {\n            return [!_ctx.dangerouslyUseHTMLString ? (openBlock(), createElementBlock(\"p\", _hoisted_7, toDisplayString(_ctx.message), 1)) : (openBlock(), createElementBlock(\"p\", {\n              key: 1,\n              innerHTML: _ctx.message\n            }, null, 8, _hoisted_8))];\n          })])) : createCommentVNode(\"v-if\", true)]), withDirectives(createElementVNode(\"div\", _hoisted_9, [createVNode(_component_el_input, {\n            ref: \"inputRef\",\n            modelValue: _ctx.inputValue,\n            \"onUpdate:modelValue\": _cache[2] || (_cache[2] = function ($event) {\n              return _ctx.inputValue = $event;\n            }),\n            type: _ctx.inputType,\n            placeholder: _ctx.inputPlaceholder,\n            class: normalizeClass({\n              invalid: _ctx.validateError\n            }),\n            onKeydown: withKeys(withModifiers(_ctx.handleInputEnter, [\"prevent\"]), [\"enter\"])\n          }, null, 8, [\"modelValue\", \"type\", \"placeholder\", \"class\", \"onKeydown\"]), createElementVNode(\"div\", {\n            class: \"el-message-box__errormsg\",\n            style: normalizeStyle({\n              visibility: !!_ctx.editorErrorMessage ? \"visible\" : \"hidden\"\n            })\n          }, toDisplayString(_ctx.editorErrorMessage), 5)], 512), [[vShow, _ctx.showInput]])]), createElementVNode(\"div\", _hoisted_10, [_ctx.showCancelButton ? (openBlock(), createBlock(_component_el_button, {\n            key: 0,\n            loading: _ctx.cancelButtonLoading,\n            class: normalizeClass([_ctx.cancelButtonClass]),\n            round: _ctx.roundButton,\n            size: _ctx.btnSize,\n            onClick: _cache[3] || (_cache[3] = function ($event) {\n              return _ctx.handleAction(\"cancel\");\n            }),\n            onKeydown: _cache[4] || (_cache[4] = withKeys(withModifiers(function ($event) {\n              return _ctx.handleAction(\"cancel\");\n            }, [\"prevent\"]), [\"enter\"]))\n          }, {\n            default: withCtx(function () {\n              return [createTextVNode(toDisplayString(_ctx.cancelButtonText || _ctx.t(\"el.messagebox.cancel\")), 1)];\n            }),\n            _: 1\n          }, 8, [\"loading\", \"class\", \"round\", \"size\"])) : createCommentVNode(\"v-if\", true), withDirectives(createVNode(_component_el_button, {\n            ref: \"confirmRef\",\n            type: \"primary\",\n            loading: _ctx.confirmButtonLoading,\n            class: normalizeClass([_ctx.confirmButtonClasses]),\n            round: _ctx.roundButton,\n            disabled: _ctx.confirmButtonDisabled,\n            size: _ctx.btnSize,\n            onClick: _cache[5] || (_cache[5] = function ($event) {\n              return _ctx.handleAction(\"confirm\");\n            }),\n            onKeydown: _cache[6] || (_cache[6] = withKeys(withModifiers(function ($event) {\n              return _ctx.handleAction(\"confirm\");\n            }, [\"prevent\"]), [\"enter\"]))\n          }, {\n            default: withCtx(function () {\n              return [createTextVNode(toDisplayString(_ctx.confirmButtonText || _ctx.t(\"el.messagebox.confirm\")), 1)];\n            }),\n            _: 1\n          }, 8, [\"loading\", \"class\", \"round\", \"disabled\", \"size\"]), [[vShow, _ctx.showConfirmButton]])])], 14, _hoisted_1)), [[_directive_trap_focus]])], 32)];\n        }),\n        _: 3\n      }, 8, [\"z-index\", \"overlay-class\", \"mask\"]), [[vShow, _ctx.visible]])];\n    }),\n    _: 3\n  });\n}\n\nvar MessageBoxConstructor = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { MessageBoxConstructor as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","directives","TrapFocus","components","ElButton","ElInput","ElOverlay","ElIcon","TypeComponents","inheritAttrs","props","buttonSize","type","String","validator","isValidComponentSize","modal","Boolean","default","lockScroll","showClose","closeOnClickModal","closeOnPressEscape","closeOnHashChange","center","draggable","roundButton","container","boxType","emits","setup","emit","useLocale","t","visible","ref","useZIndex","nextZIndex","state","reactive","beforeClose","callback","cancelButtonText","cancelButtonClass","confirmButtonText","confirmButtonClass","customClass","customStyle","dangerouslyUseHTMLString","distinguishCancelAndClose","icon","inputPattern","inputPlaceholder","inputType","inputValue","inputValidator","inputErrorMessage","message","modalFade","modalClass","showCancelButton","showConfirmButton","title","showInput","action","confirmButtonLoading","cancelButtonLoading","confirmButtonDisabled","editorErrorMessage","validateError","zIndex","typeClass","computed","TypeComponentsMap","btnSize","useSize","prop","form","formItem","iconComponent","hasMessage","rootRef","headerRef","inputRef","confirmRef","confirmButtonClasses","watch","val","nextTick","validate","immediate","value","then","getInputElement","useDraggable","onMounted","on","onBeforeUnmount","off","handleWrapperClick","handleAction","overlayEvent","handleInputEnter","doClose","useModal","handleClose","usePreventGlobal","useLockscreen","useRestoreActive","toRefs","key","class","_cache","withDirectives","createElementVNode","onClick","onMousedown","role","_ctx","style","openBlock","createCommentVNode","onKeydown","createVNode","_hoisted_4","renderSlot","modelValue","placeholder","invalid","visibility","loading","round","size","disabled"],"sources":["../../../../../../packages/components/message-box/src/index.vue"],"sourcesContent":["<template>\n  <transition name=\"fade-in-linear\" @after-leave=\"$emit('vanish')\">\n    <el-overlay\n      v-show=\"visible\"\n      :z-index=\"zIndex\"\n      :overlay-class=\"['is-message-box', modalClass]\"\n      :mask=\"modal\"\n    >\n      <div\n        class=\"el-overlay-message-box\"\n        @click=\"overlayEvent.onClick\"\n        @mousedown=\"overlayEvent.onMousedown\"\n        @mouseup=\"overlayEvent.onMouseup\"\n      >\n        <div\n          ref=\"rootRef\"\n          v-trap-focus\n          role=\"dialog\"\n          :aria-label=\"title || 'dialog'\"\n          aria-modal=\"true\"\n          :class=\"[\n            'el-message-box',\n            customClass,\n            { 'el-message-box--center': center, 'is-draggable': draggable },\n          ]\"\n          :style=\"customStyle\"\n          @click.stop=\"\"\n        >\n          <div\n            v-if=\"title !== null && title !== undefined\"\n            ref=\"headerRef\"\n            class=\"el-message-box__header\"\n          >\n            <div class=\"el-message-box__title\">\n              <el-icon\n                v-if=\"iconComponent && center\"\n                class=\"el-message-box__status\"\n                :class=\"typeClass\"\n              >\n                <component :is=\"iconComponent\" />\n              </el-icon>\n              <span>{{ title }}</span>\n            </div>\n            <button\n              v-if=\"showClose\"\n              type=\"button\"\n              class=\"el-message-box__headerbtn\"\n              aria-label=\"Close\"\n              @click=\"\n                handleAction(distinguishCancelAndClose ? 'close' : 'cancel')\n              \"\n              @keydown.prevent.enter=\"\n                handleAction(distinguishCancelAndClose ? 'close' : 'cancel')\n              \"\n            >\n              <el-icon class=\"el-message-box__close\">\n                <close />\n              </el-icon>\n            </button>\n          </div>\n          <div class=\"el-message-box__content\">\n            <div class=\"el-message-box__container\">\n              <el-icon\n                v-if=\"iconComponent && !center && hasMessage\"\n                class=\"el-message-box__status\"\n                :class=\"typeClass\"\n              >\n                <component :is=\"iconComponent\" />\n              </el-icon>\n              <div v-if=\"hasMessage\" class=\"el-message-box__message\">\n                <slot>\n                  <p v-if=\"!dangerouslyUseHTMLString\">{{ message }}</p>\n                  <p v-else v-html=\"message\"></p>\n                </slot>\n              </div>\n            </div>\n            <div v-show=\"showInput\" class=\"el-message-box__input\">\n              <el-input\n                ref=\"inputRef\"\n                v-model=\"inputValue\"\n                :type=\"inputType\"\n                :placeholder=\"inputPlaceholder\"\n                :class=\"{ invalid: validateError }\"\n                @keydown.prevent.enter=\"handleInputEnter\"\n              />\n              <div\n                class=\"el-message-box__errormsg\"\n                :style=\"{\n                  visibility: !!editorErrorMessage ? 'visible' : 'hidden',\n                }\"\n              >\n                {{ editorErrorMessage }}\n              </div>\n            </div>\n          </div>\n          <div class=\"el-message-box__btns\">\n            <el-button\n              v-if=\"showCancelButton\"\n              :loading=\"cancelButtonLoading\"\n              :class=\"[cancelButtonClass]\"\n              :round=\"roundButton\"\n              :size=\"btnSize\"\n              @click=\"handleAction('cancel')\"\n              @keydown.prevent.enter=\"handleAction('cancel')\"\n            >\n              {{ cancelButtonText || t('el.messagebox.cancel') }}\n            </el-button>\n            <el-button\n              v-show=\"showConfirmButton\"\n              ref=\"confirmRef\"\n              type=\"primary\"\n              :loading=\"confirmButtonLoading\"\n              :class=\"[confirmButtonClasses]\"\n              :round=\"roundButton\"\n              :disabled=\"confirmButtonDisabled\"\n              :size=\"btnSize\"\n              @click=\"handleAction('confirm')\"\n              @keydown.prevent.enter=\"handleAction('confirm')\"\n            >\n              {{ confirmButtonText || t('el.messagebox.confirm') }}\n            </el-button>\n          </div>\n        </div>\n      </div>\n    </el-overlay>\n  </transition>\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  nextTick,\n  onMounted,\n  onBeforeUnmount,\n  computed,\n  watch,\n  reactive,\n  ref,\n  toRefs,\n} from 'vue'\nimport ElButton from '@element-plus/components/button'\nimport { TrapFocus } from '@element-plus/directives'\nimport {\n  useModal,\n  useLockscreen,\n  useLocale,\n  useRestoreActive,\n  usePreventGlobal,\n  useSize,\n  useDraggable,\n  useSameTarget,\n  useZIndex,\n} from '@element-plus/hooks'\nimport ElInput from '@element-plus/components/input'\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport {\n  on,\n  off,\n  isValidComponentSize,\n  TypeComponents,\n  TypeComponentsMap,\n} from '@element-plus/utils'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport { ElIcon } from '@element-plus/components/icon'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\nimport type {\n  Action,\n  MessageBoxState,\n  MessageBoxType,\n} from './message-box.type'\n\nexport default defineComponent({\n  name: 'ElMessageBox',\n  directives: {\n    TrapFocus,\n  },\n  components: {\n    ElButton,\n    ElInput,\n    ElOverlay,\n    ElIcon,\n    ...TypeComponents,\n  },\n  inheritAttrs: false,\n  props: {\n    buttonSize: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    modal: {\n      type: Boolean,\n      default: true,\n    },\n    lockScroll: {\n      type: Boolean,\n      default: true,\n    },\n    showClose: {\n      type: Boolean,\n      default: true,\n    },\n    closeOnClickModal: {\n      type: Boolean,\n      default: true,\n    },\n    closeOnPressEscape: {\n      type: Boolean,\n      default: true,\n    },\n    closeOnHashChange: {\n      type: Boolean,\n      default: true,\n    },\n    center: Boolean,\n    draggable: Boolean,\n    roundButton: {\n      default: false,\n      type: Boolean,\n    },\n    container: {\n      type: String, // default append to body\n      default: 'body',\n    },\n    boxType: {\n      type: String as PropType<MessageBoxType>,\n      default: '',\n    },\n  },\n  emits: ['vanish', 'action'],\n  setup(props, { emit }) {\n    // const popup = usePopup(props, doClose)\n    const { t } = useLocale()\n    const visible = ref(false)\n    const { nextZIndex } = useZIndex()\n    // s represents state\n    const state = reactive<MessageBoxState>({\n      beforeClose: null,\n      callback: null,\n      cancelButtonText: '',\n      cancelButtonClass: '',\n      confirmButtonText: '',\n      confirmButtonClass: '',\n      customClass: '',\n      customStyle: {},\n      dangerouslyUseHTMLString: false,\n      distinguishCancelAndClose: false,\n      icon: '',\n      inputPattern: null,\n      inputPlaceholder: '',\n      inputType: 'text',\n      inputValue: null,\n      inputValidator: null,\n      inputErrorMessage: '',\n      message: null,\n      modalFade: true,\n      modalClass: '',\n      showCancelButton: false,\n      showConfirmButton: true,\n      type: '',\n      title: undefined,\n      showInput: false,\n      action: '' as Action,\n      confirmButtonLoading: false,\n      cancelButtonLoading: false,\n      confirmButtonDisabled: false,\n      editorErrorMessage: '',\n      // refer to: https://github.com/ElemeFE/element/commit/2999279ae34ef10c373ca795c87b020ed6753eed\n      // seemed ok for now without this state.\n      // isOnComposition: false, // temporary remove\n      validateError: false,\n      zIndex: nextZIndex(),\n    })\n\n    const typeClass = computed(() => {\n      const type = state.type\n      return type && TypeComponentsMap[type]\n        ? `el-message-box-icon--${type}`\n        : ''\n    })\n\n    const btnSize = useSize(\n      computed(() => props.buttonSize),\n      { prop: true, form: true, formItem: true }\n    )\n\n    const iconComponent = computed(\n      () => state.icon || TypeComponentsMap[state.type] || ''\n    )\n    const hasMessage = computed(() => !!state.message)\n    const rootRef = ref<HTMLElement>()\n    const headerRef = ref<HTMLElement>()\n    const inputRef = ref<HTMLElement>()\n    const confirmRef = ref<HTMLElement>()\n\n    const confirmButtonClasses = computed(() => state.confirmButtonClass)\n\n    watch(\n      () => state.inputValue,\n      async (val) => {\n        await nextTick()\n        if (props.boxType === 'prompt' && val !== null) {\n          validate()\n        }\n      },\n      { immediate: true }\n    )\n\n    watch(\n      () => visible.value,\n      (val) => {\n        if (val) {\n          if (props.boxType === 'alert' || props.boxType === 'confirm') {\n            nextTick().then(() => {\n              confirmRef.value?.$el?.focus?.()\n            })\n          }\n          state.zIndex = nextZIndex()\n        }\n        if (props.boxType !== 'prompt') return\n        if (val) {\n          nextTick().then(() => {\n            if (inputRef.value && inputRef.value.$el) {\n              getInputElement().focus()\n            }\n          })\n        } else {\n          state.editorErrorMessage = ''\n          state.validateError = false\n        }\n      }\n    )\n\n    const draggable = computed(() => props.draggable)\n    useDraggable(rootRef, headerRef, draggable)\n\n    onMounted(async () => {\n      await nextTick()\n      if (props.closeOnHashChange) {\n        on(window, 'hashchange', doClose)\n      }\n    })\n\n    onBeforeUnmount(() => {\n      if (props.closeOnHashChange) {\n        off(window, 'hashchange', doClose)\n      }\n    })\n\n    function doClose() {\n      if (!visible.value) return\n      visible.value = false\n      nextTick(() => {\n        if (state.action) emit('action', state.action)\n      })\n    }\n\n    const handleWrapperClick = () => {\n      if (props.closeOnClickModal) {\n        handleAction(state.distinguishCancelAndClose ? 'close' : 'cancel')\n      }\n    }\n\n    const overlayEvent = useSameTarget(handleWrapperClick)\n\n    const handleInputEnter = () => {\n      if (state.inputType !== 'textarea') {\n        return handleAction('confirm')\n      }\n    }\n\n    const handleAction = (action: Action) => {\n      if (props.boxType === 'prompt' && action === 'confirm' && !validate()) {\n        return\n      }\n\n      state.action = action\n\n      if (state.beforeClose) {\n        state.beforeClose?.(action, state, doClose)\n      } else {\n        doClose()\n      }\n    }\n\n    const validate = () => {\n      if (props.boxType === 'prompt') {\n        const inputPattern = state.inputPattern\n        if (inputPattern && !inputPattern.test(state.inputValue || '')) {\n          state.editorErrorMessage =\n            state.inputErrorMessage || t('el.messagebox.error')\n          state.validateError = true\n          return false\n        }\n        const inputValidator = state.inputValidator\n        if (typeof inputValidator === 'function') {\n          const validateResult = inputValidator(state.inputValue)\n          if (validateResult === false) {\n            state.editorErrorMessage =\n              state.inputErrorMessage || t('el.messagebox.error')\n            state.validateError = true\n            return false\n          }\n          if (typeof validateResult === 'string') {\n            state.editorErrorMessage = validateResult\n            state.validateError = true\n            return false\n          }\n        }\n      }\n      state.editorErrorMessage = ''\n      state.validateError = false\n      return true\n    }\n\n    const getInputElement = () => {\n      const inputRefs = inputRef.value.$refs\n      return (inputRefs.input || inputRefs.textarea) as HTMLElement\n    }\n\n    const handleClose = () => {\n      handleAction('close')\n    }\n\n    // when close on press escape is disabled, pressing esc should not callout\n    // any other message box and close any other dialog-ish elements\n    // e.g. Dialog has a close on press esc feature, and when it closes, it calls\n    // props.beforeClose method to make a intermediate state by callout a message box\n    // for some verification or alerting. then if we allow global event liek this\n    // to dispatch, it could callout another message box.\n    if (props.closeOnPressEscape) {\n      useModal(\n        {\n          handleClose,\n        },\n        visible\n      )\n    } else {\n      usePreventGlobal(\n        visible,\n        'keydown',\n        (e: KeyboardEvent) => e.code === EVENT_CODE.esc\n      )\n    }\n\n    // locks the screen to prevent scroll\n    if (props.lockScroll) {\n      useLockscreen(visible)\n    }\n\n    // restore to prev active element.\n    useRestoreActive(visible)\n\n    return {\n      ...toRefs(state),\n      overlayEvent,\n      visible,\n      hasMessage,\n      typeClass,\n      btnSize,\n      iconComponent,\n      confirmButtonClasses,\n      rootRef,\n      headerRef,\n      inputRef,\n      confirmRef,\n      doClose, // for outside usage\n      handleClose, // for out side usage\n      handleWrapperClick,\n      handleInputEnter,\n      handleAction,\n      t,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}