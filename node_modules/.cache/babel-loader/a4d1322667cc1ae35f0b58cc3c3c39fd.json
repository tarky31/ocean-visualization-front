{"ast":null,"code":"import { defineComponent, ref, inject, computed, unref, watch, resolveComponent, openBlock, createBlock, Teleport, createVNode, Transition, withCtx, withDirectives, mergeProps, renderSlot, createTextVNode, toDisplayString, vShow, createCommentVNode } from 'vue';\nimport { onClickOutside } from '@vueuse/core';\nimport '../../popper/index.mjs';\nimport '../../visual-hidden/index.mjs';\nimport '../../../utils/index.mjs';\nimport '../../../hooks/index.mjs';\nimport { useTooltipContentProps } from './tooltip.mjs';\nimport { TOOLTIP_INJECTION_KEY } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport ElPopperContent from '../../popper/src/content.mjs';\nimport ElVisuallyHidden from '../../visual-hidden/src/visual-hidden.mjs';\nimport { useEscapeKeydown } from '../../../hooks/use-escape-keydown/index.mjs';\nimport { composeEventHandlers } from '../../../utils/dom/event.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElTooltipContent\",\n  components: {\n    ElPopperContent: ElPopperContent,\n    ElVisuallyHidden: ElVisuallyHidden\n  },\n  inheritAttrs: false,\n  props: useTooltipContentProps,\n  setup: function setup(props) {\n    var contentRef = ref(null);\n    var intermediateOpen = ref(false);\n    var entering = ref(false);\n    var leaving = ref(false);\n\n    var _inject = inject(TOOLTIP_INJECTION_KEY, void 0),\n        controlled = _inject.controlled,\n        id = _inject.id,\n        open = _inject.open,\n        trigger = _inject.trigger,\n        onClose = _inject.onClose,\n        onOpen = _inject.onOpen,\n        onShow = _inject.onShow,\n        onHide = _inject.onHide,\n        onBeforeShow = _inject.onBeforeShow,\n        onBeforeHide = _inject.onBeforeHide;\n\n    var persistentRef = computed(function () {\n      if (process.env.NODE_ENV === \"test\") {\n        return true;\n      }\n\n      return props.persistent;\n    });\n    var shouldRender = computed(function () {\n      return unref(persistentRef) ? true : unref(open);\n    });\n    var shouldShow = computed(function () {\n      return props.disabled ? false : unref(open);\n    });\n    var contentStyle = computed(function () {\n      var _a;\n\n      return (_a = props.style) != null ? _a : {};\n    });\n    var ariaHidden = computed(function () {\n      return !unref(open);\n    });\n    useEscapeKeydown(onClose);\n\n    var onTransitionLeave = function onTransitionLeave() {\n      onHide();\n    };\n\n    var stopWhenControlled = function stopWhenControlled() {\n      if (unref(controlled)) return true;\n    };\n\n    var onContentEnter = composeEventHandlers(stopWhenControlled, function () {\n      if (props.enterable && unref(trigger) === \"hover\") {\n        onOpen();\n      }\n    });\n    var onContentLeave = composeEventHandlers(stopWhenControlled, function () {\n      if (unref(trigger) === \"hover\") {\n        onClose();\n      }\n    });\n\n    var onBeforeEnter = function onBeforeEnter() {\n      var _a, _b;\n\n      (_b = (_a = contentRef.value) == null ? void 0 : _a.updatePopper) == null ? void 0 : _b.call(_a);\n      onBeforeShow();\n    };\n\n    var onBeforeLeave = function onBeforeLeave() {\n      onBeforeHide();\n    };\n\n    var onAfterShow = function onAfterShow() {\n      onShow();\n    };\n\n    var stopHandle;\n    watch(function () {\n      return unref(open);\n    }, function (val) {\n      if (val) {\n        stopHandle = onClickOutside(computed(function () {\n          var _a;\n\n          return (_a = contentRef.value) == null ? void 0 : _a.popperContentRef;\n        }), function () {\n          if (unref(controlled)) return;\n          var $trigger = unref(trigger);\n\n          if ($trigger !== \"hover\") {\n            onClose();\n          }\n        });\n      } else {\n        stopHandle == null ? void 0 : stopHandle();\n      }\n    }, {\n      flush: \"post\"\n    });\n    return {\n      ariaHidden: ariaHidden,\n      entering: entering,\n      leaving: leaving,\n      id: id,\n      intermediateOpen: intermediateOpen,\n      contentStyle: contentStyle,\n      contentRef: contentRef,\n      shouldRender: shouldRender,\n      shouldShow: shouldShow,\n      open: open,\n      onAfterShow: onAfterShow,\n      onBeforeEnter: onBeforeEnter,\n      onBeforeLeave: onBeforeLeave,\n      onContentEnter: onContentEnter,\n      onContentLeave: onContentLeave,\n      onTransitionLeave: onTransitionLeave\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_el_visually_hidden = resolveComponent(\"el-visually-hidden\");\n\n  var _component_el_popper_content = resolveComponent(\"el-popper-content\");\n\n  return openBlock(), createBlock(Teleport, {\n    disabled: !_ctx.teleported,\n    to: _ctx.appendTo\n  }, [createVNode(Transition, {\n    name: _ctx.transition,\n    onAfterLeave: _ctx.onTransitionLeave,\n    onBeforeEnter: _ctx.onBeforeEnter,\n    onAfterEnter: _ctx.onAfterShow,\n    onBeforeLeave: _ctx.onBeforeLeave\n  }, {\n    default: withCtx(function () {\n      return [_ctx.shouldRender ? withDirectives((openBlock(), createBlock(_component_el_popper_content, mergeProps({\n        key: 0,\n        ref: \"contentRef\"\n      }, _ctx.$attrs, {\n        \"aria-hidden\": _ctx.ariaHidden,\n        \"boundaries-padding\": _ctx.boundariesPadding,\n        \"fallback-placements\": _ctx.fallbackPlacements,\n        \"gpu-acceleration\": _ctx.gpuAcceleration,\n        offset: _ctx.offset,\n        placement: _ctx.placement,\n        \"popper-options\": _ctx.popperOptions,\n        strategy: _ctx.strategy,\n        effect: _ctx.effect,\n        enterable: _ctx.enterable,\n        pure: _ctx.pure,\n        \"popper-class\": _ctx.popperClass,\n        \"popper-style\": [_ctx.popperStyle, _ctx.contentStyle],\n        \"reference-el\": _ctx.referenceEl,\n        visible: _ctx.shouldShow,\n        \"z-index\": _ctx.zIndex,\n        onMouseenter: _ctx.onContentEnter,\n        onMouseleave: _ctx.onContentLeave\n      }), {\n        default: withCtx(function () {\n          return [renderSlot(_ctx.$slots, \"default\"), createVNode(_component_el_visually_hidden, {\n            id: _ctx.id,\n            role: \"tooltip\"\n          }, {\n            default: withCtx(function () {\n              return [createTextVNode(toDisplayString(_ctx.ariaLabel), 1)];\n            }),\n            _: 1\n          }, 8, [\"id\"])];\n        }),\n        _: 3\n      }, 16, [\"aria-hidden\", \"boundaries-padding\", \"fallback-placements\", \"gpu-acceleration\", \"offset\", \"placement\", \"popper-options\", \"strategy\", \"effect\", \"enterable\", \"pure\", \"popper-class\", \"popper-style\", \"reference-el\", \"visible\", \"z-index\", \"onMouseenter\", \"onMouseleave\"])), [[vShow, _ctx.shouldShow]]) : createCommentVNode(\"v-if\", true)];\n    }),\n    _: 3\n  }, 8, [\"name\", \"onAfterLeave\", \"onBeforeEnter\", \"onAfterEnter\", \"onBeforeLeave\"])], 8, [\"disabled\", \"to\"]);\n}\n\nvar ElTooltipContent = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { ElTooltipContent as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","components","ElPopperContent","ElVisuallyHidden","inheritAttrs","props","useTooltipContentProps","setup","contentRef","ref","intermediateOpen","entering","leaving","inject","TOOLTIP_INJECTION_KEY","controlled","id","open","trigger","onClose","onOpen","onShow","onHide","onBeforeShow","onBeforeHide","persistentRef","computed","process","env","NODE_ENV","persistent","shouldRender","unref","shouldShow","disabled","contentStyle","_a","useEscapeKeydown","onTransitionLeave","_b","onAfterShow","watch","stopHandle","flush","ariaHidden","onBeforeEnter","onBeforeLeave","onContentEnter","teleported","to","createVNode","onAfterEnter","default","_ctx","key","offset","placement","strategy","effect","enterable","pure","onMouseenter","onMouseleave","role"],"sources":["../../../../../../packages/components/tooltip/src/content.vue"],"sourcesContent":["<template>\n  <teleport :disabled=\"!teleported\" :to=\"appendTo\">\n    <transition\n      :name=\"transition\"\n      @after-leave=\"onTransitionLeave\"\n      @before-enter=\"onBeforeEnter\"\n      @after-enter=\"onAfterShow\"\n      @before-leave=\"onBeforeLeave\"\n    >\n      <el-popper-content\n        v-if=\"shouldRender\"\n        v-show=\"shouldShow\"\n        ref=\"contentRef\"\n        v-bind=\"$attrs\"\n        :aria-hidden=\"ariaHidden\"\n        :boundaries-padding=\"boundariesPadding\"\n        :fallback-placements=\"fallbackPlacements\"\n        :gpu-acceleration=\"gpuAcceleration\"\n        :offset=\"offset\"\n        :placement=\"placement\"\n        :popper-options=\"popperOptions\"\n        :strategy=\"strategy\"\n        :effect=\"effect\"\n        :enterable=\"enterable\"\n        :pure=\"pure\"\n        :popper-class=\"popperClass\"\n        :popper-style=\"[popperStyle, contentStyle]\"\n        :reference-el=\"referenceEl\"\n        :visible=\"shouldShow\"\n        :z-index=\"zIndex\"\n        @mouseenter=\"onContentEnter\"\n        @mouseleave=\"onContentLeave\"\n      >\n        <slot />\n        <el-visually-hidden :id=\"id\" role=\"tooltip\">\n          {{ ariaLabel }}\n        </el-visually-hidden>\n      </el-popper-content>\n    </transition>\n  </teleport>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, inject, ref, unref, watch } from 'vue'\nimport { onClickOutside } from '@vueuse/core'\nimport { ElPopperContent } from '@element-plus/components/popper'\nimport { ElVisuallyHidden } from '@element-plus/components/visual-hidden'\nimport { composeEventHandlers } from '@element-plus/utils'\nimport { useEscapeKeydown } from '@element-plus/hooks'\n\nimport { useTooltipContentProps } from './tooltip'\nimport { TOOLTIP_INJECTION_KEY } from './tokens'\n\nexport default defineComponent({\n  name: 'ElTooltipContent',\n  components: {\n    ElPopperContent,\n    ElVisuallyHidden,\n  },\n  inheritAttrs: false,\n  props: useTooltipContentProps,\n  setup(props) {\n    const contentRef = ref<InstanceType<typeof ElPopperContent> | null>(null)\n    const intermediateOpen = ref(false)\n    const entering = ref(false)\n    const leaving = ref(false)\n    const {\n      controlled,\n      id,\n      open,\n      trigger,\n      onClose,\n      onOpen,\n      onShow,\n      onHide,\n      onBeforeShow,\n      onBeforeHide,\n    } = inject(TOOLTIP_INJECTION_KEY, undefined)!\n    const persistentRef = computed(() => {\n      // For testing, we would always want the content to be rendered\n      // to the DOM, so we need to return true here.\n      if (process.env.NODE_ENV === 'test') {\n        return true\n      }\n      return props.persistent\n    })\n\n    const shouldRender = computed(() => {\n      return unref(persistentRef) ? true : unref(open)\n    })\n\n    const shouldShow = computed(() => {\n      return props.disabled ? false : unref(open)\n    })\n\n    const contentStyle = computed(() => (props.style ?? {}) as any)\n\n    const ariaHidden = computed(() => !unref(open))\n\n    useEscapeKeydown(onClose)\n\n    const onTransitionLeave = () => {\n      onHide()\n    }\n\n    const stopWhenControlled = () => {\n      if (unref(controlled)) return true\n    }\n\n    const onContentEnter = composeEventHandlers(stopWhenControlled, () => {\n      if (props.enterable && unref(trigger) === 'hover') {\n        onOpen()\n      }\n    })\n\n    const onContentLeave = composeEventHandlers(stopWhenControlled, () => {\n      if (unref(trigger) === 'hover') {\n        onClose()\n      }\n    })\n\n    const onBeforeEnter = () => {\n      contentRef.value?.updatePopper?.()\n      onBeforeShow()\n    }\n\n    const onBeforeLeave = () => {\n      onBeforeHide()\n    }\n\n    const onAfterShow = () => {\n      onShow()\n    }\n\n    let stopHandle: ReturnType<typeof onClickOutside>\n\n    watch(\n      () => unref(open),\n      (val) => {\n        if (val) {\n          stopHandle = onClickOutside(\n            computed(() => {\n              return contentRef.value?.popperContentRef\n            }),\n            () => {\n              if (unref(controlled)) return\n              const $trigger = unref(trigger)\n              if ($trigger !== 'hover') {\n                onClose()\n              }\n            }\n          )\n        } else {\n          stopHandle?.()\n        }\n      },\n      {\n        flush: 'post',\n      }\n    )\n\n    return {\n      ariaHidden,\n      entering,\n      leaving,\n      id,\n      intermediateOpen,\n      contentStyle,\n      contentRef,\n      shouldRender,\n      shouldShow,\n      open,\n      onAfterShow,\n      onBeforeEnter,\n      onBeforeLeave,\n      onContentEnter,\n      onContentLeave,\n      onTransitionLeave,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}