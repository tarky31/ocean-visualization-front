{"ast":null,"code":"import _slicedToArray from \"D:/MyFile/WebCode/ocean-vis/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport { defineComponent, ref, provide, unref, onMounted, nextTick, watch, onBeforeUnmount, renderSlot } from 'vue';\nimport '../../../constants/index.mjs';\nimport { getEdges, tryFocus, focusableStack, focusFirstDescendant, obtainAllFocusableElements } from './utils.mjs';\nimport { ON_MOUNT_FOCUS_EVT, ON_UNMOUNT_FOCUS_EVT, FOCUS_TRAP_INJECTION_KEY, FOCUS_ON_MOUNT, FOCUS_ON_MOUNT_OPTS, FOCUS_ON_UNMOUNT } from './tokens.mjs';\nimport _export_sfc from '../../../_virtual/plugin-vue_export-helper.mjs';\nimport { EVENT_CODE } from '../../../constants/aria.mjs';\n\nvar _sfc_main = defineComponent({\n  name: \"ElFocusTrap\",\n  inheritAttrs: false,\n  props: {\n    loop: Boolean,\n    trapped: Boolean\n  },\n  emits: [ON_MOUNT_FOCUS_EVT, ON_UNMOUNT_FOCUS_EVT],\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit;\n    var focusTrapRef = ref();\n    var forwardRef = ref(null);\n    var lastFocusBeforeMounted;\n    var lastFocusAfterMounted;\n    var focusLayer = {\n      paused: false,\n      pause: function pause() {\n        this.paused = true;\n      },\n      resume: function resume() {\n        this.paused = false;\n      }\n    };\n\n    var onKeydown = function onKeydown(e) {\n      if (!props.loop && !props.trapped) return;\n      if (focusLayer.paused) return;\n      var key = e.key,\n          altKey = e.altKey,\n          ctrlKey = e.ctrlKey,\n          metaKey = e.metaKey,\n          currentTarget = e.currentTarget,\n          shiftKey = e.shiftKey;\n      var loop = props.loop;\n      var isTabbing = key === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey;\n      var currentFocusingEl = document.activeElement;\n\n      if (isTabbing && currentFocusingEl) {\n        var container = currentTarget;\n\n        var _getEdges = getEdges(container),\n            _getEdges2 = _slicedToArray(_getEdges, 2),\n            first = _getEdges2[0],\n            last = _getEdges2[1];\n\n        var isTabbable = first && last;\n\n        if (!isTabbable) {\n          if (currentFocusingEl === container) e.preventDefault();\n        } else {\n          if (!shiftKey && currentFocusingEl === last) {\n            e.preventDefault();\n            if (loop) tryFocus(first, true);\n          } else if (shiftKey && currentFocusingEl === first) {\n            e.preventDefault();\n            if (loop) tryFocus(last, true);\n          }\n        }\n      }\n    };\n\n    provide(FOCUS_TRAP_INJECTION_KEY, {\n      focusTrapRef: forwardRef,\n      onKeydown: onKeydown\n    });\n\n    var focusOnMount = function focusOnMount(e) {\n      emit(ON_MOUNT_FOCUS_EVT, e);\n    };\n\n    var focusOnUnmount = function focusOnUnmount(e) {\n      return emit(ON_UNMOUNT_FOCUS_EVT, e);\n    };\n\n    var onFocusIn = function onFocusIn(e) {\n      var trapContainer = unref(forwardRef);\n      if (focusLayer.paused || !trapContainer) return;\n      var target = e.target;\n\n      if (target && trapContainer.contains(target)) {\n        lastFocusAfterMounted = target;\n      } else {\n        tryFocus(lastFocusAfterMounted, true);\n      }\n    };\n\n    var onFocusOut = function onFocusOut(e) {\n      var trapContainer = unref(forwardRef);\n      if (focusLayer.paused || !trapContainer) return;\n\n      if (!trapContainer.contains(e.relatedTarget)) {\n        tryFocus(lastFocusAfterMounted, true);\n      }\n    };\n\n    var cleanupDocumentListeners = function cleanupDocumentListeners() {\n      document.removeEventListener(\"focusin\", onFocusIn);\n      document.removeEventListener(\"focusout\", onFocusOut);\n    };\n\n    onMounted(function () {\n      var trapContainer = unref(forwardRef);\n\n      if (trapContainer) {\n        focusableStack.push(focusLayer);\n        var prevFocusedElement = document.activeElement;\n        lastFocusBeforeMounted = prevFocusedElement;\n        var isPrevFocusContained = trapContainer.contains(prevFocusedElement);\n\n        if (!isPrevFocusContained) {\n          var mountEvent = new Event(FOCUS_ON_MOUNT, FOCUS_ON_MOUNT_OPTS);\n          trapContainer.addEventListener(FOCUS_ON_MOUNT, focusOnMount);\n          trapContainer.dispatchEvent(mountEvent);\n\n          if (!mountEvent.defaultPrevented) {\n            nextTick(function () {\n              focusFirstDescendant(obtainAllFocusableElements(trapContainer), true);\n\n              if (document.activeElement === prevFocusedElement) {\n                tryFocus(trapContainer);\n              }\n            });\n          }\n        }\n      }\n\n      watch(function () {\n        return props.trapped;\n      }, function (trapped) {\n        if (trapped) {\n          document.addEventListener(\"focusin\", onFocusIn);\n          document.addEventListener(\"focusout\", onFocusOut);\n        } else {\n          cleanupDocumentListeners();\n        }\n      }, {\n        immediate: true\n      });\n    });\n    onBeforeUnmount(function () {\n      cleanupDocumentListeners();\n      var trapContainer = unref(forwardRef);\n\n      if (trapContainer) {\n        trapContainer.removeEventListener(FOCUS_ON_MOUNT, focusOnMount);\n        var unmountEvent = new Event(FOCUS_ON_UNMOUNT, FOCUS_ON_MOUNT_OPTS);\n        trapContainer.addEventListener(FOCUS_ON_UNMOUNT, focusOnUnmount);\n        trapContainer.dispatchEvent(unmountEvent);\n\n        if (!unmountEvent.defaultPrevented) {\n          tryFocus(lastFocusBeforeMounted != null ? lastFocusBeforeMounted : document.body, true);\n        }\n\n        trapContainer.removeEventListener(FOCUS_ON_UNMOUNT, focusOnMount);\n        focusableStack.remove(focusLayer);\n      }\n    });\n    return {\n      focusTrapRef: focusTrapRef,\n      forwardRef: forwardRef,\n      onKeydown: onKeydown\n    };\n  }\n});\n\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  return renderSlot(_ctx.$slots, \"default\");\n}\n\nvar ElFocusTrap = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\n\nexport { ElFocusTrap as default };","map":{"version":3,"mappings":"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","names":["_sfc_main","defineComponent","name","inheritAttrs","props","loop","Boolean","trapped","emits","ON_MOUNT_FOCUS_EVT","ON_UNMOUNT_FOCUS_EVT","setup","emit","focusTrapRef","ref","forwardRef","lastFocusBeforeMounted","lastFocusAfterMounted","focusLayer","paused","pause","resume","onKeydown","e","key","altKey","ctrlKey","metaKey","currentTarget","shiftKey","isTabbing","EVENT_CODE","tab","currentFocusingEl","document","activeElement","container","getEdges","first","last","isTabbable","preventDefault","tryFocus","provide","FOCUS_TRAP_INJECTION_KEY","focusOnMount","focusOnUnmount","onFocusIn","trapContainer","unref","target","contains","onFocusOut","relatedTarget","cleanupDocumentListeners","removeEventListener","onMounted","focusableStack","push","prevFocusedElement","isPrevFocusContained","mountEvent","Event","FOCUS_ON_MOUNT","FOCUS_ON_MOUNT_OPTS","addEventListener","dispatchEvent","defaultPrevented","nextTick","focusFirstDescendant","obtainAllFocusableElements","watch","immediate","onBeforeUnmount","unmountEvent","FOCUS_ON_UNMOUNT","remove","_renderSlot","_ctx"],"sources":["../../../../../../packages/components/focus-trap/src/focus-trap.vue"],"sourcesContent":["<template>\n  <slot />\n</template>\n<script lang=\"ts\">\nimport {\n  defineComponent,\n  ref,\n  onMounted,\n  onBeforeUnmount,\n  provide,\n  unref,\n  watch,\n  nextTick,\n} from 'vue'\nimport { EVENT_CODE } from '@element-plus/constants'\nimport {\n  focusableStack,\n  focusFirstDescendant,\n  getEdges,\n  tryFocus,\n  obtainAllFocusableElements,\n} from './utils'\nimport {\n  FOCUS_TRAP_INJECTION_KEY,\n  FOCUS_ON_MOUNT,\n  FOCUS_ON_MOUNT_OPTS,\n  ON_MOUNT_FOCUS_EVT,\n  ON_UNMOUNT_FOCUS_EVT,\n  FOCUS_ON_UNMOUNT,\n} from './tokens'\n\nimport type { FocusLayer } from './utils'\n\nexport default defineComponent({\n  name: 'ElFocusTrap',\n  inheritAttrs: false,\n  props: {\n    loop: Boolean,\n    trapped: Boolean,\n  },\n  emits: [ON_MOUNT_FOCUS_EVT, ON_UNMOUNT_FOCUS_EVT],\n  setup(props, { emit }) {\n    const focusTrapRef = ref<HTMLElement | null>()\n    const forwardRef = ref<HTMLElement | null>(null)\n    let lastFocusBeforeMounted: HTMLElement | null\n    let lastFocusAfterMounted: HTMLElement | null\n\n    const focusLayer: FocusLayer = {\n      paused: false,\n      pause() {\n        this.paused = true\n      },\n      resume() {\n        this.paused = false\n      },\n    }\n\n    const onKeydown = (e: KeyboardEvent) => {\n      if (!props.loop && !props.trapped) return\n      if (focusLayer.paused) return\n\n      const { key, altKey, ctrlKey, metaKey, currentTarget, shiftKey } = e\n      const { loop } = props\n      const isTabbing =\n        key === EVENT_CODE.tab && !altKey && !ctrlKey && !metaKey\n\n      const currentFocusingEl = document.activeElement\n      if (isTabbing && currentFocusingEl) {\n        const container = currentTarget as HTMLElement\n        const [first, last] = getEdges(container)\n        const isTabbable = first && last\n\n        if (!isTabbable) {\n          if (currentFocusingEl === container) e.preventDefault()\n        } else {\n          if (!shiftKey && currentFocusingEl === last) {\n            e.preventDefault()\n            if (loop) tryFocus(first, true)\n          } else if (shiftKey && currentFocusingEl === first) {\n            e.preventDefault()\n            if (loop) tryFocus(last, true)\n          }\n        }\n      }\n    }\n\n    provide(FOCUS_TRAP_INJECTION_KEY, {\n      focusTrapRef: forwardRef,\n      onKeydown,\n    })\n\n    const focusOnMount = (e: Event) => {\n      emit(ON_MOUNT_FOCUS_EVT, e)\n    }\n    const focusOnUnmount = (e: Event) => emit(ON_UNMOUNT_FOCUS_EVT, e)\n    const onFocusIn = (e: Event) => {\n      const trapContainer = unref(forwardRef)\n      if (focusLayer.paused || !trapContainer) return\n      const target = e.target as HTMLElement | null\n      if (target && trapContainer.contains(target)) {\n        lastFocusAfterMounted = target\n      } else {\n        tryFocus(lastFocusAfterMounted, true)\n      }\n    }\n\n    const onFocusOut = (e: Event) => {\n      const trapContainer = unref(forwardRef)\n      if (focusLayer.paused || !trapContainer) return\n\n      if (\n        !trapContainer.contains(\n          (e as FocusEvent).relatedTarget as HTMLElement | null\n        )\n      ) {\n        tryFocus(lastFocusAfterMounted, true)\n      }\n    }\n\n    const cleanupDocumentListeners = () => {\n      document.removeEventListener('focusin', onFocusIn)\n      document.removeEventListener('focusout', onFocusOut)\n    }\n\n    onMounted(() => {\n      const trapContainer = unref(forwardRef)\n      if (trapContainer) {\n        focusableStack.push(focusLayer)\n        const prevFocusedElement = document.activeElement\n        lastFocusBeforeMounted = prevFocusedElement as HTMLElement | null\n        const isPrevFocusContained = trapContainer.contains(prevFocusedElement)\n        if (!isPrevFocusContained) {\n          const mountEvent = new Event(FOCUS_ON_MOUNT, FOCUS_ON_MOUNT_OPTS)\n          trapContainer.addEventListener(FOCUS_ON_MOUNT, focusOnMount)\n          trapContainer.dispatchEvent(mountEvent)\n          if (!mountEvent.defaultPrevented) {\n            nextTick(() => {\n              focusFirstDescendant(\n                obtainAllFocusableElements(trapContainer),\n                true\n              )\n              if (document.activeElement === prevFocusedElement) {\n                tryFocus(trapContainer)\n              }\n            })\n          }\n        }\n      }\n\n      watch(\n        () => props.trapped,\n        (trapped) => {\n          if (trapped) {\n            document.addEventListener('focusin', onFocusIn)\n            document.addEventListener('focusout', onFocusOut)\n          } else {\n            cleanupDocumentListeners()\n          }\n        },\n        { immediate: true }\n      )\n    })\n\n    onBeforeUnmount(() => {\n      cleanupDocumentListeners()\n      const trapContainer = unref(forwardRef)\n\n      if (trapContainer) {\n        trapContainer.removeEventListener(FOCUS_ON_MOUNT, focusOnMount)\n        const unmountEvent = new Event(FOCUS_ON_UNMOUNT, FOCUS_ON_MOUNT_OPTS)\n\n        trapContainer.addEventListener(FOCUS_ON_UNMOUNT, focusOnUnmount)\n        trapContainer.dispatchEvent(unmountEvent)\n\n        if (!unmountEvent.defaultPrevented) {\n          tryFocus(lastFocusBeforeMounted ?? document.body, true)\n        }\n\n        trapContainer.removeEventListener(FOCUS_ON_UNMOUNT, focusOnMount)\n        focusableStack.remove(focusLayer)\n      }\n    })\n\n    return {\n      focusTrapRef,\n      forwardRef,\n      onKeydown,\n    }\n  },\n})\n</script>\n"]},"metadata":{},"sourceType":"module"}